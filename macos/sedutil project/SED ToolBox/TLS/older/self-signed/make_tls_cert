#!/bin/bash -xv

# Source Utility_functions.sh from the same directory as this script
cur=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
. "${cur}/Utility_functions.sh"

# Certificate Variables
OUTPATH="./"
VERBOSE=0
DURATION=3653 # 10 years (365.25 * 10, rounded)
C_REQUIRED=1
ST_REQUIRED=1
L_REQUIRED=1
O_REQUIRED=1
OU_REQUIRED=0
CN_REQUIRED=1
emailAddress_REQUIRED=0



# Help Screen
help() {
    echo -n "$0 [OPTIONS] -c=US --state=California ...

Generate signed TLS certificate using OpenSSL

 Options:
  -c|--country             Country Name (2 letter code)
  -s|--state               State or Province Name (full name)
  -l|--locality            Locality Name (eg, city)
  -o|--organization        Organization Name (eg, company)
  -u|--unit                Organizational Unit Name (eg, section)
  -n|--common-name         Common Name (e.g. server FQDN or YOUR name)
  -e|--email               Email Address
  -p|--path                Path to output generated keys
  -d|--duration            Validity duration of the certificate (in days)
  -P|--identity-password   Wrapped identity key password
  -h|--help                Display this help and exit
  -v|--verbose             Verbose output
 -CA                       Certificate Authority to sign certificate
"
}

# Process Arguments
while [ "$1" != "" ]; do
    PARAM=`echo $1 | awk -F= '{print $1}'`
    VALUE=`echo $1 | awk -F= '{print $2}'`
    case "${PARAM}" in
        -h|--help) help; safeExit ;;
        -c|--country) C="${VALUE}" ;;
        -s|--state) ST="${VALUE}" ;;
        -l|--locality) L="${VALUE}" ;;
        -o|--organization) O="${VALUE}" ;;
        -u|--unit) OU="${VALUE}" ;;
        -n|--common-name) CN="${VALUE}" ;;
        -e|--email) emailAddress="${VALUE}" ;;
        -p|--path) OUTPATH="${VALUE}"; testPath ;;
        -P|--identity-password) SERVERIDENTITY_PASSWORD="${VALUE}" ;;
	-d|--duration) DURATION="${VALUE}" ;;
        -v|--verbose) VERBOSE=1 ;;
       -CA|--certificate-authority) CA="${VALUE}" ;;
        *) echo "ERROR: unknown parameter \""${PARAM}"\""; help; exit 1 ;;
    esac
    shift
done

# Build TLS Certificate
build() {
    # Sanitize domain name for file name
    FILENAME="${CN/\*\./}"
    FILEPATH="${OUTPATH}${FILENAME}"
    
    # CSR Configuration
    buildCsrCnf

    # Create ext configuration file
    buildServerExtCnf

    # Server key and CSR
    generateServerKeyAndCSR
    
    # Server certificate
    CACERT="${OUTPATH}${CA}.pem"
    CAKEY="${OUTPATH}${CA}.key"
    generateServerCert
    
    # Server 
    generateServerIdentity
}

main () {
    checkVariables
    build
    [ $VERBOSE -eq 1 ] && showVals
    safeExit
}


main
