/* Generated code for Python module 'dialogs'
 * created by Nuitka version 0.6.6
 *
 * This code is in part copyright 2019 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "__helpers.h"

/* The "_module_dialogs" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_dialogs;
PyDictObject *moduledict_dialogs;

/* The declarations of module constants used, if any. */
static PyObject *const_str_digest_124212c711a59cd480738702446f790e;
extern PyObject *const_str_plain_ScrolledWindow;
static PyObject *const_tuple_str_digest_ea27fd1abf24ba1001b39b13e5d301ce_tuple;
static PyObject *const_str_plain_queryVbox;
extern PyObject *const_str_plain_data;
static PyObject *const_str_digest_43d00fe656fff759355f5b736d587b4e;
extern PyObject *const_tuple_str_chr_42_tuple;
static PyObject *const_str_plain_set_policy;
extern PyObject *const_str_plain_sb_menu;
extern PyObject *const_str_plain_screen_menu;
static PyObject *const_str_plain_hib_label;
static PyObject *const_str_plain_rt_openLog;
static PyObject *const_str_digest_a1d4a5f21f2d424de7fcc6b4e390d5e8;
static PyObject *const_str_digest_911293f86e9eae51518cc6890f660a69;
static PyObject *const_str_digest_9f764a78a338a7c43469b8b3dd335859;
static PyObject *const_str_plain_spBoxQ;
static PyObject *const_tuple_1554c53980eb05828d466dc3d408826b_tuple;
static PyObject *const_str_plain_set_logo;
static PyObject *const_str_plain_passReadQ;
extern PyObject *const_tuple_str_digest_84ba3144e8a4c8824551fdd8d0fe5bde_tuple;
static PyObject *const_str_digest_18ee416e86eceffd297bc23cb5d0d8bc;
static PyObject *const_tuple_b78e031a1aa4c4f9a83550e7f5537989_tuple;
extern PyObject *const_str_plain_Hibernate;
static PyObject *const_str_plain_chooser;
static PyObject *const_str_digest_df9c47c787f477b67a89a289a155f3c3;
extern PyObject *const_str_plain_runop;
static PyObject *const_tuple_47143709c63dc82012049da6cea392a6_tuple;
static PyObject *const_tuple_30fbef87e53568e2aa1014e9349a1d80_tuple;
extern PyObject *const_str_plain_gobject;
static PyObject *const_str_plain_queryTextBuffer;
extern PyObject *const_str_plain_d;
static PyObject *const_str_plain_saveLog_button;
extern PyObject *const_str_plain_dev_select;
extern PyObject *const_str_plain_args;
static PyObject *const_str_plain_FILE_CHOOSER_ACTION_SAVE;
extern PyObject *const_str_plain_prefix;
static PyObject *const_str_digest_52927d9cfc06b80d0dd3015ca542ce4b;
extern PyObject *const_str_plain_lockhash;
extern PyObject *const_str_plain_int;
extern PyObject *const_str_plain_write;
extern PyObject *const_str_plain___exit__;
static PyObject *const_str_digest_d78a499173e6f4625d883f0cec40a565;
static PyObject *const_int_pos_1000000;
extern PyObject *const_int_neg_1;
static PyObject *const_str_plain_Information;
extern PyObject *const_str_plain_BUTTONS_OK;
extern PyObject *const_str_plain_devs_list;
static PyObject *const_str_digest_9af85d5d90688acaaf51a2f76a9f32c8;
static PyObject *const_str_plain_writer;
extern PyObject *const_str_plain_threading;
extern PyObject *const_str_plain_os;
extern PyObject *const_str_plain_openOpal;
static PyObject *const_str_plain_add_mime_type;
static PyObject *const_tuple_str_plain_USB_tuple;
static PyObject *const_tuple_str_digest_6beb662f9e257c6046122b13fb912121_tuple;
static PyObject *const_tuple_int_pos_250_int_pos_250_tuple;
static PyObject *const_str_plain_query_instr;
static PyObject *const_str_plain_STOCK_CANCEL;
extern PyObject *const_str_plain_filename;
static PyObject *const_str_plain_pwr_instr;
static PyObject *const_list_24d8dacd321300c55e438dfef03bb9c5_list;
static PyObject *const_tuple_str_digest_c46c9f5ab7172869d3bf1fabbb55dd9f_tuple;
static PyObject *const_str_plain_STOCK_SAVE;
static PyObject *const_str_plain_add_pattern;
static PyObject *const_tuple_774b7c4dc74f4426ce5f4537624fd591_tuple;
extern PyObject *const_str_plain_hide;
static PyObject *const_tuple_str_digest_e0918082bb79330390ecdc3474343538_tuple;
extern PyObject *const_str_plain_verify;
extern PyObject *const_str_plain_set_icon_from_file;
static PyObject *const_tuple_2c650076278b8aa15aee8a65a0ee7b21_tuple;
extern PyObject *const_str_plain___init__;
extern PyObject *const_str_plain_s;
static PyObject *const_tuple_str_digest_3232fccef15145259198161d04f43c6a_tuple;
static PyObject *const_str_plain_user;
extern PyObject *const_str_plain_VBox;
extern PyObject *const_str_plain_set_width_chars;
static PyObject *const_str_digest_cfd650449d53c00effa6b191315cce81;
static PyObject *const_str_plain_sleep_label;
static PyObject *const_str_digest_662cbb10bcfeff30de43c2be5c810b09;
extern PyObject *const_str_digest_5cf6c02bf201b8ae03ca790b05911675;
static PyObject *const_str_plain_set_do_overwrite_confirmation;
static PyObject *const_str_digest_6dd8408132804249209cfd4e77a420d4;
extern PyObject *const_str_plain_lockstatus_list;
extern PyObject *const_str_plain_blkid;
static PyObject *const_str_plain_Model;
static PyObject *const_str_plain_showPassQ;
static PyObject *const_str_digest_36b49885ef15d0fc3127586409e4f1cb;
extern PyObject *const_str_plain_toggled;
static PyObject *const_str_digest_5715360694973afef6f17611e4e2c2a0;
static PyObject *const_dict_aa4d6254c0a7b10c27efa9d5c6810b3b;
extern PyObject *const_str_plain_Spinner;
static PyObject *const_str_plain_rt_queryAuth;
static PyObject *const_str_plain_RESPONSE_APPLY;
static PyObject *const_tuple_str_plain_mount_tuple;
extern PyObject *const_str_plain_show_about;
static PyObject *const_str_plain_TextView;
static PyObject *const_str_plain_pb_label;
static PyObject *const_str_digest_2005eab6d6f19375dfb4b5850d6066f2;
extern PyObject *const_str_digest_b27d7e3ab2e2709ddb216f1629e0528a;
static PyObject *const_str_digest_dcaee1180da43b85258ccdaded50e8d8;
extern PyObject *const_str_plain_add;
static PyObject *const_str_digest_1b45e1898e1dfabec322865372bbd4e7;
extern PyObject *const_str_plain_None;
extern PyObject *const_tuple_str_digest_094c260cf4b4cdff973eb04653534ba7_tuple;
static PyObject *const_str_plain_txt2;
static PyObject *const_str_plain_txt1;
static PyObject *const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple;
extern PyObject *const_str_plain_pack_end;
extern PyObject *const_str_plain_res;
static PyObject *const_tuple_str_digest_b183ba1710e6bac4409cfe905cebb58d_tuple;
extern PyObject *const_str_plain_encsup_list;
static PyObject *const_list_71892e6d79835f869b13c1149c962f23_list;
static PyObject *const_str_plain_viewErr_button;
static PyObject *const_str_plain_set_version;
static PyObject *const_str_digest_286262cc09e0a78795a3971d53b1bed6;
static PyObject *const_str_digest_500f14b62f4ffa958f482307aaaeaaa0;
static PyObject *const_str_plain_Users;
extern PyObject *const_str_plain_cell;
static PyObject *const_tuple_type_str_type_str_type_str_type_str_tuple;
extern PyObject *const_str_digest_1573e6b4805ac8da2565b5c6f8345d3c;
static PyObject *const_tuple_str_digest_28f94c8a916c34a21195b86c62fa2251_tuple;
extern PyObject *const_str_plain_group;
extern PyObject *const_str_plain_TreeView;
static PyObject *const_str_digest_ebd23d2bb4a34298b0d66a00001e1ca7;
static PyObject *const_tuple_8933694fb1f2363a775222ad71d1df0e_tuple;
static PyObject *const_str_plain_powerset;
static PyObject *const_str_plain_match;
static PyObject *const_str_plain_col;
static PyObject *const_tuple_str_digest_9fb6c95c52c6329788e4855cdcbf1225_tuple;
extern PyObject *const_str_digest_3d059a914d1f4299087c016a61ec41b4;
static PyObject *const_str_digest_a48fb3cccdf20edefeb9532e6dd80a5f;
extern PyObject *const_str_plain_USBDialog;
static PyObject *const_tuple_str_digest_53e0b3338d9460ce17900f4e6d482773_tuple;
static PyObject *const_str_plain_passBoxQ;
static PyObject *const_str_digest_6beb662f9e257c6046122b13fb912121;
extern PyObject *const_str_plain_clear;
extern PyObject *const_str_plain_enable_menu;
extern PyObject *const_str_plain_set_text;
extern PyObject *const_tuple_str_digest_8482c425481a7392528c91276c4d7ae3_tuple;
static PyObject *const_tuple_str_digest_9af85d5d90688acaaf51a2f76a9f32c8_tuple;
extern PyObject *const_str_plain_openLog;
extern PyObject *const_str_plain_Alignment;
extern PyObject *const_tuple_str_plain_self_str_plain_msg_str_plain_res_str_plain_message_tuple;
static PyObject *const_tuple_str_digest_3083929b5fa45e6504468bcca4e3142a_tuple;
static PyObject *const_str_digest_8ed007d8f5811bd916325aedd8c52048;
static PyObject *const_str_digest_e974b93f125c788389bc994528457aa9;
static PyObject *const_str_plain_tcgEntries;
static PyObject *const_int_pos_500;
extern PyObject *const_str_plain_dev_sn;
static PyObject *const_str_digest_ed068c6c7c551f50a83720a12f12dc27;
static PyObject *const_str_digest_55f129d84beb41e93fee633aa27581ed;
extern PyObject *const_str_plain_disable_menu;
extern PyObject *const_str_plain_False;
static PyObject *const_str_plain_txt3;
static PyObject *const_list_82ec7edd2cad4ac6a8bbc4eb110269c1_list;
extern PyObject *const_str_plain_RESPONSE_OK;
static PyObject *const_str_digest_431b1724ba76745b0f5a6a2402052b0c;
static PyObject *const_str_digest_16654ef7a760a8e11b035a8d2dbcf016;
extern PyObject *const_str_digest_29fe972ddfd3c3ace7d88aee7a9cd77e;
static PyObject *const_tuple_str_digest_2f81980dfe65cd75aba129ef6cdeca0f_tuple;
static PyObject *const_str_plain_queryWinText;
extern PyObject *const_str_digest_73f4953da6c69be9cc1fa39da74e31a8;
static PyObject *const_str_plain_add_with_viewport;
extern PyObject *const_str_plain_drive_menu;
static PyObject *const_str_plain_STOCK_CLOSE;
static PyObject *const_str_plain_OpalDialog;
extern PyObject *const_str_digest_8482c425481a7392528c91276c4d7ae3;
static PyObject *const_str_digest_301503d632e956819fe431035d3bf52a;
extern PyObject *const_str_plain_devname;
static PyObject *const_str_digest_10be36161b689e46fcd9ecb36151f3bf;
static PyObject *const_tuple_str_digest_7d37d74a7159da5b1ebaf27e1cfa555e_tuple;
static PyObject *const_str_plain_saveToText;
extern PyObject *const_str_plain_get_text;
extern PyObject *const_str_plain_gtk;
static PyObject *const_str_digest_b183ba1710e6bac4409cfe905cebb58d;
static PyObject *const_str_digest_e7e6c5a1c1999b699ec49e94b0ae1a17;
static PyObject *const_str_digest_25b83aec39158cba36b77089e32c15a8;
extern PyObject *const_str_plain_MESSAGE_ERROR;
static PyObject *const_str_digest_4687747a4da7b5229720124340e187bf;
extern PyObject *const_str_plain_platform;
static PyObject *const_tuple_str_digest_8cda9c36930fe1d24d1f13365d80ce3b_tuple;
static PyObject *const_tuple_str_digest_1d5f53675f242c5f0d4f06c176e121a1_tuple;
extern PyObject *const_str_chr_42;
extern PyObject *const_tuple_empty;
static PyObject *const_str_digest_0752589c12ccb235f08434890c781f69;
static PyObject *const_tuple_str_digest_e64489b595c1d15899d5ce5863638a89_tuple;
static PyObject *const_str_digest_e0918082bb79330390ecdc3474343538;
extern PyObject *const_str_plain_Button;
extern PyObject *const_str_plain_close;
extern PyObject *const_str_plain_salt_list;
extern PyObject *const_tuple_str_digest_89447c318e6c708927dce4c990fa5405_tuple;
extern PyObject *const_str_digest_362b9c39b7be7164b4f637e29c9f8900;
extern PyObject *const_str_plain_re;
static PyObject *const_str_digest_f8d3ecaf41cb3d8a0f6e94493e4e05fc;
static PyObject *const_str_plain_ver_parse;
extern PyObject *const_str_plain_show_all;
extern PyObject *const_str_plain_mount;
static PyObject *const_str_digest_b8faea6f4cc3bf2fcc226045f4bd32d1;
static PyObject *const_str_digest_efb720df302d651bbfa97f25f0fc0525;
static PyObject *const_str_plain_listStore;
static PyObject *const_str_plain_strftime;
static PyObject *const_str_digest_8974007cd1bd5af74f0b391a825ef662;
static PyObject *const_tuple_str_digest_fad16014b804349bb65b09a2311b1ac7_int_pos_1_tuple;
static PyObject *const_str_digest_66dc380ed6bde77ae6e7bb85e234ea0d;
static PyObject *const_tuple_str_digest_2005eab6d6f19375dfb4b5850d6066f2_tuple;
extern PyObject *const_str_plain_usb_menu;
extern PyObject *const_str_plain_CheckButton;
static PyObject *const_str_digest_c46c9f5ab7172869d3bf1fabbb55dd9f;
static PyObject *const_str_plain_sb_label;
extern PyObject *const_str_plain_destroy;
static PyObject *const_str_plain_querySave;
extern PyObject *const_str_plain_txt;
static PyObject *const_tuple_str_digest_698bed0bd915c630f96b59400935dc79_tuple;
static PyObject *const_str_plain_usb_final;
static PyObject *const_str_plain_is_checked;
static PyObject *const_str_digest_e72492ba4d6547da2ae167e08a32821c;
extern PyObject *const_str_digest_65f1ca3cc21751516d4508974112f1bb;
static PyObject *const_str_plain_queryAuth;
static PyObject *const_tuple_str_digest_efb720df302d651bbfa97f25f0fc0525_tuple;
extern PyObject *const_str_plain_datetime;
static PyObject *const_str_plain_usb_instr;
extern PyObject *const_str_digest_8c96842b8b2bfd9741967a12c4a512ae;
static PyObject *const_str_plain_passLabel;
static PyObject *const_str_digest_6fea0baf31175ee82bc02d0851e51237;
extern PyObject *const_str_plain___file__;
static PyObject *const_str_plain_queryTextView;
static PyObject *const_str_plain_auditEntries;
static PyObject *const_tuple_str_digest_5715360694973afef6f17611e4e2c2a0_tuple;
static PyObject *const_str_digest_268db6629a0b2da516d45c0905e9f223;
extern PyObject *const_str_plain_checkbox;
extern PyObject *const_str_plain_VERSION;
static PyObject *const_str_digest_a51def470837013d7f981c2dccf54a1a;
static PyObject *const_str_plain_regex_ver;
extern PyObject *const_str_plain_Warning;
extern PyObject *const_str_plain_str;
extern PyObject *const_tuple_int_pos_1_int_0_int_0_int_0_tuple;
static PyObject *const_str_digest_7bc75c1e8b65ceef92296230a69ea957;
extern PyObject *const_str_plain_Windows;
static PyObject *const_tuple_str_digest_d6fa2950567d74d72b795980149cec37_tuple;
static PyObject *const_str_digest_9ef21afda882614b7db2bd2f0eca2fdd;
extern PyObject *const_str_plain_dev_vendor;
extern PyObject *const_str_plain_setupuser_list;
static PyObject *const_str_digest_a51a7663b6ae9546650bf769152dfea9;
static PyObject *const_str_plain_queryPass;
extern PyObject *const_str_plain_hib_menu;
static PyObject *const_tuple_str_digest_07dc242546883a69906026f99873ffbe_tuple;
static PyObject *const_str_plain_rgx;
static PyObject *const_tuple_str_digest_ed068c6c7c551f50a83720a12f12dc27_tuple;
extern PyObject *const_str_plain_dialogs;
extern PyObject *const_str_plain_text;
static PyObject *const_list_44e2226d2505434c978169802a2bf034_list;
static PyObject *const_int_pos_250;
extern PyObject *const_str_plain_replace;
static PyObject *const_tuple_int_pos_500_int_pos_500_tuple;
static PyObject *const_tuple_str_newline_tuple;
static PyObject *const_str_plain_Level;
extern PyObject *const_str_plain_drive_na;
static PyObject *const_str_plain_timeStr;
static PyObject *const_tuple_str_digest_034ef5cc8ce1d72812e691dc1283ea5a_tuple;
static PyObject *const_tuple_str_digest_52d57da239d408b2f5b4528b30de22f2_tuple;
static PyObject *const_str_plain_box;
extern PyObject *const_str_plain_dev_setup;
static PyObject *const_tuple_str_digest_ca01d9d8c75f9046de79826ecd4724fc_tuple;
static PyObject *const_str_plain_Rescan;
extern PyObject *const_str_plain_path;
extern PyObject *const_str_plain_ListStore;
static PyObject *const_str_digest_3232fccef15145259198161d04f43c6a;
extern PyObject *const_str_plain_Label;
extern PyObject *const_str_plain_setupstatus_list;
extern PyObject *const_str_plain_licCheck;
static PyObject *const_str_digest_e64489b595c1d15899d5ce5863638a89;
static PyObject *const_str_plain_viewAll_button;
static PyObject *const_str_plain_list_u;
extern PyObject *const_str_digest_89447c318e6c708927dce4c990fa5405;
static PyObject *const_str_digest_da4537c2731e3ef82022c7083e54e3d5;
extern PyObject *const_str_plain_MESSAGE_INFO;
extern PyObject *const_str_plain_popen;
extern PyObject *const_str_plain_scanning;
static PyObject *const_str_digest_59d1f4a47a49dcdffdedaaf47e61a6ce;
static PyObject *const_str_digest_10536f1422f60e0736bdf6db76e4a534;
extern PyObject *const_tuple_str_plain_self_str_plain_args_tuple;
static PyObject *const_str_digest_034ef5cc8ce1d72812e691dc1283ea5a;
static PyObject *const_tuple_str_digest_e1b0ee6128ec7d73a301039aeecc93b8_tuple;
extern PyObject *const_str_plain_msg;
extern PyObject *const_str_plain_append;
static PyObject *const_str_plain_action;
extern PyObject *const_str_plain_get_active;
extern PyObject *const_str_plain_mngPower_prompt;
static PyObject *const_tuple_str_plain_Submit_tuple;
static PyObject *const_str_plain_hbox5;
extern PyObject *const_str_plain_set_sensitive;
static PyObject *const_str_plain_hbox1;
extern PyObject *const_str_plain_clicked;
static PyObject *const_str_plain_hbox3;
static PyObject *const_list_025210018ed00a12cbd44c6743181f29_list;
static PyObject *const_str_digest_246de0b2ff3271acdef9f30298fa1a45;
extern PyObject *const_int_pos_28;
static PyObject *const_str_digest_3083929b5fa45e6504468bcca4e3142a;
static PyObject *const_str_plain_now;
static PyObject *const_str_plain_set_sort_indicator;
static PyObject *const_str_plain_errorEntries;
static PyObject *const_str_plain_AuditDialog;
static PyObject *const_str_plain_refreshUSB;
static PyObject *const_str_plain_usb_label;
static PyObject *const_str_plain_Error;
static PyObject *const_str_digest_b5880effda8d76eaf64dd7f67be144aa;
static PyObject *const_str_plain_Policy;
extern PyObject *const_str_plain_dialog;
static PyObject *const_str_plain_MB;
extern PyObject *const_tuple_int_pos_1_tuple;
static PyObject *const_str_plain_viewWarnErr_button;
static PyObject *const_str_plain_RESPONSE_CANCEL;
extern PyObject *const_str_plain_row;
static PyObject *const_str_plain_Objects;
static PyObject *const_tuple_str_digest_4263c7efeab2c98f9cdfa519ae1cebba_tuple;
static PyObject *const_str_plain_submitPass;
extern PyObject *const_tuple_none_none_none_tuple;
static PyObject *const_tuple_579ae0c2c7409ed9865e38c23c43418d_tuple;
extern PyObject *const_str_plain_dev_enc;
static PyObject *const_str_digest_2d5a8e8391575c4e14e6dc6db8c07f2f;
extern PyObject *const_str_digest_ae3b8b33bbb4f0816fc34e114de2f069;
extern PyObject *const_str_digest_094c260cf4b4cdff973eb04653534ba7;
static PyObject *const_str_digest_8cd03e5f4b0b4910e2f581e48ffc988b;
static PyObject *const_tuple_str_digest_ebe547e87ec1874e7daf52989a3eff90_tuple;
extern PyObject *const_tuple_int_pos_2_tuple;
static PyObject *const_str_digest_ec7f14d6f87a9402f91132429af0c8c5;
static PyObject *const_str_plain_Never;
static PyObject *const_str_digest_6bd412f3684066359170fadea0d98ee1;
static PyObject *const_str_digest_03b98ad4acc077de88fea75272d50cbe;
extern PyObject *const_str_plain_tcg_usb_list;
extern PyObject *const_str_plain_entries;
static PyObject *const_str_plain_Admins;
static PyObject *const_str_plain_LockingEnabled;
extern PyObject *const_str_plain_get_model;
extern PyObject *const_str_plain_t1_run;
extern PyObject *const_str_plain_dev_status;
extern PyObject *const_str_digest_f9aa9f1d756280254529dbc306087548;
static PyObject *const_str_plain_mod_regex;
static PyObject *const_str_plain_set_program_name;
extern PyObject *const_str_plain_type;
static PyObject *const_tuple_9cdf41a53768e978cb7162b6c925b966_tuple;
static PyObject *const_tuple_d5f95a386b25f97f0a85d872506e8aaa_tuple;
static PyObject *const_str_digest_2624404288aed3b04a3ef421570939fa;
extern PyObject *const_str_plain_pass_sav;
static PyObject *const_str_plain_salt;
extern PyObject *const_str_plain_model;
static PyObject *const_str_digest_737123fd8bb9015bd7e3debea2571fd9;
extern PyObject *const_str_plain_read;
extern PyObject *const_str_plain_set_markup;
static PyObject *const_str_digest_e02922279d2c1410aed5cd1ced9cecdb;
static PyObject *const_str_digest_4263c7efeab2c98f9cdfa519ae1cebba;
static PyObject *const_str_digest_5445d83d3fb08c0e9a9acdfb8426b34f;
static PyObject *const_str_plain_queryTextList;
extern PyObject *const_str_plain_self;
static PyObject *const_str_plain_stopSpin;
static PyObject *const_str_plain_set_copyright;
extern PyObject *const_str_plain_hbox0;
extern PyObject *const_str_plain_t1;
static PyObject *const_tuple_int_pos_400_int_pos_500_tuple;
extern PyObject *const_str_plain_postlock;
extern PyObject *const_tuple_str_digest_ada44e9efab8574d9851f2401c97964e_tuple;
extern PyObject *const_str_digest_860d00cf321643e9e9ab82de992e8e2f;
extern PyObject *const_str_plain_msg_ok;
static PyObject *const_str_plain_m2;
extern PyObject *const_str_plain_f;
static PyObject *const_str_plain_m1;
static PyObject *const_tuple_str_digest_f4836760c9d3202152b7ff9ebfeddb54_tuple;
static PyObject *const_str_digest_495cc6fe47e97cc717d1226c09de9126;
extern PyObject *const_str_plain_get_power;
extern PyObject *const_tuple_false_int_0_tuple;
static PyObject *const_str_plain_filterLog;
extern PyObject *const_str_plain_tcg_list;
extern PyObject *const_str_digest_ada44e9efab8574d9851f2401c97964e;
static PyObject *const_str_digest_e1b0ee6128ec7d73a301039aeecc93b8;
static PyObject *const_str_digest_d6fa2950567d74d72b795980149cec37;
static PyObject *const_str_digest_fad16014b804349bb65b09a2311b1ac7;
static PyObject *const_str_digest_28f94c8a916c34a21195b86c62fa2251;
static PyObject *const_str_digest_95d5e771057426593bbb37b17c6dbf84;
static PyObject *const_str_digest_c9fbfcc6a8dbf7ddb4d25424175de5f6;
extern PyObject *const_str_plain_sub;
static PyObject *const_tuple_51f2212c8720be35d2d30423c9f8e990_tuple;
extern PyObject *const_str_plain_buttons;
static PyObject *const_str_plain_Locked;
extern PyObject *const_str_digest_36d32a0ddc1f6851748955a073c870dd;
static PyObject *const_str_plain_add_filter;
extern PyObject *const_str_plain_t;
extern PyObject *const_str_digest_2a99f2106e37159d649e36cd642454d7;
static PyObject *const_str_plain_hbox4;
extern PyObject *const_int_pos_10;
static PyObject *const_str_plain_eventDescriptions;
static PyObject *const_str_digest_ca6ee9ff3fe103ce252238d53ea68bfa;
static PyObject *const_str_digest_d03bb4fbc98b8e70bbbef51204f2d5e1;
static PyObject *const_str_digest_07dc242546883a69906026f99873ffbe;
static PyObject *const_str_plain_STOCK_OK;
static PyObject *const_str_digest_c659b96816aa56bce3d66343743b03c7;
extern PyObject *const_str_plain_message;
static PyObject *const_tuple_9f4480d9006d3e39538c90427d1af701_tuple;
extern PyObject *const_str_plain_system;
static PyObject *const_str_plain_pixbuf_new_from_file;
extern PyObject *const_int_pos_24;
static PyObject *const_tuple_str_plain_self_str_plain_checkbox_str_plain_is_checked_tuple;
static PyObject *const_str_digest_843410e89b0d3743520d4222efa58a8d;
extern PyObject *const_str_plain_pba_list;
extern PyObject *const_str_plain_dev_opal_ver;
static PyObject *const_str_plain_checkBoxQ;
static PyObject *const_str_plain_writerows;
static PyObject *const_str_plain_hbox2;
extern PyObject *const_str_plain_PBA_VERSION;
extern PyObject *const_int_pos_7;
extern PyObject *const_int_pos_4;
extern PyObject *const_int_pos_5;
extern PyObject *const_int_pos_2;
extern PyObject *const_int_pos_3;
extern PyObject *const_tuple_str_digest_ae3b8b33bbb4f0816fc34e114de2f069_tuple;
static PyObject *const_str_plain_get_filename;
extern PyObject *const_int_pos_8;
extern PyObject *const_int_pos_9;
static PyObject *const_str_digest_eb909a9428feb017f456385f5b51d9cb;
extern PyObject *const_str_plain_dev_userSetup;
extern PyObject *const_str_plain_dev_pbaVer;
extern PyObject *const_tuple_true_tuple;
static PyObject *const_tuple_8db63d4f9df733a56a40f928f24d7bc6_tuple;
static PyObject *const_tuple_str_digest_c9fbfcc6a8dbf7ddb4d25424175de5f6_str_empty_tuple;
extern PyObject *const_str_plain_Linux;
static PyObject *const_tuple_str_digest_eb909a9428feb017f456385f5b51d9cb_tuple;
extern PyObject *const_str_plain_iter;
extern PyObject *const_str_plain_get_buffer;
static PyObject *const_str_plain_settings;
extern PyObject *const_str_plain_blockSID_list;
extern PyObject *const_str_plain_runprocess;
extern PyObject *const_str_plain_Window;
extern PyObject *const_int_pos_1;
static PyObject *const_str_plain_r2;
static PyObject *const_tuple_int_pos_10_tuple;
extern PyObject *const_str_plain_user_list;
extern PyObject *const_str_plain_run;
static PyObject *const_str_digest_fb892cd75652fef24aca5d32a3884fc0;
static PyObject *const_tuple_str_digest_e1c3282c2c49230ab34cbbb48ee72001_tuple;
extern PyObject *const_str_plain_join;
static PyObject *const_str_digest_47f300fb89e60cc15fc91f359a4d61b8;
static PyObject *const_str_digest_e8f6108d13e8e15ce1db6d656c57bb31;
static PyObject *const_tuple_str_digest_9ef21afda882614b7db2bd2f0eca2fdd_tuple;
static PyObject *const_str_plain_USB;
static PyObject *const_str_digest_ebe547e87ec1874e7daf52989a3eff90;
extern PyObject *const_str_plain_set_border_width;
extern PyObject *const_str_plain_prelock;
extern PyObject *const_str_plain_show;
static PyObject *const_tuple_str_digest_6926c4cdc4f6ef08c6e616381df4872b_tuple;
extern PyObject *const_str_plain_connect;
extern PyObject *const_str_plain_1;
static PyObject *const_tuple_str_digest_e7e6c5a1c1999b699ec49e94b0ae1a17_tuple;
extern PyObject *const_str_plain_series_list;
static PyObject *const_str_plain_set_default_size;
static PyObject *const_str_plain_N;
extern PyObject *const_str_plain_run_scan;
extern PyObject *const_str_plain___enter__;
extern PyObject *const_str_plain_CellRendererText;
extern PyObject *const_str_plain_check_pass_rd;
extern PyObject *const_str_plain_runthread;
extern PyObject *const_str_plain_pw_strip;
static PyObject *const_str_digest_ea27fd1abf24ba1001b39b13e5d301ce;
static PyObject *const_str_plain_type_a;
extern PyObject *const_str_plain_m;
static PyObject *const_tuple_str_digest_acf905062190ec8d249c9050c6366424_tuple;
extern PyObject *const_str_plain_i;
static PyObject *const_tuple_dfef09b1a52e998cc9ff9cf11df5c263_tuple;
extern PyObject *const_str_plain_e;
static PyObject *const_str_digest_56909ab61570685ab870054d5154f2f6;
extern PyObject *const_str_digest_84ba3144e8a4c8824551fdd8d0fe5bde;
extern PyObject *const_str_plain_DEV_OS;
extern PyObject *const_str_plain_TreeViewColumn;
static PyObject *const_str_plain_scrolledWin;
static PyObject *const_str_plain_spinQ;
static PyObject *const_tuple_str_digest_8974007cd1bd5af74f0b391a825ef662_tuple;
extern PyObject *const_str_plain_dev_msid;
static PyObject *const_str_plain_u;
extern PyObject *const_str_plain_w;
extern PyObject *const_str_plain_vbox;
extern PyObject *const_tuple_int_pos_20_tuple;
static PyObject *const_str_plain_Time;
static PyObject *const_str_plain_get_content_area;
static PyObject *const_str_plain_FileChooserDialog;
static PyObject *const_tuple_107aed21120b7cdd3a04c9d393845c10_tuple;
static PyObject *const_str_plain_done;
static PyObject *const_tuple_str_digest_0752589c12ccb235f08434890c781f69_tuple;
extern PyObject *const_str_plain_set_visibility;
static PyObject *const_str_plain_onDestroy;
extern PyObject *const_str_plain_pb_menu;
static PyObject *const_str_digest_ad53835ae241a2eb325b6652c22d7ec7;
extern PyObject *const_str_plain_findall;
static PyObject *const_str_digest_396785b3bb5921b9ef039f8972929669;
static PyObject *const_tuple_str_plain_Never_tuple;
extern PyObject *const_int_0;
static PyObject *const_str_plain_button_box;
static PyObject *const_str_digest_8cda9c36930fe1d24d1f13365d80ce3b;
static PyObject *const_str_plain_screen_label;
extern PyObject *const_str_digest_6eafc10dc53a14e93f58728969233d1d;
static PyObject *const_str_digest_c888f0388b2896f3fb56f9d36c5abce0;
static PyObject *const_str_plain_dev_regex3;
extern PyObject *const_str_plain___debug__;
static PyObject *const_tuple_str_digest_da4537c2731e3ef82022c7083e54e3d5_tuple;
static PyObject *const_str_plain_set_sort_column_id;
extern PyObject *const_tuple_str_empty_tuple;
static PyObject *const_tuple_str_digest_396785b3bb5921b9ef039f8972929669_tuple;
extern PyObject *const_str_plain_HBox;
static PyObject *const_str_plain_MBREnabled;
static PyObject *const_tuple_str_digest_d03bb4fbc98b8e70bbbef51204f2d5e1_tuple;
extern PyObject *const_str_plain_subprocess;
static PyObject *const_str_plain_response;
static PyObject *const_str_digest_acf905062190ec8d249c9050c6366424;
extern PyObject *const_str_plain_target;
static PyObject *const_str_plain_AboutDialog;
static PyObject *const_tuple_b9c8a3b611fcd77dae11f37652d24c6a_tuple;
extern PyObject *const_str_plain_append_column;
static PyObject *const_str_digest_a036ff953132b6466dcdd8be6f790a59;
extern PyObject *const_str_plain_pack_start;
static PyObject *const_str_digest_3208df8276e003cd29da26b8243ad24d;
extern PyObject *const_str_plain_button;
static PyObject *const_tuple_str_plain_self_str_plain_parent_str_plain_args_tuple;
static PyObject *const_str_plain_title;
extern PyObject *const_str_plain_set_active;
extern PyObject *const_str_digest_01cbd85c256bf4785aaf49c6adb60e44;
static PyObject *const_str_plain_check_toggled;
static PyObject *const_str_plain_SORT_DESCENDING;
extern PyObject *const_str_plain_start_spin;
extern PyObject *const_str_plain_query;
static PyObject *const_tuple_str_digest_a1d4a5f21f2d424de7fcc6b4e390d5e8_tuple;
extern PyObject *const_str_digest_8442ffa8f2dbdc6caf51afff829e942d;
extern PyObject *const_str_plain_count;
extern PyObject *const_str_plain_index;
static PyObject *const_str_plain_warnerrEntries;
extern PyObject *const_str_plain_gtk_version;
extern PyObject *const_str_plain_wait_instr;
extern PyObject *const_str_plain_lid_menu;
extern PyObject *const_str_plain_start;
extern PyObject *const_str_plain_length;
static PyObject *const_str_plain_SetPowerDialog;
extern PyObject *const_str_plain_vendor_list;
static PyObject *const_tuple_str_plain_self_str_plain_button_str_plain_parent_tuple;
static PyObject *const_str_digest_49b0685310235116230cb4e1af6222be;
extern PyObject *const_str_plain___doc__;
extern PyObject *const_str_plain_Thread;
static PyObject *const_str_digest_e1c3282c2c49230ab34cbbb48ee72001;
static PyObject *const_str_plain_FileFilter;
static PyObject *const_str_plain_set_name;
extern PyObject *const_str_plain_remove;
static PyObject *const_str_digest_f4836760c9d3202152b7ff9ebfeddb54;
static PyObject *const_str_digest_dd3ea41d2ee44affb56e308a5ece0994;
static PyObject *const_str_plain_mod;
extern PyObject *const_str_plain_gdk;
extern PyObject *const_tuple_str_plain_Hibernate_tuple;
extern PyObject *const_str_plain_pass_entry;
static PyObject *const_str_digest_3490b26e2c07b56165328e2d9172f15a;
static PyObject *const_str_plain_Submit;
static PyObject *const_str_plain_saveToCSV;
static PyObject *const_tuple_str_digest_7bc75c1e8b65ceef92296230a69ea957_tuple;
extern PyObject *const_str_plain_opal_ver_list;
extern PyObject *const_str_plain_Entry;
static PyObject *const_str_digest_b4c2ecd5d1ca6193dd02c4ae2cc51f86;
static PyObject *const_tuple_str_digest_301503d632e956819fe431035d3bf52a_tuple;
extern PyObject *const_tuple_str_digest_0c8d3c6eed5d4373e00b3d74bc2f9bc8_tuple;
static PyObject *const_str_digest_52d57da239d408b2f5b4528b30de22f2;
extern PyObject *const_str_plain_dev_series;
static PyObject *const_tuple_str_digest_25b83aec39158cba36b77089e32c15a8_tuple;
static PyObject *const_str_digest_3b6741aad68ded39965afbc3781dbe69;
extern PyObject *const_str_plain_split;
static PyObject *const_str_digest_3bd0e5d460f2911a3f3f0220a1f8544b;
static PyObject *const_str_digest_b340fadac88da0fc43dfd50d901ef829;
static PyObject *const_str_digest_fa4210e8e44cbe0e2aa4079faf6cd0bf;
extern PyObject *const_tuple_int_0_tuple;
extern PyObject *const_str_plain_search;
static PyObject *const_str_plain_csv;
static PyObject *const_str_digest_1d5f53675f242c5f0d4f06c176e121a1;
static PyObject *const_str_digest_5d381edee88c82fa41885016fd67e3dc;
static PyObject *const_str_plain_wb;
static PyObject *const_str_digest_ca01d9d8c75f9046de79826ecd4724fc;
static PyObject *const_str_plain_MBRDone;
static PyObject *const_str_plain_RESPONSE_CLOSE;
extern PyObject *const_str_plain_set_title;
extern PyObject *const_str_plain_append_text;
static PyObject *const_tuple_str_digest_5d381edee88c82fa41885016fd67e3dc_tuple;
extern PyObject *const_str_plain___module__;
static PyObject *const_str_plain_startSpin;
extern PyObject *const_str_plain_usb_list;
extern PyObject *const_str_digest_be268c849f1c37b6177304e3023d15bb;
static PyObject *const_str_plain_set_editable;
extern PyObject *const_str_plain_cleanup;
static PyObject *const_tuple_str_digest_6cee2b564da3c577324783ad168aeab9_tuple;
static PyObject *const_str_plain_lsOpal;
extern PyObject *const_str_plain_mode;
extern PyObject *const_str_digest_4b8d3f96b43e55a1f0ce0c23563c4be0;
extern PyObject *const_str_digest_f3d167b0dffa906401fa6c94639c194d;
static PyObject *const_tuple_str_digest_246de0b2ff3271acdef9f30298fa1a45_tuple;
static PyObject *const_tuple_int_pos_300_int_pos_300_tuple;
static PyObject *const_str_digest_e92f018ad67cc5143a4b3d6cd42928fa;
static PyObject *const_str_digest_6cee2b564da3c577324783ad168aeab9;
static PyObject *const_int_pos_300;
static PyObject *const_str_plain_showPass_toggled;
extern PyObject *const_str_plain_Drive;
static PyObject *const_str_digest_3dec77647be510d19621a0c9aeed35ae;
static PyObject *const_str_plain_QueryDialog;
extern PyObject *const_int_pos_20;
static PyObject *const_tuple_type_str_type_str_type_int_type_str_tuple;
extern PyObject *const_str_plain_m_na;
static PyObject *const_str_digest_df1c461397b5269a870d93a6b523d4e0;
static PyObject *const_str_plain_usb_new;
extern PyObject *const_str_plain_isfile;
extern PyObject *const_str_newline;
static PyObject *const_str_plain_SORT_ASCENDING;
static PyObject *const_tuple_str_digest_b8faea6f4cc3bf2fcc226045f4bd32d1_tuple;
static PyObject *const_int_pos_400;
static PyObject *const_tuple_str_digest_ebd23d2bb4a34298b0d66a00001e1ca7_tuple;
extern PyObject *const_str_plain_MessageDialog;
extern PyObject *const_str_plain_msid_list;
extern PyObject *const_str_plain_parent;
static PyObject *const_tuple_str_digest_f8d7aee47f5e3ab6510ac70ff73039eb_tuple;
static PyObject *const_tuple_str_digest_ec3b6b379ac030707422d5ef953a3b39_tuple;
static PyObject *const_str_digest_f8d7aee47f5e3ab6510ac70ff73039eb;
extern PyObject *const_str_plain_TreeIter;
static PyObject *const_str_plain_lid_label;
static PyObject *const_str_plain_txt_regex;
static PyObject *const_str_plain_plTxt;
extern PyObject *const_str_plain_idle_add;
static PyObject *const_str_digest_32ef30d278c959537680341338562ecc;
static PyObject *const_str_digest_bc031868e3ea3180f3e8ef75b396a482;
extern PyObject *const_str_plain_set_power;
extern PyObject *const_str_space;
static PyObject *const_str_digest_2e22ba06d8f8fd99e5018ea66e43c3ec;
static PyObject *const_str_digest_9fb6c95c52c6329788e4855cdcbf1225;
static PyObject *const_str_plain_set_comments;
static PyObject *const_str_digest_68ab33c88ed807c9f9cce195c9f7ba52;
extern PyObject *const_tuple_str_digest_65f1ca3cc21751516d4508974112f1bb_tuple;
static PyObject *const_str_digest_ec3b6b379ac030707422d5ef953a3b39;
static PyObject *const_str_digest_6926c4cdc4f6ef08c6e616381df4872b;
static PyObject *const_str_plain_aboutWin;
extern PyObject *const_str_plain_runscan;
static PyObject *const_str_plain_row_data;
static PyObject *const_str_plain_refresh_button;
static PyObject *const_tuple_str_plain_Rescan_tuple;
static PyObject *const_str_plain_txtVersion;
static PyObject *const_str_plain_tvOpal;
extern PyObject *const_str_plain___metaclass__;
static PyObject *const_str_plain_POLICY_AUTOMATIC;
static PyObject *const_str_digest_53e0b3338d9460ce17900f4e6d482773;
extern PyObject *const_str_plain_na_instr;
static PyObject *const_tuple_str_digest_47f300fb89e60cc15fc91f359a4d61b8_tuple;
extern PyObject *const_str_plain_combo_box_new_text;
extern PyObject *const_tuple_str_digest_5cf6c02bf201b8ae03ca790b05911675_tuple;
static PyObject *const_tuple_str_digest_e974b93f125c788389bc994528457aa9_tuple;
static PyObject *const_str_plain_POLICY_NEVER;
extern PyObject *const_str_digest_0c8d3c6eed5d4373e00b3d74bc2f9bc8;
static PyObject *const_str_plain_sleep_menu;
static PyObject *const_str_plain_tcgWin;
static PyObject *const_str_digest_2275cfe76c6d948a03b49cc49deb1a76;
static PyObject *const_tuple_str_digest_268db6629a0b2da516d45c0905e9f223_tuple;
static PyObject *const_str_digest_698bed0bd915c630f96b59400935dc79;
static PyObject *const_str_plain_save_box;
extern PyObject *const_str_empty;
extern PyObject *const_str_plain_ComboBox;
extern PyObject *const_str_plain_stop;
extern PyObject *const_str_plain_sn_list;
static PyObject *const_str_plain_filter;
extern PyObject *const_str_plain_set_tooltip_text;
static PyObject *const_tuple_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77_str_newline_tuple;
extern PyObject *const_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77;
extern PyObject *const_tuple_false_tuple;
static PyObject *const_str_digest_7d37d74a7159da5b1ebaf27e1cfa555e;
extern PyObject *const_str_plain_msg_err;
static PyObject *const_str_digest_2f81980dfe65cd75aba129ef6cdeca0f;
extern PyObject *const_int_pos_40;
extern PyObject *const_str_plain_dev_blockSID;
static PyObject *const_str_plain_columns;
static PyObject *const_str_plain_Dialog;
static PyObject *module_filename_obj;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants(void) {
    const_str_digest_124212c711a59cd480738702446f790e = UNSTREAM_STRING(&constant_bin[ 19064 ], 18, 0);
    const_tuple_str_digest_ea27fd1abf24ba1001b39b13e5d301ce_tuple = PyTuple_New(1);
    const_str_digest_ea27fd1abf24ba1001b39b13e5d301ce = UNSTREAM_STRING(&constant_bin[ 19082 ], 18, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_ea27fd1abf24ba1001b39b13e5d301ce_tuple, 0, const_str_digest_ea27fd1abf24ba1001b39b13e5d301ce); Py_INCREF(const_str_digest_ea27fd1abf24ba1001b39b13e5d301ce);
    const_str_plain_queryVbox = UNSTREAM_STRING(&constant_bin[ 19100 ], 9, 1);
    const_str_digest_43d00fe656fff759355f5b736d587b4e = UNSTREAM_STRING(&constant_bin[ 19109 ], 19, 0);
    const_str_plain_set_policy = UNSTREAM_STRING(&constant_bin[ 19128 ], 10, 1);
    const_str_plain_hib_label = UNSTREAM_STRING(&constant_bin[ 19138 ], 9, 1);
    const_str_plain_rt_openLog = UNSTREAM_STRING(&constant_bin[ 19147 ], 10, 1);
    const_str_digest_a1d4a5f21f2d424de7fcc6b4e390d5e8 = UNSTREAM_STRING(&constant_bin[ 19157 ], 7, 0);
    const_str_digest_911293f86e9eae51518cc6890f660a69 = UNSTREAM_STRING(&constant_bin[ 19164 ], 19, 0);
    const_str_digest_9f764a78a338a7c43469b8b3dd335859 = UNSTREAM_STRING(&constant_bin[ 19183 ], 19, 0);
    const_str_plain_spBoxQ = UNSTREAM_STRING(&constant_bin[ 19202 ], 6, 1);
    const_tuple_1554c53980eb05828d466dc3d408826b_tuple = PyTuple_New(15);
    PyTuple_SET_ITEM(const_tuple_1554c53980eb05828d466dc3d408826b_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_1554c53980eb05828d466dc3d408826b_tuple, 1, const_str_plain_button); Py_INCREF(const_str_plain_button);
    PyTuple_SET_ITEM(const_tuple_1554c53980eb05828d466dc3d408826b_tuple, 2, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    const_str_plain_writer = UNSTREAM_STRING(&constant_bin[ 19208 ], 6, 1);
    PyTuple_SET_ITEM(const_tuple_1554c53980eb05828d466dc3d408826b_tuple, 3, const_str_plain_writer); Py_INCREF(const_str_plain_writer);
    PyTuple_SET_ITEM(const_tuple_1554c53980eb05828d466dc3d408826b_tuple, 4, const_str_plain_f); Py_INCREF(const_str_plain_f);
    PyTuple_SET_ITEM(const_tuple_1554c53980eb05828d466dc3d408826b_tuple, 5, const_str_plain_res); Py_INCREF(const_str_plain_res);
    const_str_plain_timeStr = UNSTREAM_STRING(&constant_bin[ 19214 ], 7, 1);
    PyTuple_SET_ITEM(const_tuple_1554c53980eb05828d466dc3d408826b_tuple, 6, const_str_plain_timeStr); Py_INCREF(const_str_plain_timeStr);
    const_str_plain_chooser = UNSTREAM_STRING(&constant_bin[ 19221 ], 7, 1);
    PyTuple_SET_ITEM(const_tuple_1554c53980eb05828d466dc3d408826b_tuple, 7, const_str_plain_chooser); Py_INCREF(const_str_plain_chooser);
    const_str_plain_response = UNSTREAM_STRING(&constant_bin[ 19228 ], 8, 1);
    PyTuple_SET_ITEM(const_tuple_1554c53980eb05828d466dc3d408826b_tuple, 8, const_str_plain_response); Py_INCREF(const_str_plain_response);
    const_str_plain_filter = UNSTREAM_STRING(&constant_bin[ 19236 ], 6, 1);
    PyTuple_SET_ITEM(const_tuple_1554c53980eb05828d466dc3d408826b_tuple, 9, const_str_plain_filter); Py_INCREF(const_str_plain_filter);
    const_str_plain_row_data = UNSTREAM_STRING(&constant_bin[ 19242 ], 8, 1);
    PyTuple_SET_ITEM(const_tuple_1554c53980eb05828d466dc3d408826b_tuple, 10, const_str_plain_row_data); Py_INCREF(const_str_plain_row_data);
    PyTuple_SET_ITEM(const_tuple_1554c53980eb05828d466dc3d408826b_tuple, 11, const_str_plain_message); Py_INCREF(const_str_plain_message);
    PyTuple_SET_ITEM(const_tuple_1554c53980eb05828d466dc3d408826b_tuple, 12, const_str_plain_filename); Py_INCREF(const_str_plain_filename);
    PyTuple_SET_ITEM(const_tuple_1554c53980eb05828d466dc3d408826b_tuple, 13, const_str_plain_data); Py_INCREF(const_str_plain_data);
    PyTuple_SET_ITEM(const_tuple_1554c53980eb05828d466dc3d408826b_tuple, 14, const_str_plain_row); Py_INCREF(const_str_plain_row);
    const_str_plain_set_logo = UNSTREAM_STRING(&constant_bin[ 19250 ], 8, 1);
    const_str_plain_passReadQ = UNSTREAM_STRING(&constant_bin[ 19258 ], 9, 1);
    const_str_digest_18ee416e86eceffd297bc23cb5d0d8bc = UNSTREAM_STRING(&constant_bin[ 19267 ], 16, 0);
    const_tuple_b78e031a1aa4c4f9a83550e7f5537989_tuple = PyTuple_New(5);
    PyTuple_SET_ITEM(const_tuple_b78e031a1aa4c4f9a83550e7f5537989_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_b78e031a1aa4c4f9a83550e7f5537989_tuple, 1, const_str_plain_button); Py_INCREF(const_str_plain_button);
    PyTuple_SET_ITEM(const_tuple_b78e031a1aa4c4f9a83550e7f5537989_tuple, 2, const_str_plain_entries); Py_INCREF(const_str_plain_entries);
    PyTuple_SET_ITEM(const_tuple_b78e031a1aa4c4f9a83550e7f5537989_tuple, 3, const_str_plain_mode); Py_INCREF(const_str_plain_mode);
    PyTuple_SET_ITEM(const_tuple_b78e031a1aa4c4f9a83550e7f5537989_tuple, 4, const_str_plain_i); Py_INCREF(const_str_plain_i);
    const_str_digest_df9c47c787f477b67a89a289a155f3c3 = UNSTREAM_STRING(&constant_bin[ 19283 ], 8, 0);
    const_tuple_47143709c63dc82012049da6cea392a6_tuple = PyTuple_New(12);
    PyTuple_SET_ITEM(const_tuple_47143709c63dc82012049da6cea392a6_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_47143709c63dc82012049da6cea392a6_tuple, 1, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    PyTuple_SET_ITEM(const_tuple_47143709c63dc82012049da6cea392a6_tuple, 2, const_str_plain_cell); Py_INCREF(const_str_plain_cell);
    PyTuple_SET_ITEM(const_tuple_47143709c63dc82012049da6cea392a6_tuple, 3, const_str_plain_e); Py_INCREF(const_str_plain_e);
    PyTuple_SET_ITEM(const_tuple_47143709c63dc82012049da6cea392a6_tuple, 4, const_str_plain_i); Py_INCREF(const_str_plain_i);
    const_str_plain_lsOpal = UNSTREAM_STRING(&constant_bin[ 19291 ], 6, 1);
    PyTuple_SET_ITEM(const_tuple_47143709c63dc82012049da6cea392a6_tuple, 5, const_str_plain_lsOpal); Py_INCREF(const_str_plain_lsOpal);
    const_str_plain_tcgEntries = UNSTREAM_STRING(&constant_bin[ 19297 ], 10, 1);
    PyTuple_SET_ITEM(const_tuple_47143709c63dc82012049da6cea392a6_tuple, 6, const_str_plain_tcgEntries); Py_INCREF(const_str_plain_tcgEntries);
    PyTuple_SET_ITEM(const_tuple_47143709c63dc82012049da6cea392a6_tuple, 7, const_str_plain_vbox); Py_INCREF(const_str_plain_vbox);
    const_str_plain_tvOpal = UNSTREAM_STRING(&constant_bin[ 19307 ], 6, 1);
    PyTuple_SET_ITEM(const_tuple_47143709c63dc82012049da6cea392a6_tuple, 8, const_str_plain_tvOpal); Py_INCREF(const_str_plain_tvOpal);
    const_str_plain_scrolledWin = UNSTREAM_STRING(&constant_bin[ 13943 ], 11, 1);
    PyTuple_SET_ITEM(const_tuple_47143709c63dc82012049da6cea392a6_tuple, 9, const_str_plain_scrolledWin); Py_INCREF(const_str_plain_scrolledWin);
    const_str_plain_col = UNSTREAM_STRING(&constant_bin[ 6334 ], 3, 1);
    PyTuple_SET_ITEM(const_tuple_47143709c63dc82012049da6cea392a6_tuple, 10, const_str_plain_col); Py_INCREF(const_str_plain_col);
    const_str_plain_columns = UNSTREAM_STRING(&constant_bin[ 19313 ], 7, 1);
    PyTuple_SET_ITEM(const_tuple_47143709c63dc82012049da6cea392a6_tuple, 11, const_str_plain_columns); Py_INCREF(const_str_plain_columns);
    const_tuple_30fbef87e53568e2aa1014e9349a1d80_tuple = PyTuple_New(13);
    PyTuple_SET_ITEM(const_tuple_30fbef87e53568e2aa1014e9349a1d80_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_30fbef87e53568e2aa1014e9349a1d80_tuple, 1, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    const_str_plain_queryTextList = UNSTREAM_STRING(&constant_bin[ 19320 ], 13, 1);
    PyTuple_SET_ITEM(const_tuple_30fbef87e53568e2aa1014e9349a1d80_tuple, 2, const_str_plain_queryTextList); Py_INCREF(const_str_plain_queryTextList);
    PyTuple_SET_ITEM(const_tuple_30fbef87e53568e2aa1014e9349a1d80_tuple, 3, const_str_plain_index); Py_INCREF(const_str_plain_index);
    const_str_plain_passLabel = UNSTREAM_STRING(&constant_bin[ 19333 ], 9, 1);
    PyTuple_SET_ITEM(const_tuple_30fbef87e53568e2aa1014e9349a1d80_tuple, 4, const_str_plain_passLabel); Py_INCREF(const_str_plain_passLabel);
    const_str_plain_hbox1 = UNSTREAM_STRING(&constant_bin[ 19342 ], 5, 1);
    PyTuple_SET_ITEM(const_tuple_30fbef87e53568e2aa1014e9349a1d80_tuple, 5, const_str_plain_hbox1); Py_INCREF(const_str_plain_hbox1);
    PyTuple_SET_ITEM(const_tuple_30fbef87e53568e2aa1014e9349a1d80_tuple, 6, const_str_plain_spBoxQ); Py_INCREF(const_str_plain_spBoxQ);
    const_str_plain_querySave = UNSTREAM_STRING(&constant_bin[ 19347 ], 9, 1);
    PyTuple_SET_ITEM(const_tuple_30fbef87e53568e2aa1014e9349a1d80_tuple, 7, const_str_plain_querySave); Py_INCREF(const_str_plain_querySave);
    const_str_plain_plTxt = UNSTREAM_STRING(&constant_bin[ 19356 ], 5, 1);
    PyTuple_SET_ITEM(const_tuple_30fbef87e53568e2aa1014e9349a1d80_tuple, 8, const_str_plain_plTxt); Py_INCREF(const_str_plain_plTxt);
    PyTuple_SET_ITEM(const_tuple_30fbef87e53568e2aa1014e9349a1d80_tuple, 9, const_str_plain_queryVbox); Py_INCREF(const_str_plain_queryVbox);
    PyTuple_SET_ITEM(const_tuple_30fbef87e53568e2aa1014e9349a1d80_tuple, 10, const_str_plain_scrolledWin); Py_INCREF(const_str_plain_scrolledWin);
    const_str_plain_checkBoxQ = UNSTREAM_STRING(&constant_bin[ 19361 ], 9, 1);
    PyTuple_SET_ITEM(const_tuple_30fbef87e53568e2aa1014e9349a1d80_tuple, 11, const_str_plain_checkBoxQ); Py_INCREF(const_str_plain_checkBoxQ);
    const_str_plain_queryTextView = UNSTREAM_STRING(&constant_bin[ 19370 ], 13, 1);
    PyTuple_SET_ITEM(const_tuple_30fbef87e53568e2aa1014e9349a1d80_tuple, 12, const_str_plain_queryTextView); Py_INCREF(const_str_plain_queryTextView);
    const_str_plain_queryTextBuffer = UNSTREAM_STRING(&constant_bin[ 19383 ], 15, 1);
    const_str_plain_saveLog_button = UNSTREAM_STRING(&constant_bin[ 19398 ], 14, 1);
    const_str_plain_FILE_CHOOSER_ACTION_SAVE = UNSTREAM_STRING(&constant_bin[ 19412 ], 24, 1);
    const_str_digest_52927d9cfc06b80d0dd3015ca542ce4b = UNSTREAM_STRING(&constant_bin[ 19436 ], 24, 0);
    const_str_digest_d78a499173e6f4625d883f0cec40a565 = UNSTREAM_STRING(&constant_bin[ 19460 ], 15, 0);
    const_int_pos_1000000 = PyInt_FromLong(1000000l);
    const_str_plain_Information = UNSTREAM_STRING(&constant_bin[ 6118 ], 11, 1);
    const_str_digest_9af85d5d90688acaaf51a2f76a9f32c8 = UNSTREAM_STRING(&constant_bin[ 19475 ], 10, 0);
    const_str_plain_add_mime_type = UNSTREAM_STRING(&constant_bin[ 19485 ], 13, 1);
    const_tuple_str_plain_USB_tuple = PyTuple_New(1);
    const_str_plain_USB = UNSTREAM_STRING(&constant_bin[ 5503 ], 3, 1);
    PyTuple_SET_ITEM(const_tuple_str_plain_USB_tuple, 0, const_str_plain_USB); Py_INCREF(const_str_plain_USB);
    const_tuple_str_digest_6beb662f9e257c6046122b13fb912121_tuple = PyTuple_New(1);
    const_str_digest_6beb662f9e257c6046122b13fb912121 = UNSTREAM_STRING(&constant_bin[ 19498 ], 60, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_6beb662f9e257c6046122b13fb912121_tuple, 0, const_str_digest_6beb662f9e257c6046122b13fb912121); Py_INCREF(const_str_digest_6beb662f9e257c6046122b13fb912121);
    const_tuple_int_pos_250_int_pos_250_tuple = PyTuple_New(2);
    const_int_pos_250 = PyInt_FromLong(250l);
    PyTuple_SET_ITEM(const_tuple_int_pos_250_int_pos_250_tuple, 0, const_int_pos_250); Py_INCREF(const_int_pos_250);
    PyTuple_SET_ITEM(const_tuple_int_pos_250_int_pos_250_tuple, 1, const_int_pos_250); Py_INCREF(const_int_pos_250);
    const_str_plain_query_instr = UNSTREAM_STRING(&constant_bin[ 19558 ], 11, 1);
    const_str_plain_STOCK_CANCEL = UNSTREAM_STRING(&constant_bin[ 19569 ], 12, 1);
    const_str_plain_pwr_instr = UNSTREAM_STRING(&constant_bin[ 19581 ], 9, 1);
    const_list_24d8dacd321300c55e438dfef03bb9c5_list = PyList_New(4);
    const_str_plain_Level = UNSTREAM_STRING(&constant_bin[ 10624 ], 5, 1);
    PyList_SET_ITEM(const_list_24d8dacd321300c55e438dfef03bb9c5_list, 0, const_str_plain_Level); Py_INCREF(const_str_plain_Level);
    const_str_digest_fb892cd75652fef24aca5d32a3884fc0 = UNSTREAM_STRING(&constant_bin[ 19590 ], 13, 0);
    PyList_SET_ITEM(const_list_24d8dacd321300c55e438dfef03bb9c5_list, 1, const_str_digest_fb892cd75652fef24aca5d32a3884fc0); Py_INCREF(const_str_digest_fb892cd75652fef24aca5d32a3884fc0);
    PyList_SET_ITEM(const_list_24d8dacd321300c55e438dfef03bb9c5_list, 2, const_str_digest_df9c47c787f477b67a89a289a155f3c3); Py_INCREF(const_str_digest_df9c47c787f477b67a89a289a155f3c3);
    const_str_digest_2624404288aed3b04a3ef421570939fa = UNSTREAM_STRING(&constant_bin[ 19603 ], 17, 0);
    PyList_SET_ITEM(const_list_24d8dacd321300c55e438dfef03bb9c5_list, 3, const_str_digest_2624404288aed3b04a3ef421570939fa); Py_INCREF(const_str_digest_2624404288aed3b04a3ef421570939fa);
    const_tuple_str_digest_c46c9f5ab7172869d3bf1fabbb55dd9f_tuple = PyTuple_New(1);
    const_str_digest_c46c9f5ab7172869d3bf1fabbb55dd9f = UNSTREAM_STRING(&constant_bin[ 19620 ], 5, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_c46c9f5ab7172869d3bf1fabbb55dd9f_tuple, 0, const_str_digest_c46c9f5ab7172869d3bf1fabbb55dd9f); Py_INCREF(const_str_digest_c46c9f5ab7172869d3bf1fabbb55dd9f);
    const_str_plain_STOCK_SAVE = UNSTREAM_STRING(&constant_bin[ 19625 ], 10, 1);
    const_str_plain_add_pattern = UNSTREAM_STRING(&constant_bin[ 19635 ], 11, 1);
    const_tuple_774b7c4dc74f4426ce5f4537624fd591_tuple = PyTuple_New(9);
    PyTuple_SET_ITEM(const_tuple_774b7c4dc74f4426ce5f4537624fd591_tuple, 0, const_str_plain_button); Py_INCREF(const_str_plain_button);
    PyTuple_SET_ITEM(const_tuple_774b7c4dc74f4426ce5f4537624fd591_tuple, 1, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    PyTuple_SET_ITEM(const_tuple_774b7c4dc74f4426ce5f4537624fd591_tuple, 2, const_str_plain_args); Py_INCREF(const_str_plain_args);
    const_str_plain_txtVersion = UNSTREAM_STRING(&constant_bin[ 19646 ], 10, 1);
    PyTuple_SET_ITEM(const_tuple_774b7c4dc74f4426ce5f4537624fd591_tuple, 3, const_str_plain_txtVersion); Py_INCREF(const_str_plain_txtVersion);
    const_str_plain_aboutWin = UNSTREAM_STRING(&constant_bin[ 19656 ], 8, 1);
    PyTuple_SET_ITEM(const_tuple_774b7c4dc74f4426ce5f4537624fd591_tuple, 4, const_str_plain_aboutWin); Py_INCREF(const_str_plain_aboutWin);
    PyTuple_SET_ITEM(const_tuple_774b7c4dc74f4426ce5f4537624fd591_tuple, 5, const_str_plain_m); Py_INCREF(const_str_plain_m);
    const_str_plain_ver_parse = UNSTREAM_STRING(&constant_bin[ 19664 ], 9, 1);
    PyTuple_SET_ITEM(const_tuple_774b7c4dc74f4426ce5f4537624fd591_tuple, 6, const_str_plain_ver_parse); Py_INCREF(const_str_plain_ver_parse);
    PyTuple_SET_ITEM(const_tuple_774b7c4dc74f4426ce5f4537624fd591_tuple, 7, const_str_plain_prefix); Py_INCREF(const_str_plain_prefix);
    const_str_plain_regex_ver = UNSTREAM_STRING(&constant_bin[ 19673 ], 9, 1);
    PyTuple_SET_ITEM(const_tuple_774b7c4dc74f4426ce5f4537624fd591_tuple, 8, const_str_plain_regex_ver); Py_INCREF(const_str_plain_regex_ver);
    const_tuple_str_digest_e0918082bb79330390ecdc3474343538_tuple = PyTuple_New(1);
    const_str_digest_e0918082bb79330390ecdc3474343538 = UNSTREAM_STRING(&constant_bin[ 6836 ], 9, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_e0918082bb79330390ecdc3474343538_tuple, 0, const_str_digest_e0918082bb79330390ecdc3474343538); Py_INCREF(const_str_digest_e0918082bb79330390ecdc3474343538);
    const_tuple_2c650076278b8aa15aee8a65a0ee7b21_tuple = PyMarshal_ReadObjectFromString((char *)&constant_bin[ 19682 ], 231);
    const_tuple_str_digest_3232fccef15145259198161d04f43c6a_tuple = PyTuple_New(1);
    const_str_digest_3232fccef15145259198161d04f43c6a = UNSTREAM_STRING(&constant_bin[ 19913 ], 11, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_3232fccef15145259198161d04f43c6a_tuple, 0, const_str_digest_3232fccef15145259198161d04f43c6a); Py_INCREF(const_str_digest_3232fccef15145259198161d04f43c6a);
    const_str_plain_user = UNSTREAM_STRING(&constant_bin[ 6608 ], 4, 1);
    const_str_digest_cfd650449d53c00effa6b191315cce81 = UNSTREAM_STRING(&constant_bin[ 19924 ], 9, 0);
    const_str_plain_sleep_label = UNSTREAM_STRING(&constant_bin[ 19933 ], 11, 1);
    const_str_digest_662cbb10bcfeff30de43c2be5c810b09 = UNSTREAM_STRING(&constant_bin[ 19944 ], 24, 0);
    const_str_plain_set_do_overwrite_confirmation = UNSTREAM_STRING(&constant_bin[ 19968 ], 29, 1);
    const_str_digest_6dd8408132804249209cfd4e77a420d4 = UNSTREAM_STRING(&constant_bin[ 19997 ], 21, 0);
    const_str_plain_Model = UNSTREAM_STRING(&constant_bin[ 20018 ], 5, 1);
    const_str_plain_showPassQ = UNSTREAM_STRING(&constant_bin[ 20023 ], 9, 1);
    const_str_digest_36b49885ef15d0fc3127586409e4f1cb = UNSTREAM_STRING(&constant_bin[ 20032 ], 32, 0);
    const_str_digest_5715360694973afef6f17611e4e2c2a0 = UNSTREAM_STRING(&constant_bin[ 20064 ], 7, 0);
    const_dict_aa4d6254c0a7b10c27efa9d5c6810b3b = PyMarshal_ReadObjectFromString((char *)&constant_bin[ 20071 ], 1368);
    const_str_plain_rt_queryAuth = UNSTREAM_STRING(&constant_bin[ 21439 ], 12, 1);
    const_str_plain_RESPONSE_APPLY = UNSTREAM_STRING(&constant_bin[ 21451 ], 14, 1);
    const_tuple_str_plain_mount_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_plain_mount_tuple, 0, const_str_plain_mount); Py_INCREF(const_str_plain_mount);
    const_str_plain_TextView = UNSTREAM_STRING(&constant_bin[ 19375 ], 8, 1);
    const_str_plain_pb_label = UNSTREAM_STRING(&constant_bin[ 21465 ], 8, 1);
    const_str_digest_2005eab6d6f19375dfb4b5850d6066f2 = UNSTREAM_STRING(&constant_bin[ 21473 ], 10, 0);
    const_str_digest_dcaee1180da43b85258ccdaded50e8d8 = UNSTREAM_STRING(&constant_bin[ 21483 ], 26, 0);
    const_str_digest_1b45e1898e1dfabec322865372bbd4e7 = UNSTREAM_STRING(&constant_bin[ 21509 ], 121, 0);
    const_str_plain_txt2 = UNSTREAM_STRING(&constant_bin[ 11650 ], 4, 1);
    const_str_plain_txt1 = UNSTREAM_STRING(&constant_bin[ 11641 ], 4, 1);
    const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple = PyTuple_New(19);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 0, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    const_str_plain_txt_regex = UNSTREAM_STRING(&constant_bin[ 11485 ], 9, 1);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 1, const_str_plain_txt_regex); Py_INCREF(const_str_plain_txt_regex);
    const_str_plain_type_a = UNSTREAM_STRING(&constant_bin[ 11575 ], 6, 1);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 2, const_str_plain_type_a); Py_INCREF(const_str_plain_type_a);
    const_str_plain_mod_regex = UNSTREAM_STRING(&constant_bin[ 21630 ], 9, 1);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 3, const_str_plain_mod_regex); Py_INCREF(const_str_plain_mod_regex);
    const_str_plain_list_u = UNSTREAM_STRING(&constant_bin[ 11474 ], 6, 1);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 4, const_str_plain_list_u); Py_INCREF(const_str_plain_list_u);
    const_str_plain_rgx = UNSTREAM_STRING(&constant_bin[ 11532 ], 3, 1);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 5, const_str_plain_rgx); Py_INCREF(const_str_plain_rgx);
    const_str_plain_usb_new = UNSTREAM_STRING(&constant_bin[ 21639 ], 7, 1);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 6, const_str_plain_usb_new); Py_INCREF(const_str_plain_usb_new);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 7, const_str_plain_m); Py_INCREF(const_str_plain_m);
    const_str_plain_dev_regex3 = UNSTREAM_STRING(&constant_bin[ 21646 ], 10, 1);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 8, const_str_plain_dev_regex3); Py_INCREF(const_str_plain_dev_regex3);
    const_str_plain_r2 = UNSTREAM_STRING(&constant_bin[ 11600 ], 2, 1);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 9, const_str_plain_r2); Py_INCREF(const_str_plain_r2);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 10, const_str_plain_s); Py_INCREF(const_str_plain_s);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 11, const_str_plain_cleanup); Py_INCREF(const_str_plain_cleanup);
    const_str_plain_u = UNSTREAM_CHAR(117, 1);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 12, const_str_plain_u); Py_INCREF(const_str_plain_u);
    const_str_plain_m2 = UNSTREAM_STRING(&constant_bin[ 8085 ], 2, 1);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 13, const_str_plain_m2); Py_INCREF(const_str_plain_m2);
    const_str_plain_m1 = UNSTREAM_STRING(&constant_bin[ 6046 ], 2, 1);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 14, const_str_plain_m1); Py_INCREF(const_str_plain_m1);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 15, const_str_plain_txt); Py_INCREF(const_str_plain_txt);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 16, const_str_plain_txt1); Py_INCREF(const_str_plain_txt1);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 17, const_str_plain_txt2); Py_INCREF(const_str_plain_txt2);
    const_str_plain_txt3 = UNSTREAM_STRING(&constant_bin[ 11659 ], 4, 1);
    PyTuple_SET_ITEM(const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 18, const_str_plain_txt3); Py_INCREF(const_str_plain_txt3);
    const_tuple_str_digest_b183ba1710e6bac4409cfe905cebb58d_tuple = PyTuple_New(1);
    const_str_digest_b183ba1710e6bac4409cfe905cebb58d = UNSTREAM_STRING(&constant_bin[ 21656 ], 5, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_b183ba1710e6bac4409cfe905cebb58d_tuple, 0, const_str_digest_b183ba1710e6bac4409cfe905cebb58d); Py_INCREF(const_str_digest_b183ba1710e6bac4409cfe905cebb58d);
    const_list_71892e6d79835f869b13c1149c962f23_list = PyList_New(4);
    PyList_SET_ITEM(const_list_71892e6d79835f869b13c1149c962f23_list, 0, const_str_plain_Drive); Py_INCREF(const_str_plain_Drive);
    PyList_SET_ITEM(const_list_71892e6d79835f869b13c1149c962f23_list, 1, const_str_digest_01cbd85c256bf4785aaf49c6adb60e44); Py_INCREF(const_str_digest_01cbd85c256bf4785aaf49c6adb60e44);
    PyList_SET_ITEM(const_list_71892e6d79835f869b13c1149c962f23_list, 2, const_str_digest_3d059a914d1f4299087c016a61ec41b4); Py_INCREF(const_str_digest_3d059a914d1f4299087c016a61ec41b4);
    PyList_SET_ITEM(const_list_71892e6d79835f869b13c1149c962f23_list, 3, const_str_digest_b27d7e3ab2e2709ddb216f1629e0528a); Py_INCREF(const_str_digest_b27d7e3ab2e2709ddb216f1629e0528a);
    const_str_plain_viewErr_button = UNSTREAM_STRING(&constant_bin[ 21661 ], 14, 1);
    const_str_plain_set_version = UNSTREAM_STRING(&constant_bin[ 21675 ], 11, 1);
    const_str_digest_286262cc09e0a78795a3971d53b1bed6 = UNSTREAM_STRING(&constant_bin[ 21686 ], 45, 0);
    const_str_digest_500f14b62f4ffa958f482307aaaeaaa0 = UNSTREAM_STRING(&constant_bin[ 21731 ], 20, 0);
    const_str_plain_Users = UNSTREAM_STRING(&constant_bin[ 21751 ], 5, 1);
    const_tuple_type_str_type_str_type_str_type_str_tuple = PyTuple_New(4);
    PyTuple_SET_ITEM(const_tuple_type_str_type_str_type_str_type_str_tuple, 0, (PyObject *)&PyString_Type); Py_INCREF((PyObject *)&PyString_Type);
    PyTuple_SET_ITEM(const_tuple_type_str_type_str_type_str_type_str_tuple, 1, (PyObject *)&PyString_Type); Py_INCREF((PyObject *)&PyString_Type);
    PyTuple_SET_ITEM(const_tuple_type_str_type_str_type_str_type_str_tuple, 2, (PyObject *)&PyString_Type); Py_INCREF((PyObject *)&PyString_Type);
    PyTuple_SET_ITEM(const_tuple_type_str_type_str_type_str_type_str_tuple, 3, (PyObject *)&PyString_Type); Py_INCREF((PyObject *)&PyString_Type);
    const_tuple_str_digest_28f94c8a916c34a21195b86c62fa2251_tuple = PyTuple_New(1);
    const_str_digest_28f94c8a916c34a21195b86c62fa2251 = UNSTREAM_STRING(&constant_bin[ 21756 ], 61, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_28f94c8a916c34a21195b86c62fa2251_tuple, 0, const_str_digest_28f94c8a916c34a21195b86c62fa2251); Py_INCREF(const_str_digest_28f94c8a916c34a21195b86c62fa2251);
    const_str_digest_ebd23d2bb4a34298b0d66a00001e1ca7 = UNSTREAM_STRING(&constant_bin[ 21817 ], 17, 0);
    const_tuple_8933694fb1f2363a775222ad71d1df0e_tuple = PyTuple_New(4);
    PyTuple_SET_ITEM(const_tuple_8933694fb1f2363a775222ad71d1df0e_tuple, 0, const_str_plain_button); Py_INCREF(const_str_plain_button);
    PyTuple_SET_ITEM(const_tuple_8933694fb1f2363a775222ad71d1df0e_tuple, 1, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    PyTuple_SET_ITEM(const_tuple_8933694fb1f2363a775222ad71d1df0e_tuple, 2, const_str_plain_args); Py_INCREF(const_str_plain_args);
    const_str_plain_tcgWin = UNSTREAM_STRING(&constant_bin[ 21834 ], 6, 1);
    PyTuple_SET_ITEM(const_tuple_8933694fb1f2363a775222ad71d1df0e_tuple, 3, const_str_plain_tcgWin); Py_INCREF(const_str_plain_tcgWin);
    const_str_plain_powerset = UNSTREAM_STRING(&constant_bin[ 1503 ], 8, 1);
    const_str_plain_match = UNSTREAM_STRING(&constant_bin[ 21840 ], 5, 1);
    const_tuple_str_digest_9fb6c95c52c6329788e4855cdcbf1225_tuple = PyTuple_New(1);
    const_str_digest_9fb6c95c52c6329788e4855cdcbf1225 = UNSTREAM_STRING(&constant_bin[ 21845 ], 19, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_9fb6c95c52c6329788e4855cdcbf1225_tuple, 0, const_str_digest_9fb6c95c52c6329788e4855cdcbf1225); Py_INCREF(const_str_digest_9fb6c95c52c6329788e4855cdcbf1225);
    const_str_digest_a48fb3cccdf20edefeb9532e6dd80a5f = UNSTREAM_STRING(&constant_bin[ 21864 ], 16, 0);
    const_tuple_str_digest_53e0b3338d9460ce17900f4e6d482773_tuple = PyTuple_New(1);
    const_str_digest_53e0b3338d9460ce17900f4e6d482773 = UNSTREAM_STRING(&constant_bin[ 21880 ], 229, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_53e0b3338d9460ce17900f4e6d482773_tuple, 0, const_str_digest_53e0b3338d9460ce17900f4e6d482773); Py_INCREF(const_str_digest_53e0b3338d9460ce17900f4e6d482773);
    const_str_plain_passBoxQ = UNSTREAM_STRING(&constant_bin[ 22109 ], 8, 1);
    const_tuple_str_digest_9af85d5d90688acaaf51a2f76a9f32c8_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_9af85d5d90688acaaf51a2f76a9f32c8_tuple, 0, const_str_digest_9af85d5d90688acaaf51a2f76a9f32c8); Py_INCREF(const_str_digest_9af85d5d90688acaaf51a2f76a9f32c8);
    const_tuple_str_digest_3083929b5fa45e6504468bcca4e3142a_tuple = PyTuple_New(1);
    const_str_digest_3083929b5fa45e6504468bcca4e3142a = UNSTREAM_STRING(&constant_bin[ 22117 ], 9, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_3083929b5fa45e6504468bcca4e3142a_tuple, 0, const_str_digest_3083929b5fa45e6504468bcca4e3142a); Py_INCREF(const_str_digest_3083929b5fa45e6504468bcca4e3142a);
    const_str_digest_8ed007d8f5811bd916325aedd8c52048 = UNSTREAM_STRING(&constant_bin[ 22126 ], 21, 0);
    const_str_digest_e974b93f125c788389bc994528457aa9 = UNSTREAM_STRING(&constant_bin[ 22147 ], 30, 0);
    const_int_pos_500 = PyInt_FromLong(500l);
    const_str_digest_ed068c6c7c551f50a83720a12f12dc27 = UNSTREAM_STRING(&constant_bin[ 22177 ], 9, 0);
    const_str_digest_55f129d84beb41e93fee633aa27581ed = UNSTREAM_STRING(&constant_bin[ 22186 ], 26, 0);
    const_list_82ec7edd2cad4ac6a8bbc4eb110269c1_list = PyList_New(13);
    const_str_digest_b5880effda8d76eaf64dd7f67be144aa = UNSTREAM_STRING(&constant_bin[ 22212 ], 13, 0);
    PyList_SET_ITEM(const_list_82ec7edd2cad4ac6a8bbc4eb110269c1_list, 0, const_str_digest_b5880effda8d76eaf64dd7f67be144aa); Py_INCREF(const_str_digest_b5880effda8d76eaf64dd7f67be144aa);
    PyList_SET_ITEM(const_list_82ec7edd2cad4ac6a8bbc4eb110269c1_list, 1, const_str_digest_6dd8408132804249209cfd4e77a420d4); Py_INCREF(const_str_digest_6dd8408132804249209cfd4e77a420d4);
    const_str_digest_e8f6108d13e8e15ce1db6d656c57bb31 = UNSTREAM_STRING(&constant_bin[ 22225 ], 34, 0);
    PyList_SET_ITEM(const_list_82ec7edd2cad4ac6a8bbc4eb110269c1_list, 2, const_str_digest_e8f6108d13e8e15ce1db6d656c57bb31); Py_INCREF(const_str_digest_e8f6108d13e8e15ce1db6d656c57bb31);
    const_str_digest_16654ef7a760a8e11b035a8d2dbcf016 = UNSTREAM_STRING(&constant_bin[ 22259 ], 14, 0);
    PyList_SET_ITEM(const_list_82ec7edd2cad4ac6a8bbc4eb110269c1_list, 3, const_str_digest_16654ef7a760a8e11b035a8d2dbcf016); Py_INCREF(const_str_digest_16654ef7a760a8e11b035a8d2dbcf016);
    const_str_digest_2e22ba06d8f8fd99e5018ea66e43c3ec = UNSTREAM_STRING(&constant_bin[ 22273 ], 17, 0);
    PyList_SET_ITEM(const_list_82ec7edd2cad4ac6a8bbc4eb110269c1_list, 4, const_str_digest_2e22ba06d8f8fd99e5018ea66e43c3ec); Py_INCREF(const_str_digest_2e22ba06d8f8fd99e5018ea66e43c3ec);
    PyList_SET_ITEM(const_list_82ec7edd2cad4ac6a8bbc4eb110269c1_list, 5, const_str_digest_18ee416e86eceffd297bc23cb5d0d8bc); Py_INCREF(const_str_digest_18ee416e86eceffd297bc23cb5d0d8bc);
    PyList_SET_ITEM(const_list_82ec7edd2cad4ac6a8bbc4eb110269c1_list, 6, const_str_digest_911293f86e9eae51518cc6890f660a69); Py_INCREF(const_str_digest_911293f86e9eae51518cc6890f660a69);
    const_str_digest_3bd0e5d460f2911a3f3f0220a1f8544b = UNSTREAM_STRING(&constant_bin[ 21707 ], 24, 0);
    PyList_SET_ITEM(const_list_82ec7edd2cad4ac6a8bbc4eb110269c1_list, 7, const_str_digest_3bd0e5d460f2911a3f3f0220a1f8544b); Py_INCREF(const_str_digest_3bd0e5d460f2911a3f3f0220a1f8544b);
    const_str_digest_5445d83d3fb08c0e9a9acdfb8426b34f = UNSTREAM_STRING(&constant_bin[ 22290 ], 14, 0);
    PyList_SET_ITEM(const_list_82ec7edd2cad4ac6a8bbc4eb110269c1_list, 8, const_str_digest_5445d83d3fb08c0e9a9acdfb8426b34f); Py_INCREF(const_str_digest_5445d83d3fb08c0e9a9acdfb8426b34f);
    const_str_digest_df1c461397b5269a870d93a6b523d4e0 = UNSTREAM_STRING(&constant_bin[ 22304 ], 14, 0);
    PyList_SET_ITEM(const_list_82ec7edd2cad4ac6a8bbc4eb110269c1_list, 9, const_str_digest_df1c461397b5269a870d93a6b523d4e0); Py_INCREF(const_str_digest_df1c461397b5269a870d93a6b523d4e0);
    const_str_digest_32ef30d278c959537680341338562ecc = UNSTREAM_STRING(&constant_bin[ 22318 ], 13, 0);
    PyList_SET_ITEM(const_list_82ec7edd2cad4ac6a8bbc4eb110269c1_list, 10, const_str_digest_32ef30d278c959537680341338562ecc); Py_INCREF(const_str_digest_32ef30d278c959537680341338562ecc);
    PyList_SET_ITEM(const_list_82ec7edd2cad4ac6a8bbc4eb110269c1_list, 11, const_str_digest_52927d9cfc06b80d0dd3015ca542ce4b); Py_INCREF(const_str_digest_52927d9cfc06b80d0dd3015ca542ce4b);
    const_str_digest_843410e89b0d3743520d4222efa58a8d = UNSTREAM_STRING(&constant_bin[ 22331 ], 25, 0);
    PyList_SET_ITEM(const_list_82ec7edd2cad4ac6a8bbc4eb110269c1_list, 12, const_str_digest_843410e89b0d3743520d4222efa58a8d); Py_INCREF(const_str_digest_843410e89b0d3743520d4222efa58a8d);
    const_str_digest_431b1724ba76745b0f5a6a2402052b0c = UNSTREAM_STRING(&constant_bin[ 22225 ], 27, 0);
    const_tuple_str_digest_2f81980dfe65cd75aba129ef6cdeca0f_tuple = PyTuple_New(1);
    const_str_digest_2f81980dfe65cd75aba129ef6cdeca0f = UNSTREAM_STRING(&constant_bin[ 22356 ], 11, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_2f81980dfe65cd75aba129ef6cdeca0f_tuple, 0, const_str_digest_2f81980dfe65cd75aba129ef6cdeca0f); Py_INCREF(const_str_digest_2f81980dfe65cd75aba129ef6cdeca0f);
    const_str_plain_queryWinText = UNSTREAM_STRING(&constant_bin[ 22367 ], 12, 1);
    const_str_plain_add_with_viewport = UNSTREAM_STRING(&constant_bin[ 22379 ], 17, 1);
    const_str_plain_STOCK_CLOSE = UNSTREAM_STRING(&constant_bin[ 22396 ], 11, 1);
    const_str_plain_OpalDialog = UNSTREAM_STRING(&constant_bin[ 1464 ], 10, 1);
    const_str_digest_301503d632e956819fe431035d3bf52a = UNSTREAM_STRING(&constant_bin[ 22407 ], 6, 0);
    const_str_digest_10be36161b689e46fcd9ecb36151f3bf = UNSTREAM_STRING(&constant_bin[ 22413 ], 22, 0);
    const_tuple_str_digest_7d37d74a7159da5b1ebaf27e1cfa555e_tuple = PyTuple_New(1);
    const_str_digest_7d37d74a7159da5b1ebaf27e1cfa555e = UNSTREAM_STRING(&constant_bin[ 22435 ], 50, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_7d37d74a7159da5b1ebaf27e1cfa555e_tuple, 0, const_str_digest_7d37d74a7159da5b1ebaf27e1cfa555e); Py_INCREF(const_str_digest_7d37d74a7159da5b1ebaf27e1cfa555e);
    const_str_plain_saveToText = UNSTREAM_STRING(&constant_bin[ 22485 ], 10, 1);
    const_str_digest_e7e6c5a1c1999b699ec49e94b0ae1a17 = UNSTREAM_STRING(&constant_bin[ 22495 ], 35, 0);
    const_str_digest_25b83aec39158cba36b77089e32c15a8 = UNSTREAM_STRING(&constant_bin[ 22530 ], 9, 0);
    const_str_digest_4687747a4da7b5229720124340e187bf = UNSTREAM_STRING(&constant_bin[ 22539 ], 10, 0);
    const_tuple_str_digest_8cda9c36930fe1d24d1f13365d80ce3b_tuple = PyTuple_New(1);
    const_str_digest_8cda9c36930fe1d24d1f13365d80ce3b = UNSTREAM_STRING(&constant_bin[ 22549 ], 10, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_8cda9c36930fe1d24d1f13365d80ce3b_tuple, 0, const_str_digest_8cda9c36930fe1d24d1f13365d80ce3b); Py_INCREF(const_str_digest_8cda9c36930fe1d24d1f13365d80ce3b);
    const_tuple_str_digest_1d5f53675f242c5f0d4f06c176e121a1_tuple = PyTuple_New(1);
    const_str_digest_1d5f53675f242c5f0d4f06c176e121a1 = UNSTREAM_STRING(&constant_bin[ 22559 ], 9, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_1d5f53675f242c5f0d4f06c176e121a1_tuple, 0, const_str_digest_1d5f53675f242c5f0d4f06c176e121a1); Py_INCREF(const_str_digest_1d5f53675f242c5f0d4f06c176e121a1);
    const_str_digest_0752589c12ccb235f08434890c781f69 = UNSTREAM_STRING(&constant_bin[ 7277 ], 10, 0);
    const_tuple_str_digest_e64489b595c1d15899d5ce5863638a89_tuple = PyTuple_New(1);
    const_str_digest_e64489b595c1d15899d5ce5863638a89 = UNSTREAM_STRING(&constant_bin[ 22568 ], 30, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_e64489b595c1d15899d5ce5863638a89_tuple, 0, const_str_digest_e64489b595c1d15899d5ce5863638a89); Py_INCREF(const_str_digest_e64489b595c1d15899d5ce5863638a89);
    const_str_digest_f8d3ecaf41cb3d8a0f6e94493e4e05fc = UNSTREAM_STRING(&constant_bin[ 22598 ], 26, 0);
    const_str_digest_b8faea6f4cc3bf2fcc226045f4bd32d1 = UNSTREAM_STRING(&constant_bin[ 22624 ], 33, 0);
    const_str_digest_efb720df302d651bbfa97f25f0fc0525 = UNSTREAM_STRING(&constant_bin[ 22657 ], 7, 0);
    const_str_plain_listStore = UNSTREAM_STRING(&constant_bin[ 22664 ], 9, 1);
    const_str_plain_strftime = UNSTREAM_STRING(&constant_bin[ 22673 ], 8, 1);
    const_str_digest_8974007cd1bd5af74f0b391a825ef662 = UNSTREAM_STRING(&constant_bin[ 22681 ], 10, 0);
    const_tuple_str_digest_fad16014b804349bb65b09a2311b1ac7_int_pos_1_tuple = PyTuple_New(2);
    const_str_digest_fad16014b804349bb65b09a2311b1ac7 = UNSTREAM_STRING(&constant_bin[ 19174 ], 3, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_fad16014b804349bb65b09a2311b1ac7_int_pos_1_tuple, 0, const_str_digest_fad16014b804349bb65b09a2311b1ac7); Py_INCREF(const_str_digest_fad16014b804349bb65b09a2311b1ac7);
    PyTuple_SET_ITEM(const_tuple_str_digest_fad16014b804349bb65b09a2311b1ac7_int_pos_1_tuple, 1, const_int_pos_1); Py_INCREF(const_int_pos_1);
    const_str_digest_66dc380ed6bde77ae6e7bb85e234ea0d = UNSTREAM_STRING(&constant_bin[ 21530 ], 12, 0);
    const_tuple_str_digest_2005eab6d6f19375dfb4b5850d6066f2_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_2005eab6d6f19375dfb4b5850d6066f2_tuple, 0, const_str_digest_2005eab6d6f19375dfb4b5850d6066f2); Py_INCREF(const_str_digest_2005eab6d6f19375dfb4b5850d6066f2);
    const_str_plain_sb_label = UNSTREAM_STRING(&constant_bin[ 22691 ], 8, 1);
    const_tuple_str_digest_698bed0bd915c630f96b59400935dc79_tuple = PyTuple_New(1);
    const_str_digest_698bed0bd915c630f96b59400935dc79 = UNSTREAM_STRING(&constant_bin[ 22699 ], 32, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_698bed0bd915c630f96b59400935dc79_tuple, 0, const_str_digest_698bed0bd915c630f96b59400935dc79); Py_INCREF(const_str_digest_698bed0bd915c630f96b59400935dc79);
    const_str_plain_usb_final = UNSTREAM_STRING(&constant_bin[ 22731 ], 9, 1);
    const_str_plain_is_checked = UNSTREAM_STRING(&constant_bin[ 22740 ], 10, 1);
    const_str_digest_e72492ba4d6547da2ae167e08a32821c = UNSTREAM_STRING(&constant_bin[ 22750 ], 13, 0);
    const_str_plain_queryAuth = UNSTREAM_STRING(&constant_bin[ 21442 ], 9, 1);
    const_tuple_str_digest_efb720df302d651bbfa97f25f0fc0525_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_efb720df302d651bbfa97f25f0fc0525_tuple, 0, const_str_digest_efb720df302d651bbfa97f25f0fc0525); Py_INCREF(const_str_digest_efb720df302d651bbfa97f25f0fc0525);
    const_str_plain_usb_instr = UNSTREAM_STRING(&constant_bin[ 22763 ], 9, 1);
    const_str_digest_6fea0baf31175ee82bc02d0851e51237 = UNSTREAM_STRING(&constant_bin[ 22772 ], 38, 0);
    const_str_plain_auditEntries = UNSTREAM_STRING(&constant_bin[ 22810 ], 12, 1);
    const_tuple_str_digest_5715360694973afef6f17611e4e2c2a0_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_5715360694973afef6f17611e4e2c2a0_tuple, 0, const_str_digest_5715360694973afef6f17611e4e2c2a0); Py_INCREF(const_str_digest_5715360694973afef6f17611e4e2c2a0);
    const_str_digest_268db6629a0b2da516d45c0905e9f223 = UNSTREAM_STRING(&constant_bin[ 22822 ], 54, 0);
    const_str_digest_a51def470837013d7f981c2dccf54a1a = UNSTREAM_STRING(&constant_bin[ 22876 ], 7, 0);
    const_str_digest_7bc75c1e8b65ceef92296230a69ea957 = UNSTREAM_STRING(&constant_bin[ 22883 ], 17, 0);
    const_tuple_str_digest_d6fa2950567d74d72b795980149cec37_tuple = PyTuple_New(1);
    const_str_digest_d6fa2950567d74d72b795980149cec37 = UNSTREAM_STRING(&constant_bin[ 7278 ], 9, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_d6fa2950567d74d72b795980149cec37_tuple, 0, const_str_digest_d6fa2950567d74d72b795980149cec37); Py_INCREF(const_str_digest_d6fa2950567d74d72b795980149cec37);
    const_str_digest_9ef21afda882614b7db2bd2f0eca2fdd = UNSTREAM_STRING(&constant_bin[ 22900 ], 10, 0);
    const_str_digest_a51a7663b6ae9546650bf769152dfea9 = UNSTREAM_STRING(&constant_bin[ 22910 ], 107, 0);
    const_str_plain_queryPass = UNSTREAM_STRING(&constant_bin[ 23017 ], 9, 1);
    const_tuple_str_digest_07dc242546883a69906026f99873ffbe_tuple = PyTuple_New(1);
    const_str_digest_07dc242546883a69906026f99873ffbe = UNSTREAM_STRING(&constant_bin[ 23026 ], 19, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_07dc242546883a69906026f99873ffbe_tuple, 0, const_str_digest_07dc242546883a69906026f99873ffbe); Py_INCREF(const_str_digest_07dc242546883a69906026f99873ffbe);
    const_tuple_str_digest_ed068c6c7c551f50a83720a12f12dc27_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_ed068c6c7c551f50a83720a12f12dc27_tuple, 0, const_str_digest_ed068c6c7c551f50a83720a12f12dc27); Py_INCREF(const_str_digest_ed068c6c7c551f50a83720a12f12dc27);
    const_list_44e2226d2505434c978169802a2bf034_list = PyList_New(4);
    PyList_SET_ITEM(const_list_44e2226d2505434c978169802a2bf034_list, 0, const_str_plain_Level); Py_INCREF(const_str_plain_Level);
    PyList_SET_ITEM(const_list_44e2226d2505434c978169802a2bf034_list, 1, const_str_digest_cfd650449d53c00effa6b191315cce81); Py_INCREF(const_str_digest_cfd650449d53c00effa6b191315cce81);
    PyList_SET_ITEM(const_list_44e2226d2505434c978169802a2bf034_list, 2, const_str_digest_df9c47c787f477b67a89a289a155f3c3); Py_INCREF(const_str_digest_df9c47c787f477b67a89a289a155f3c3);
    PyList_SET_ITEM(const_list_44e2226d2505434c978169802a2bf034_list, 3, const_str_digest_2624404288aed3b04a3ef421570939fa); Py_INCREF(const_str_digest_2624404288aed3b04a3ef421570939fa);
    const_tuple_int_pos_500_int_pos_500_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_int_pos_500_int_pos_500_tuple, 0, const_int_pos_500); Py_INCREF(const_int_pos_500);
    PyTuple_SET_ITEM(const_tuple_int_pos_500_int_pos_500_tuple, 1, const_int_pos_500); Py_INCREF(const_int_pos_500);
    const_tuple_str_newline_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_newline_tuple, 0, const_str_newline); Py_INCREF(const_str_newline);
    const_tuple_str_digest_034ef5cc8ce1d72812e691dc1283ea5a_tuple = PyTuple_New(1);
    const_str_digest_034ef5cc8ce1d72812e691dc1283ea5a = UNSTREAM_STRING(&constant_bin[ 23045 ], 20, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_034ef5cc8ce1d72812e691dc1283ea5a_tuple, 0, const_str_digest_034ef5cc8ce1d72812e691dc1283ea5a); Py_INCREF(const_str_digest_034ef5cc8ce1d72812e691dc1283ea5a);
    const_tuple_str_digest_52d57da239d408b2f5b4528b30de22f2_tuple = PyTuple_New(1);
    const_str_digest_52d57da239d408b2f5b4528b30de22f2 = UNSTREAM_STRING(&constant_bin[ 23065 ], 10, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_52d57da239d408b2f5b4528b30de22f2_tuple, 0, const_str_digest_52d57da239d408b2f5b4528b30de22f2); Py_INCREF(const_str_digest_52d57da239d408b2f5b4528b30de22f2);
    const_str_plain_box = UNSTREAM_STRING(&constant_bin[ 5562 ], 3, 1);
    const_tuple_str_digest_ca01d9d8c75f9046de79826ecd4724fc_tuple = PyTuple_New(1);
    const_str_digest_ca01d9d8c75f9046de79826ecd4724fc = UNSTREAM_STRING(&constant_bin[ 23075 ], 252, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_ca01d9d8c75f9046de79826ecd4724fc_tuple, 0, const_str_digest_ca01d9d8c75f9046de79826ecd4724fc); Py_INCREF(const_str_digest_ca01d9d8c75f9046de79826ecd4724fc);
    const_str_plain_Rescan = UNSTREAM_STRING(&constant_bin[ 6274 ], 6, 1);
    const_str_plain_viewAll_button = UNSTREAM_STRING(&constant_bin[ 23327 ], 14, 1);
    const_str_digest_da4537c2731e3ef82022c7083e54e3d5 = UNSTREAM_STRING(&constant_bin[ 23341 ], 7, 0);
    const_str_digest_59d1f4a47a49dcdffdedaaf47e61a6ce = UNSTREAM_STRING(&constant_bin[ 23348 ], 15, 0);
    const_str_digest_10536f1422f60e0736bdf6db76e4a534 = UNSTREAM_STRING(&constant_bin[ 23363 ], 12, 0);
    const_tuple_str_digest_e1b0ee6128ec7d73a301039aeecc93b8_tuple = PyTuple_New(1);
    const_str_digest_e1b0ee6128ec7d73a301039aeecc93b8 = UNSTREAM_STRING(&constant_bin[ 23375 ], 18, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_e1b0ee6128ec7d73a301039aeecc93b8_tuple, 0, const_str_digest_e1b0ee6128ec7d73a301039aeecc93b8); Py_INCREF(const_str_digest_e1b0ee6128ec7d73a301039aeecc93b8);
    const_str_plain_action = UNSTREAM_STRING(&constant_bin[ 5874 ], 6, 1);
    const_tuple_str_plain_Submit_tuple = PyTuple_New(1);
    const_str_plain_Submit = UNSTREAM_STRING(&constant_bin[ 23393 ], 6, 1);
    PyTuple_SET_ITEM(const_tuple_str_plain_Submit_tuple, 0, const_str_plain_Submit); Py_INCREF(const_str_plain_Submit);
    const_str_plain_hbox5 = UNSTREAM_STRING(&constant_bin[ 23399 ], 5, 1);
    const_str_plain_hbox3 = UNSTREAM_STRING(&constant_bin[ 23404 ], 5, 1);
    const_list_025210018ed00a12cbd44c6743181f29_list = PyList_New(6);
    PyList_SET_ITEM(const_list_025210018ed00a12cbd44c6743181f29_list, 0, const_str_digest_a51a7663b6ae9546650bf769152dfea9); Py_INCREF(const_str_digest_a51a7663b6ae9546650bf769152dfea9);
    PyList_SET_ITEM(const_list_025210018ed00a12cbd44c6743181f29_list, 1, const_str_digest_662cbb10bcfeff30de43c2be5c810b09); Py_INCREF(const_str_digest_662cbb10bcfeff30de43c2be5c810b09);
    PyList_SET_ITEM(const_list_025210018ed00a12cbd44c6743181f29_list, 2, const_str_digest_286262cc09e0a78795a3971d53b1bed6); Py_INCREF(const_str_digest_286262cc09e0a78795a3971d53b1bed6);
    const_str_digest_3b6741aad68ded39965afbc3781dbe69 = UNSTREAM_STRING(&constant_bin[ 23409 ], 50, 0);
    PyList_SET_ITEM(const_list_025210018ed00a12cbd44c6743181f29_list, 3, const_str_digest_3b6741aad68ded39965afbc3781dbe69); Py_INCREF(const_str_digest_3b6741aad68ded39965afbc3781dbe69);
    const_str_digest_c659b96816aa56bce3d66343743b03c7 = UNSTREAM_STRING(&constant_bin[ 23459 ], 15, 0);
    PyList_SET_ITEM(const_list_025210018ed00a12cbd44c6743181f29_list, 4, const_str_digest_c659b96816aa56bce3d66343743b03c7); Py_INCREF(const_str_digest_c659b96816aa56bce3d66343743b03c7);
    const_str_digest_6bd412f3684066359170fadea0d98ee1 = UNSTREAM_STRING(&constant_bin[ 23474 ], 51, 0);
    PyList_SET_ITEM(const_list_025210018ed00a12cbd44c6743181f29_list, 5, const_str_digest_6bd412f3684066359170fadea0d98ee1); Py_INCREF(const_str_digest_6bd412f3684066359170fadea0d98ee1);
    const_str_digest_246de0b2ff3271acdef9f30298fa1a45 = UNSTREAM_STRING(&constant_bin[ 23525 ], 11, 0);
    const_str_plain_now = UNSTREAM_STRING(&constant_bin[ 10363 ], 3, 1);
    const_str_plain_set_sort_indicator = UNSTREAM_STRING(&constant_bin[ 23536 ], 18, 1);
    const_str_plain_errorEntries = UNSTREAM_STRING(&constant_bin[ 23554 ], 12, 1);
    const_str_plain_AuditDialog = UNSTREAM_STRING(&constant_bin[ 23566 ], 11, 1);
    const_str_plain_refreshUSB = UNSTREAM_STRING(&constant_bin[ 23577 ], 10, 1);
    const_str_plain_usb_label = UNSTREAM_STRING(&constant_bin[ 23587 ], 9, 1);
    const_str_plain_Error = UNSTREAM_STRING(&constant_bin[ 1582 ], 5, 1);
    const_str_plain_Policy = UNSTREAM_STRING(&constant_bin[ 22318 ], 6, 1);
    const_str_plain_MB = UNSTREAM_STRING(&constant_bin[ 6026 ], 2, 1);
    const_str_plain_viewWarnErr_button = UNSTREAM_STRING(&constant_bin[ 23596 ], 18, 1);
    const_str_plain_RESPONSE_CANCEL = UNSTREAM_STRING(&constant_bin[ 23614 ], 15, 1);
    const_str_plain_Objects = UNSTREAM_STRING(&constant_bin[ 19267 ], 7, 1);
    const_tuple_str_digest_4263c7efeab2c98f9cdfa519ae1cebba_tuple = PyTuple_New(1);
    const_str_digest_4263c7efeab2c98f9cdfa519ae1cebba = UNSTREAM_STRING(&constant_bin[ 23629 ], 10, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_4263c7efeab2c98f9cdfa519ae1cebba_tuple, 0, const_str_digest_4263c7efeab2c98f9cdfa519ae1cebba); Py_INCREF(const_str_digest_4263c7efeab2c98f9cdfa519ae1cebba);
    const_str_plain_submitPass = UNSTREAM_STRING(&constant_bin[ 23639 ], 10, 1);
    const_tuple_579ae0c2c7409ed9865e38c23c43418d_tuple = PyMarshal_ReadObjectFromString((char *)&constant_bin[ 23649 ], 582);
    const_str_digest_2d5a8e8391575c4e14e6dc6db8c07f2f = UNSTREAM_STRING(&constant_bin[ 24231 ], 17, 0);
    const_str_digest_8cd03e5f4b0b4910e2f581e48ffc988b = UNSTREAM_STRING(&constant_bin[ 24248 ], 10, 0);
    const_tuple_str_digest_ebe547e87ec1874e7daf52989a3eff90_tuple = PyTuple_New(1);
    const_str_digest_ebe547e87ec1874e7daf52989a3eff90 = UNSTREAM_STRING(&constant_bin[ 24258 ], 10, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_ebe547e87ec1874e7daf52989a3eff90_tuple, 0, const_str_digest_ebe547e87ec1874e7daf52989a3eff90); Py_INCREF(const_str_digest_ebe547e87ec1874e7daf52989a3eff90);
    const_str_digest_ec7f14d6f87a9402f91132429af0c8c5 = UNSTREAM_STRING(&constant_bin[ 24268 ], 17, 0);
    const_str_plain_Never = UNSTREAM_STRING(&constant_bin[ 24285 ], 5, 1);
    const_str_digest_03b98ad4acc077de88fea75272d50cbe = UNSTREAM_STRING(&constant_bin[ 12383 ], 4, 0);
    const_str_plain_Admins = UNSTREAM_STRING(&constant_bin[ 19074 ], 6, 1);
    const_str_plain_LockingEnabled = UNSTREAM_STRING(&constant_bin[ 19997 ], 14, 1);
    const_str_plain_set_program_name = UNSTREAM_STRING(&constant_bin[ 24290 ], 16, 1);
    const_tuple_9cdf41a53768e978cb7162b6c925b966_tuple = PyTuple_New(6);
    PyTuple_SET_ITEM(const_tuple_9cdf41a53768e978cb7162b6c925b966_tuple, 0, const_str_plain_button); Py_INCREF(const_str_plain_button);
    PyTuple_SET_ITEM(const_tuple_9cdf41a53768e978cb7162b6c925b966_tuple, 1, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    PyTuple_SET_ITEM(const_tuple_9cdf41a53768e978cb7162b6c925b966_tuple, 2, const_str_plain_args); Py_INCREF(const_str_plain_args);
    PyTuple_SET_ITEM(const_tuple_9cdf41a53768e978cb7162b6c925b966_tuple, 3, const_str_plain_pw_strip); Py_INCREF(const_str_plain_pw_strip);
    PyTuple_SET_ITEM(const_tuple_9cdf41a53768e978cb7162b6c925b966_tuple, 4, const_str_plain_index); Py_INCREF(const_str_plain_index);
    PyTuple_SET_ITEM(const_tuple_9cdf41a53768e978cb7162b6c925b966_tuple, 5, const_str_plain_t); Py_INCREF(const_str_plain_t);
    const_tuple_d5f95a386b25f97f0a85d872506e8aaa_tuple = PyMarshal_ReadObjectFromString((char *)&constant_bin[ 24306 ], 297);
    const_str_plain_salt = UNSTREAM_STRING(&constant_bin[ 9177 ], 4, 1);
    const_str_digest_737123fd8bb9015bd7e3debea2571fd9 = UNSTREAM_STRING(&constant_bin[ 24603 ], 22, 0);
    const_str_digest_e02922279d2c1410aed5cd1ced9cecdb = UNSTREAM_STRING(&constant_bin[ 24625 ], 9, 0);
    const_str_plain_stopSpin = UNSTREAM_STRING(&constant_bin[ 24634 ], 8, 1);
    const_str_plain_set_copyright = UNSTREAM_STRING(&constant_bin[ 24642 ], 13, 1);
    const_tuple_int_pos_400_int_pos_500_tuple = PyTuple_New(2);
    const_int_pos_400 = PyInt_FromLong(400l);
    PyTuple_SET_ITEM(const_tuple_int_pos_400_int_pos_500_tuple, 0, const_int_pos_400); Py_INCREF(const_int_pos_400);
    PyTuple_SET_ITEM(const_tuple_int_pos_400_int_pos_500_tuple, 1, const_int_pos_500); Py_INCREF(const_int_pos_500);
    const_tuple_str_digest_f4836760c9d3202152b7ff9ebfeddb54_tuple = PyTuple_New(1);
    const_str_digest_f4836760c9d3202152b7ff9ebfeddb54 = UNSTREAM_STRING(&constant_bin[ 24655 ], 36, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_f4836760c9d3202152b7ff9ebfeddb54_tuple, 0, const_str_digest_f4836760c9d3202152b7ff9ebfeddb54); Py_INCREF(const_str_digest_f4836760c9d3202152b7ff9ebfeddb54);
    const_str_digest_495cc6fe47e97cc717d1226c09de9126 = UNSTREAM_STRING(&constant_bin[ 24691 ], 73, 0);
    const_str_plain_filterLog = UNSTREAM_STRING(&constant_bin[ 24764 ], 9, 1);
    const_str_digest_95d5e771057426593bbb37b17c6dbf84 = UNSTREAM_STRING(&constant_bin[ 24773 ], 6, 0);
    const_str_digest_c9fbfcc6a8dbf7ddb4d25424175de5f6 = UNSTREAM_STRING(&constant_bin[ 19184 ], 8, 0);
    const_tuple_51f2212c8720be35d2d30423c9f8e990_tuple = PyTuple_New(7);
    PyTuple_SET_ITEM(const_tuple_51f2212c8720be35d2d30423c9f8e990_tuple, 0, const_str_plain_button); Py_INCREF(const_str_plain_button);
    PyTuple_SET_ITEM(const_tuple_51f2212c8720be35d2d30423c9f8e990_tuple, 1, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    PyTuple_SET_ITEM(const_tuple_51f2212c8720be35d2d30423c9f8e990_tuple, 2, const_str_plain_mode); Py_INCREF(const_str_plain_mode);
    PyTuple_SET_ITEM(const_tuple_51f2212c8720be35d2d30423c9f8e990_tuple, 3, const_str_plain_res); Py_INCREF(const_str_plain_res);
    PyTuple_SET_ITEM(const_tuple_51f2212c8720be35d2d30423c9f8e990_tuple, 4, const_str_plain_s); Py_INCREF(const_str_plain_s);
    const_str_plain_done = UNSTREAM_STRING(&constant_bin[ 5882 ], 4, 1);
    PyTuple_SET_ITEM(const_tuple_51f2212c8720be35d2d30423c9f8e990_tuple, 5, const_str_plain_done); Py_INCREF(const_str_plain_done);
    PyTuple_SET_ITEM(const_tuple_51f2212c8720be35d2d30423c9f8e990_tuple, 6, const_str_plain_dialog); Py_INCREF(const_str_plain_dialog);
    const_str_plain_Locked = UNSTREAM_STRING(&constant_bin[ 8011 ], 6, 1);
    const_str_plain_add_filter = UNSTREAM_STRING(&constant_bin[ 24779 ], 10, 1);
    const_str_plain_hbox4 = UNSTREAM_STRING(&constant_bin[ 24789 ], 5, 1);
    const_str_plain_eventDescriptions = UNSTREAM_STRING(&constant_bin[ 24794 ], 17, 1);
    const_str_digest_ca6ee9ff3fe103ce252238d53ea68bfa = UNSTREAM_STRING(&constant_bin[ 24811 ], 20, 0);
    const_str_digest_d03bb4fbc98b8e70bbbef51204f2d5e1 = UNSTREAM_STRING(&constant_bin[ 24831 ], 16, 0);
    const_str_plain_STOCK_OK = UNSTREAM_STRING(&constant_bin[ 24847 ], 8, 1);
    const_tuple_9f4480d9006d3e39538c90427d1af701_tuple = PyTuple_New(18);
    PyTuple_SET_ITEM(const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 1, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    PyTuple_SET_ITEM(const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 2, const_str_plain_mode); Py_INCREF(const_str_plain_mode);
    PyTuple_SET_ITEM(const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 3, const_str_plain_hbox4); Py_INCREF(const_str_plain_hbox4);
    const_str_plain_lid_label = UNSTREAM_STRING(&constant_bin[ 24855 ], 9, 1);
    PyTuple_SET_ITEM(const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 4, const_str_plain_lid_label); Py_INCREF(const_str_plain_lid_label);
    const_str_plain_hbox2 = UNSTREAM_STRING(&constant_bin[ 24864 ], 5, 1);
    PyTuple_SET_ITEM(const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 5, const_str_plain_hbox2); Py_INCREF(const_str_plain_hbox2);
    PyTuple_SET_ITEM(const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 6, const_str_plain_hbox0); Py_INCREF(const_str_plain_hbox0);
    PyTuple_SET_ITEM(const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 7, const_str_plain_hbox1); Py_INCREF(const_str_plain_hbox1);
    const_str_plain_settings = UNSTREAM_STRING(&constant_bin[ 7809 ], 8, 1);
    PyTuple_SET_ITEM(const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 8, const_str_plain_settings); Py_INCREF(const_str_plain_settings);
    PyTuple_SET_ITEM(const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 9, const_str_plain_pb_label); Py_INCREF(const_str_plain_pb_label);
    PyTuple_SET_ITEM(const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 10, const_str_plain_hbox3); Py_INCREF(const_str_plain_hbox3);
    const_str_plain_screen_label = UNSTREAM_STRING(&constant_bin[ 24869 ], 12, 1);
    PyTuple_SET_ITEM(const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 11, const_str_plain_screen_label); Py_INCREF(const_str_plain_screen_label);
    PyTuple_SET_ITEM(const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 12, const_str_plain_vbox); Py_INCREF(const_str_plain_vbox);
    PyTuple_SET_ITEM(const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 13, const_str_plain_sb_label); Py_INCREF(const_str_plain_sb_label);
    PyTuple_SET_ITEM(const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 14, const_str_plain_hbox5); Py_INCREF(const_str_plain_hbox5);
    PyTuple_SET_ITEM(const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 15, const_str_plain_sleep_label); Py_INCREF(const_str_plain_sleep_label);
    PyTuple_SET_ITEM(const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 16, const_str_plain_pwr_instr); Py_INCREF(const_str_plain_pwr_instr);
    PyTuple_SET_ITEM(const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 17, const_str_plain_hib_label); Py_INCREF(const_str_plain_hib_label);
    const_str_plain_pixbuf_new_from_file = UNSTREAM_STRING(&constant_bin[ 24881 ], 20, 1);
    const_tuple_str_plain_self_str_plain_checkbox_str_plain_is_checked_tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_checkbox_str_plain_is_checked_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_checkbox_str_plain_is_checked_tuple, 1, const_str_plain_checkbox); Py_INCREF(const_str_plain_checkbox);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_checkbox_str_plain_is_checked_tuple, 2, const_str_plain_is_checked); Py_INCREF(const_str_plain_is_checked);
    const_str_plain_writerows = UNSTREAM_STRING(&constant_bin[ 24901 ], 9, 1);
    const_str_plain_get_filename = UNSTREAM_STRING(&constant_bin[ 24910 ], 12, 1);
    const_str_digest_eb909a9428feb017f456385f5b51d9cb = UNSTREAM_STRING(&constant_bin[ 24922 ], 22, 0);
    const_tuple_8db63d4f9df733a56a40f928f24d7bc6_tuple = PyTuple_New(9);
    PyTuple_SET_ITEM(const_tuple_8db63d4f9df733a56a40f928f24d7bc6_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_8db63d4f9df733a56a40f928f24d7bc6_tuple, 1, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    PyTuple_SET_ITEM(const_tuple_8db63d4f9df733a56a40f928f24d7bc6_tuple, 2, const_str_plain_box); Py_INCREF(const_str_plain_box);
    PyTuple_SET_ITEM(const_tuple_8db63d4f9df733a56a40f928f24d7bc6_tuple, 3, const_str_plain_usb_instr); Py_INCREF(const_str_plain_usb_instr);
    PyTuple_SET_ITEM(const_tuple_8db63d4f9df733a56a40f928f24d7bc6_tuple, 4, const_str_plain_usb_label); Py_INCREF(const_str_plain_usb_label);
    PyTuple_SET_ITEM(const_tuple_8db63d4f9df733a56a40f928f24d7bc6_tuple, 5, const_str_plain_t1); Py_INCREF(const_str_plain_t1);
    const_str_plain_button_box = UNSTREAM_STRING(&constant_bin[ 24944 ], 10, 1);
    PyTuple_SET_ITEM(const_tuple_8db63d4f9df733a56a40f928f24d7bc6_tuple, 6, const_str_plain_button_box); Py_INCREF(const_str_plain_button_box);
    PyTuple_SET_ITEM(const_tuple_8db63d4f9df733a56a40f928f24d7bc6_tuple, 7, const_str_plain_cleanup); Py_INCREF(const_str_plain_cleanup);
    PyTuple_SET_ITEM(const_tuple_8db63d4f9df733a56a40f928f24d7bc6_tuple, 8, const_str_plain_t1_run); Py_INCREF(const_str_plain_t1_run);
    const_tuple_str_digest_c9fbfcc6a8dbf7ddb4d25424175de5f6_str_empty_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_digest_c9fbfcc6a8dbf7ddb4d25424175de5f6_str_empty_tuple, 0, const_str_digest_c9fbfcc6a8dbf7ddb4d25424175de5f6); Py_INCREF(const_str_digest_c9fbfcc6a8dbf7ddb4d25424175de5f6);
    PyTuple_SET_ITEM(const_tuple_str_digest_c9fbfcc6a8dbf7ddb4d25424175de5f6_str_empty_tuple, 1, const_str_empty); Py_INCREF(const_str_empty);
    const_tuple_str_digest_eb909a9428feb017f456385f5b51d9cb_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_eb909a9428feb017f456385f5b51d9cb_tuple, 0, const_str_digest_eb909a9428feb017f456385f5b51d9cb); Py_INCREF(const_str_digest_eb909a9428feb017f456385f5b51d9cb);
    const_tuple_int_pos_10_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_int_pos_10_tuple, 0, const_int_pos_10); Py_INCREF(const_int_pos_10);
    const_tuple_str_digest_e1c3282c2c49230ab34cbbb48ee72001_tuple = PyTuple_New(1);
    const_str_digest_e1c3282c2c49230ab34cbbb48ee72001 = UNSTREAM_STRING(&constant_bin[ 24954 ], 9, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_e1c3282c2c49230ab34cbbb48ee72001_tuple, 0, const_str_digest_e1c3282c2c49230ab34cbbb48ee72001); Py_INCREF(const_str_digest_e1c3282c2c49230ab34cbbb48ee72001);
    const_str_digest_47f300fb89e60cc15fc91f359a4d61b8 = UNSTREAM_STRING(&constant_bin[ 24963 ], 8, 0);
    const_tuple_str_digest_9ef21afda882614b7db2bd2f0eca2fdd_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_9ef21afda882614b7db2bd2f0eca2fdd_tuple, 0, const_str_digest_9ef21afda882614b7db2bd2f0eca2fdd); Py_INCREF(const_str_digest_9ef21afda882614b7db2bd2f0eca2fdd);
    const_tuple_str_digest_6926c4cdc4f6ef08c6e616381df4872b_tuple = PyTuple_New(1);
    const_str_digest_6926c4cdc4f6ef08c6e616381df4872b = UNSTREAM_STRING(&constant_bin[ 24971 ], 38, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_6926c4cdc4f6ef08c6e616381df4872b_tuple, 0, const_str_digest_6926c4cdc4f6ef08c6e616381df4872b); Py_INCREF(const_str_digest_6926c4cdc4f6ef08c6e616381df4872b);
    const_tuple_str_digest_e7e6c5a1c1999b699ec49e94b0ae1a17_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_e7e6c5a1c1999b699ec49e94b0ae1a17_tuple, 0, const_str_digest_e7e6c5a1c1999b699ec49e94b0ae1a17); Py_INCREF(const_str_digest_e7e6c5a1c1999b699ec49e94b0ae1a17);
    const_str_plain_set_default_size = UNSTREAM_STRING(&constant_bin[ 25009 ], 16, 1);
    const_str_plain_N = UNSTREAM_CHAR(78, 1);
    const_tuple_str_digest_acf905062190ec8d249c9050c6366424_tuple = PyTuple_New(1);
    const_str_digest_acf905062190ec8d249c9050c6366424 = UNSTREAM_STRING(&constant_bin[ 25025 ], 16, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_acf905062190ec8d249c9050c6366424_tuple, 0, const_str_digest_acf905062190ec8d249c9050c6366424); Py_INCREF(const_str_digest_acf905062190ec8d249c9050c6366424);
    const_tuple_dfef09b1a52e998cc9ff9cf11df5c263_tuple = PyTuple_New(8);
    PyTuple_SET_ITEM(const_tuple_dfef09b1a52e998cc9ff9cf11df5c263_tuple, 0, const_str_plain_usb_new); Py_INCREF(const_str_plain_usb_new);
    PyTuple_SET_ITEM(const_tuple_dfef09b1a52e998cc9ff9cf11df5c263_tuple, 1, const_str_plain_count); Py_INCREF(const_str_plain_count);
    PyTuple_SET_ITEM(const_tuple_dfef09b1a52e998cc9ff9cf11df5c263_tuple, 2, const_str_plain_d); Py_INCREF(const_str_plain_d);
    PyTuple_SET_ITEM(const_tuple_dfef09b1a52e998cc9ff9cf11df5c263_tuple, 3, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    PyTuple_SET_ITEM(const_tuple_dfef09b1a52e998cc9ff9cf11df5c263_tuple, 4, const_str_plain_length); Py_INCREF(const_str_plain_length);
    PyTuple_SET_ITEM(const_tuple_dfef09b1a52e998cc9ff9cf11df5c263_tuple, 5, const_str_plain_usb_final); Py_INCREF(const_str_plain_usb_final);
    PyTuple_SET_ITEM(const_tuple_dfef09b1a52e998cc9ff9cf11df5c263_tuple, 6, const_str_plain_self); Py_INCREF(const_str_plain_self);
    const_str_plain_mod = UNSTREAM_STRING(&constant_bin[ 5565 ], 3, 1);
    PyTuple_SET_ITEM(const_tuple_dfef09b1a52e998cc9ff9cf11df5c263_tuple, 7, const_str_plain_mod); Py_INCREF(const_str_plain_mod);
    const_str_digest_56909ab61570685ab870054d5154f2f6 = UNSTREAM_STRING(&constant_bin[ 25041 ], 36, 0);
    const_str_plain_spinQ = UNSTREAM_STRING(&constant_bin[ 25077 ], 5, 1);
    const_tuple_str_digest_8974007cd1bd5af74f0b391a825ef662_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_8974007cd1bd5af74f0b391a825ef662_tuple, 0, const_str_digest_8974007cd1bd5af74f0b391a825ef662); Py_INCREF(const_str_digest_8974007cd1bd5af74f0b391a825ef662);
    const_str_plain_Time = UNSTREAM_STRING(&constant_bin[ 19599 ], 4, 1);
    const_str_plain_get_content_area = UNSTREAM_STRING(&constant_bin[ 25082 ], 16, 1);
    const_str_plain_FileChooserDialog = UNSTREAM_STRING(&constant_bin[ 25098 ], 17, 1);
    const_tuple_107aed21120b7cdd3a04c9d393845c10_tuple = PyTuple_New(7);
    PyTuple_SET_ITEM(const_tuple_107aed21120b7cdd3a04c9d393845c10_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_107aed21120b7cdd3a04c9d393845c10_tuple, 1, const_str_plain_args); Py_INCREF(const_str_plain_args);
    PyTuple_SET_ITEM(const_tuple_107aed21120b7cdd3a04c9d393845c10_tuple, 2, const_str_plain_f); Py_INCREF(const_str_plain_f);
    PyTuple_SET_ITEM(const_tuple_107aed21120b7cdd3a04c9d393845c10_tuple, 3, const_str_plain_chooser); Py_INCREF(const_str_plain_chooser);
    PyTuple_SET_ITEM(const_tuple_107aed21120b7cdd3a04c9d393845c10_tuple, 4, const_str_plain_filename); Py_INCREF(const_str_plain_filename);
    PyTuple_SET_ITEM(const_tuple_107aed21120b7cdd3a04c9d393845c10_tuple, 5, const_str_plain_filter); Py_INCREF(const_str_plain_filter);
    PyTuple_SET_ITEM(const_tuple_107aed21120b7cdd3a04c9d393845c10_tuple, 6, const_str_plain_response); Py_INCREF(const_str_plain_response);
    const_tuple_str_digest_0752589c12ccb235f08434890c781f69_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_0752589c12ccb235f08434890c781f69_tuple, 0, const_str_digest_0752589c12ccb235f08434890c781f69); Py_INCREF(const_str_digest_0752589c12ccb235f08434890c781f69);
    const_str_plain_onDestroy = UNSTREAM_STRING(&constant_bin[ 25115 ], 9, 1);
    const_str_digest_ad53835ae241a2eb325b6652c22d7ec7 = UNSTREAM_STRING(&constant_bin[ 25124 ], 24, 0);
    const_str_digest_396785b3bb5921b9ef039f8972929669 = UNSTREAM_STRING(&constant_bin[ 25148 ], 247, 0);
    const_tuple_str_plain_Never_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_plain_Never_tuple, 0, const_str_plain_Never); Py_INCREF(const_str_plain_Never);
    const_str_digest_c888f0388b2896f3fb56f9d36c5abce0 = UNSTREAM_STRING(&constant_bin[ 25395 ], 19, 0);
    const_tuple_str_digest_da4537c2731e3ef82022c7083e54e3d5_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_da4537c2731e3ef82022c7083e54e3d5_tuple, 0, const_str_digest_da4537c2731e3ef82022c7083e54e3d5); Py_INCREF(const_str_digest_da4537c2731e3ef82022c7083e54e3d5);
    const_str_plain_set_sort_column_id = UNSTREAM_STRING(&constant_bin[ 25414 ], 18, 1);
    const_tuple_str_digest_396785b3bb5921b9ef039f8972929669_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_396785b3bb5921b9ef039f8972929669_tuple, 0, const_str_digest_396785b3bb5921b9ef039f8972929669); Py_INCREF(const_str_digest_396785b3bb5921b9ef039f8972929669);
    const_str_plain_MBREnabled = UNSTREAM_STRING(&constant_bin[ 22273 ], 10, 1);
    const_tuple_str_digest_d03bb4fbc98b8e70bbbef51204f2d5e1_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_d03bb4fbc98b8e70bbbef51204f2d5e1_tuple, 0, const_str_digest_d03bb4fbc98b8e70bbbef51204f2d5e1); Py_INCREF(const_str_digest_d03bb4fbc98b8e70bbbef51204f2d5e1);
    const_str_plain_AboutDialog = UNSTREAM_STRING(&constant_bin[ 25432 ], 11, 1);
    const_tuple_b9c8a3b611fcd77dae11f37652d24c6a_tuple = PyTuple_New(10);
    PyTuple_SET_ITEM(const_tuple_b9c8a3b611fcd77dae11f37652d24c6a_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_b9c8a3b611fcd77dae11f37652d24c6a_tuple, 1, const_str_plain_button); Py_INCREF(const_str_plain_button);
    PyTuple_SET_ITEM(const_tuple_b9c8a3b611fcd77dae11f37652d24c6a_tuple, 2, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    PyTuple_SET_ITEM(const_tuple_b9c8a3b611fcd77dae11f37652d24c6a_tuple, 3, const_str_plain_pw_strip); Py_INCREF(const_str_plain_pw_strip);
    PyTuple_SET_ITEM(const_tuple_b9c8a3b611fcd77dae11f37652d24c6a_tuple, 4, const_str_plain_index); Py_INCREF(const_str_plain_index);
    PyTuple_SET_ITEM(const_tuple_b9c8a3b611fcd77dae11f37652d24c6a_tuple, 5, const_str_plain_t1); Py_INCREF(const_str_plain_t1);
    PyTuple_SET_ITEM(const_tuple_b9c8a3b611fcd77dae11f37652d24c6a_tuple, 6, const_str_plain_user); Py_INCREF(const_str_plain_user);
    PyTuple_SET_ITEM(const_tuple_b9c8a3b611fcd77dae11f37652d24c6a_tuple, 7, const_str_plain_m_na); Py_INCREF(const_str_plain_m_na);
    PyTuple_SET_ITEM(const_tuple_b9c8a3b611fcd77dae11f37652d24c6a_tuple, 8, const_str_plain_drive_na); Py_INCREF(const_str_plain_drive_na);
    PyTuple_SET_ITEM(const_tuple_b9c8a3b611fcd77dae11f37652d24c6a_tuple, 9, const_str_plain_salt); Py_INCREF(const_str_plain_salt);
    const_str_digest_a036ff953132b6466dcdd8be6f790a59 = UNSTREAM_STRING(&constant_bin[ 25443 ], 29, 0);
    const_str_digest_3208df8276e003cd29da26b8243ad24d = UNSTREAM_STRING(&constant_bin[ 24268 ], 18, 0);
    const_tuple_str_plain_self_str_plain_parent_str_plain_args_tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_parent_str_plain_args_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_parent_str_plain_args_tuple, 1, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_parent_str_plain_args_tuple, 2, const_str_plain_args); Py_INCREF(const_str_plain_args);
    const_str_plain_title = UNSTREAM_STRING(&constant_bin[ 25472 ], 5, 1);
    const_str_plain_check_toggled = UNSTREAM_STRING(&constant_bin[ 25477 ], 13, 1);
    const_str_plain_SORT_DESCENDING = UNSTREAM_STRING(&constant_bin[ 25490 ], 15, 1);
    const_tuple_str_digest_a1d4a5f21f2d424de7fcc6b4e390d5e8_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_a1d4a5f21f2d424de7fcc6b4e390d5e8_tuple, 0, const_str_digest_a1d4a5f21f2d424de7fcc6b4e390d5e8); Py_INCREF(const_str_digest_a1d4a5f21f2d424de7fcc6b4e390d5e8);
    const_str_plain_warnerrEntries = UNSTREAM_STRING(&constant_bin[ 25505 ], 14, 1);
    const_str_plain_SetPowerDialog = UNSTREAM_STRING(&constant_bin[ 1540 ], 14, 1);
    const_tuple_str_plain_self_str_plain_button_str_plain_parent_tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_button_str_plain_parent_tuple, 0, const_str_plain_self); Py_INCREF(const_str_plain_self);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_button_str_plain_parent_tuple, 1, const_str_plain_button); Py_INCREF(const_str_plain_button);
    PyTuple_SET_ITEM(const_tuple_str_plain_self_str_plain_button_str_plain_parent_tuple, 2, const_str_plain_parent); Py_INCREF(const_str_plain_parent);
    const_str_digest_49b0685310235116230cb4e1af6222be = UNSTREAM_STRING(&constant_bin[ 6087 ], 9, 0);
    const_str_plain_FileFilter = UNSTREAM_STRING(&constant_bin[ 25519 ], 10, 1);
    const_str_plain_set_name = UNSTREAM_STRING(&constant_bin[ 25529 ], 8, 1);
    const_str_digest_dd3ea41d2ee44affb56e308a5ece0994 = UNSTREAM_STRING(&constant_bin[ 22331 ], 11, 0);
    const_str_digest_3490b26e2c07b56165328e2d9172f15a = UNSTREAM_STRING(&constant_bin[ 25537 ], 17, 0);
    const_str_plain_saveToCSV = UNSTREAM_STRING(&constant_bin[ 25554 ], 9, 1);
    const_tuple_str_digest_7bc75c1e8b65ceef92296230a69ea957_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_7bc75c1e8b65ceef92296230a69ea957_tuple, 0, const_str_digest_7bc75c1e8b65ceef92296230a69ea957); Py_INCREF(const_str_digest_7bc75c1e8b65ceef92296230a69ea957);
    const_str_digest_b4c2ecd5d1ca6193dd02c4ae2cc51f86 = UNSTREAM_STRING(&constant_bin[ 25563 ], 125, 0);
    const_tuple_str_digest_301503d632e956819fe431035d3bf52a_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_301503d632e956819fe431035d3bf52a_tuple, 0, const_str_digest_301503d632e956819fe431035d3bf52a); Py_INCREF(const_str_digest_301503d632e956819fe431035d3bf52a);
    const_tuple_str_digest_25b83aec39158cba36b77089e32c15a8_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_25b83aec39158cba36b77089e32c15a8_tuple, 0, const_str_digest_25b83aec39158cba36b77089e32c15a8); Py_INCREF(const_str_digest_25b83aec39158cba36b77089e32c15a8);
    const_str_digest_b340fadac88da0fc43dfd50d901ef829 = UNSTREAM_STRING(&constant_bin[ 19164 ], 10, 0);
    const_str_digest_fa4210e8e44cbe0e2aa4079faf6cd0bf = UNSTREAM_STRING(&constant_bin[ 25688 ], 28, 0);
    const_str_plain_csv = UNSTREAM_STRING(&constant_bin[ 1432 ], 3, 1);
    const_str_digest_5d381edee88c82fa41885016fd67e3dc = UNSTREAM_STRING(&constant_bin[ 25716 ], 8, 0);
    const_str_plain_wb = UNSTREAM_STRING(&constant_bin[ 25724 ], 2, 1);
    const_str_plain_MBRDone = UNSTREAM_STRING(&constant_bin[ 22259 ], 7, 1);
    const_str_plain_RESPONSE_CLOSE = UNSTREAM_STRING(&constant_bin[ 25726 ], 14, 1);
    const_tuple_str_digest_5d381edee88c82fa41885016fd67e3dc_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_5d381edee88c82fa41885016fd67e3dc_tuple, 0, const_str_digest_5d381edee88c82fa41885016fd67e3dc); Py_INCREF(const_str_digest_5d381edee88c82fa41885016fd67e3dc);
    const_str_plain_startSpin = UNSTREAM_STRING(&constant_bin[ 25740 ], 9, 1);
    const_str_plain_set_editable = UNSTREAM_STRING(&constant_bin[ 25749 ], 12, 1);
    const_tuple_str_digest_6cee2b564da3c577324783ad168aeab9_tuple = PyTuple_New(1);
    const_str_digest_6cee2b564da3c577324783ad168aeab9 = UNSTREAM_STRING(&constant_bin[ 25761 ], 49, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_6cee2b564da3c577324783ad168aeab9_tuple, 0, const_str_digest_6cee2b564da3c577324783ad168aeab9); Py_INCREF(const_str_digest_6cee2b564da3c577324783ad168aeab9);
    const_tuple_str_digest_246de0b2ff3271acdef9f30298fa1a45_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_246de0b2ff3271acdef9f30298fa1a45_tuple, 0, const_str_digest_246de0b2ff3271acdef9f30298fa1a45); Py_INCREF(const_str_digest_246de0b2ff3271acdef9f30298fa1a45);
    const_tuple_int_pos_300_int_pos_300_tuple = PyTuple_New(2);
    const_int_pos_300 = PyInt_FromLong(300l);
    PyTuple_SET_ITEM(const_tuple_int_pos_300_int_pos_300_tuple, 0, const_int_pos_300); Py_INCREF(const_int_pos_300);
    PyTuple_SET_ITEM(const_tuple_int_pos_300_int_pos_300_tuple, 1, const_int_pos_300); Py_INCREF(const_int_pos_300);
    const_str_digest_e92f018ad67cc5143a4b3d6cd42928fa = UNSTREAM_STRING(&constant_bin[ 25810 ], 15, 0);
    const_str_plain_showPass_toggled = UNSTREAM_STRING(&constant_bin[ 25825 ], 16, 1);
    const_str_digest_3dec77647be510d19621a0c9aeed35ae = UNSTREAM_STRING(&constant_bin[ 25841 ], 72, 0);
    const_str_plain_QueryDialog = UNSTREAM_STRING(&constant_bin[ 1355 ], 11, 1);
    const_tuple_type_str_type_str_type_int_type_str_tuple = PyTuple_New(4);
    PyTuple_SET_ITEM(const_tuple_type_str_type_str_type_int_type_str_tuple, 0, (PyObject *)&PyString_Type); Py_INCREF((PyObject *)&PyString_Type);
    PyTuple_SET_ITEM(const_tuple_type_str_type_str_type_int_type_str_tuple, 1, (PyObject *)&PyString_Type); Py_INCREF((PyObject *)&PyString_Type);
    PyTuple_SET_ITEM(const_tuple_type_str_type_str_type_int_type_str_tuple, 2, (PyObject *)&PyInt_Type); Py_INCREF((PyObject *)&PyInt_Type);
    PyTuple_SET_ITEM(const_tuple_type_str_type_str_type_int_type_str_tuple, 3, (PyObject *)&PyString_Type); Py_INCREF((PyObject *)&PyString_Type);
    const_str_plain_SORT_ASCENDING = UNSTREAM_STRING(&constant_bin[ 25913 ], 14, 1);
    const_tuple_str_digest_b8faea6f4cc3bf2fcc226045f4bd32d1_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_b8faea6f4cc3bf2fcc226045f4bd32d1_tuple, 0, const_str_digest_b8faea6f4cc3bf2fcc226045f4bd32d1); Py_INCREF(const_str_digest_b8faea6f4cc3bf2fcc226045f4bd32d1);
    const_tuple_str_digest_ebd23d2bb4a34298b0d66a00001e1ca7_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_ebd23d2bb4a34298b0d66a00001e1ca7_tuple, 0, const_str_digest_ebd23d2bb4a34298b0d66a00001e1ca7); Py_INCREF(const_str_digest_ebd23d2bb4a34298b0d66a00001e1ca7);
    const_tuple_str_digest_f8d7aee47f5e3ab6510ac70ff73039eb_tuple = PyTuple_New(1);
    const_str_digest_f8d7aee47f5e3ab6510ac70ff73039eb = UNSTREAM_STRING(&constant_bin[ 25927 ], 22, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_f8d7aee47f5e3ab6510ac70ff73039eb_tuple, 0, const_str_digest_f8d7aee47f5e3ab6510ac70ff73039eb); Py_INCREF(const_str_digest_f8d7aee47f5e3ab6510ac70ff73039eb);
    const_tuple_str_digest_ec3b6b379ac030707422d5ef953a3b39_tuple = PyTuple_New(1);
    const_str_digest_ec3b6b379ac030707422d5ef953a3b39 = UNSTREAM_STRING(&constant_bin[ 25949 ], 12, 0);
    PyTuple_SET_ITEM(const_tuple_str_digest_ec3b6b379ac030707422d5ef953a3b39_tuple, 0, const_str_digest_ec3b6b379ac030707422d5ef953a3b39); Py_INCREF(const_str_digest_ec3b6b379ac030707422d5ef953a3b39);
    const_str_digest_bc031868e3ea3180f3e8ef75b396a482 = UNSTREAM_STRING(&constant_bin[ 25961 ], 8, 0);
    const_str_plain_set_comments = UNSTREAM_STRING(&constant_bin[ 25969 ], 12, 1);
    const_str_digest_68ab33c88ed807c9f9cce195c9f7ba52 = UNSTREAM_STRING(&constant_bin[ 19436 ], 10, 0);
    const_str_plain_refresh_button = UNSTREAM_STRING(&constant_bin[ 25981 ], 14, 1);
    const_tuple_str_plain_Rescan_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_plain_Rescan_tuple, 0, const_str_plain_Rescan); Py_INCREF(const_str_plain_Rescan);
    const_str_plain_POLICY_AUTOMATIC = UNSTREAM_STRING(&constant_bin[ 25995 ], 16, 1);
    const_tuple_str_digest_47f300fb89e60cc15fc91f359a4d61b8_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_47f300fb89e60cc15fc91f359a4d61b8_tuple, 0, const_str_digest_47f300fb89e60cc15fc91f359a4d61b8); Py_INCREF(const_str_digest_47f300fb89e60cc15fc91f359a4d61b8);
    const_tuple_str_digest_e974b93f125c788389bc994528457aa9_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_e974b93f125c788389bc994528457aa9_tuple, 0, const_str_digest_e974b93f125c788389bc994528457aa9); Py_INCREF(const_str_digest_e974b93f125c788389bc994528457aa9);
    const_str_plain_POLICY_NEVER = UNSTREAM_STRING(&constant_bin[ 26011 ], 12, 1);
    const_str_plain_sleep_menu = UNSTREAM_STRING(&constant_bin[ 26023 ], 10, 1);
    const_str_digest_2275cfe76c6d948a03b49cc49deb1a76 = UNSTREAM_STRING(&constant_bin[ 26033 ], 16, 0);
    const_tuple_str_digest_268db6629a0b2da516d45c0905e9f223_tuple = PyTuple_New(1);
    PyTuple_SET_ITEM(const_tuple_str_digest_268db6629a0b2da516d45c0905e9f223_tuple, 0, const_str_digest_268db6629a0b2da516d45c0905e9f223); Py_INCREF(const_str_digest_268db6629a0b2da516d45c0905e9f223);
    const_str_plain_save_box = UNSTREAM_STRING(&constant_bin[ 26049 ], 8, 1);
    const_tuple_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77_str_newline_tuple = PyTuple_New(2);
    PyTuple_SET_ITEM(const_tuple_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77_str_newline_tuple, 0, const_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77); Py_INCREF(const_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77);
    PyTuple_SET_ITEM(const_tuple_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77_str_newline_tuple, 1, const_str_newline); Py_INCREF(const_str_newline);
    const_str_plain_Dialog = UNSTREAM_STRING(&constant_bin[ 1360 ], 6, 1);

    constants_created = true;
}

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_dialogs(void) {
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_8214e8d253398d83e0d02a06610c476b;
static PyCodeObject *codeobj_f472c0e13a0220a9ef62e77ea0093a01;
static PyCodeObject *codeobj_3d85e9441e1fca82b0664c8186011a57;
static PyCodeObject *codeobj_9386c7ff5d3ff7b83c8cf305e4c392d8;
static PyCodeObject *codeobj_8c8667ffbd7ea33207e44e91b413156a;
static PyCodeObject *codeobj_4bf6f748b6bffa8bded57eec73a6cb75;
static PyCodeObject *codeobj_df0270df38e2bd58819d05387e4bda45;
static PyCodeObject *codeobj_ef0067c30e640f9c83b22220d14d0767;
static PyCodeObject *codeobj_26e0170fd15b2d159020ce747904a93b;
static PyCodeObject *codeobj_bb6be9118e6e94cdab1fad69f3496610;
static PyCodeObject *codeobj_9730951a27bd19498aa102cb6a04e842;
static PyCodeObject *codeobj_1f970691038a87f4b74dd84c88e18063;
static PyCodeObject *codeobj_78146796101c5ccb0cb445ee11501677;
static PyCodeObject *codeobj_b13925c23bd35212453f4b8800203e07;
static PyCodeObject *codeobj_1bf6d1030b75188bd6a8b51e170fc4f1;
static PyCodeObject *codeobj_c5c5562be75f922837dddad4bb032dfe;
static PyCodeObject *codeobj_ed44140aa8ea052c1de5d94d3a6d0d62;
static PyCodeObject *codeobj_4819b15a430890c766193c4b26ec24f6;
static PyCodeObject *codeobj_60373512ef7346ec75af4b60640e5729;
static PyCodeObject *codeobj_5e261a6409d1a8794a804c974235a230;
static PyCodeObject *codeobj_33ab5e5c230c928ee325ae602a5d8313;
static PyCodeObject *codeobj_5213d8c40e0b2640946d2d8ea73686ce;
static PyCodeObject *codeobj_a35f124764436ec53911585e0d461dbe;
static PyCodeObject *codeobj_b6583bd5be2af69d1a53505c2c406838;
static PyCodeObject *codeobj_9d55278475ac7b5d71da18446ca17aab;
static PyCodeObject *codeobj_21fd2959b99fe54a3447114bd6e97730;

static void createModuleCodeObjects(void) {
    module_filename_obj = MAKE_RELATIVE_PATH(const_str_digest_4687747a4da7b5229720124340e187bf);
    codeobj_8214e8d253398d83e0d02a06610c476b = MAKE_CODEOBJECT(module_filename_obj, 1, CO_NOFREE, const_str_digest_2275cfe76c6d948a03b49cc49deb1a76, const_tuple_empty, 0, 0, 0);
    codeobj_f472c0e13a0220a9ef62e77ea0093a01 = MAKE_CODEOBJECT(module_filename_obj, 533, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain___init__, const_tuple_2c650076278b8aa15aee8a65a0ee7b21_tuple, 3, 0, 0);
    codeobj_3d85e9441e1fca82b0664c8186011a57 = MAKE_CODEOBJECT(module_filename_obj, 741, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain___init__, const_tuple_8db63d4f9df733a56a40f928f24d7bc6_tuple, 2, 0, 0);
    codeobj_9386c7ff5d3ff7b83c8cf305e4c392d8 = MAKE_CODEOBJECT(module_filename_obj, 700, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain___init__, const_tuple_47143709c63dc82012049da6cea392a6_tuple, 2, 0, 0);
    codeobj_8c8667ffbd7ea33207e44e91b413156a = MAKE_CODEOBJECT(module_filename_obj, 960, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain___init__, const_tuple_9f4480d9006d3e39538c90427d1af701_tuple, 3, 0, 0);
    codeobj_4bf6f748b6bffa8bded57eec73a6cb75 = MAKE_CODEOBJECT(module_filename_obj, 20, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain___init__, const_tuple_30fbef87e53568e2aa1014e9349a1d80_tuple, 3, 0, 0);
    codeobj_df0270df38e2bd58819d05387e4bda45 = MAKE_CODEOBJECT(module_filename_obj, 140, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_check_toggled, const_tuple_str_plain_self_str_plain_checkbox_str_plain_is_checked_tuple, 2, 0, 0);
    codeobj_ef0067c30e640f9c83b22220d14d0767 = MAKE_CODEOBJECT(module_filename_obj, 812, CO_OPTIMIZED | CO_NEWLOCALS, const_str_plain_cleanup, const_tuple_dfef09b1a52e998cc9ff9cf11df5c263_tuple, 1, 0, 0);
    codeobj_26e0170fd15b2d159020ce747904a93b = MAKE_CODEOBJECT(module_filename_obj, 669, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_filterLog, const_tuple_b78e031a1aa4c4f9a83550e7f5537989_tuple, 4, 0, 0);
    codeobj_bb6be9118e6e94cdab1fad69f3496610 = MAKE_CODEOBJECT(module_filename_obj, 1090, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_mngPower_prompt, const_tuple_51f2212c8720be35d2d30423c9f8e990_tuple, 3, 0, 0);
    codeobj_9730951a27bd19498aa102cb6a04e842 = MAKE_CODEOBJECT(module_filename_obj, 159, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_msg_err, const_tuple_str_plain_self_str_plain_msg_str_plain_res_str_plain_message_tuple, 2, 0, 0);
    codeobj_1f970691038a87f4b74dd84c88e18063 = MAKE_CODEOBJECT(module_filename_obj, 270, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_msg_err, const_tuple_str_plain_self_str_plain_msg_str_plain_res_str_plain_message_tuple, 2, 0, 0);
    codeobj_78146796101c5ccb0cb445ee11501677 = MAKE_CODEOBJECT(module_filename_obj, 277, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_msg_ok, const_tuple_str_plain_self_str_plain_msg_str_plain_res_str_plain_message_tuple, 2, 0, 0);
    codeobj_b13925c23bd35212453f4b8800203e07 = MAKE_CODEOBJECT(module_filename_obj, 137, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_onDestroy, const_tuple_str_plain_self_str_plain_button_str_plain_parent_tuple, 3, 0, 0);
    codeobj_1bf6d1030b75188bd6a8b51e170fc4f1 = MAKE_CODEOBJECT(module_filename_obj, 678, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE, const_str_plain_openLog, const_tuple_9cdf41a53768e978cb7162b6c925b966_tuple, 2, 0, 0);
    codeobj_c5c5562be75f922837dddad4bb032dfe = MAKE_CODEOBJECT(module_filename_obj, 733, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE, const_str_plain_openOpal, const_tuple_8933694fb1f2363a775222ad71d1df0e_tuple, 2, 0, 0);
    codeobj_ed44140aa8ea052c1de5d94d3a6d0d62 = MAKE_CODEOBJECT(module_filename_obj, 285, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_query, const_tuple_579ae0c2c7409ed9865e38c23c43418d_tuple, 3, 0, 0);
    codeobj_4819b15a430890c766193c4b26ec24f6 = MAKE_CODEOBJECT(module_filename_obj, 166, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_queryAuth, const_tuple_b9c8a3b611fcd77dae11f37652d24c6a_tuple, 3, 0, 0);
    codeobj_60373512ef7346ec75af4b60640e5729 = MAKE_CODEOBJECT(module_filename_obj, 860, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_refreshUSB, const_tuple_d5f95a386b25f97f0a85d872506e8aaa_tuple, 3, 0, 0);
    codeobj_5e261a6409d1a8794a804c974235a230 = MAKE_CODEOBJECT(module_filename_obj, 622, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, const_str_plain_saveToCSV, const_tuple_1554c53980eb05828d466dc3d408826b_tuple, 3, 0, 0);
    codeobj_33ab5e5c230c928ee325ae602a5d8313 = MAKE_CODEOBJECT(module_filename_obj, 238, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE, const_str_plain_saveToText, const_tuple_107aed21120b7cdd3a04c9d393845c10_tuple, 1, 0, 0);
    codeobj_5213d8c40e0b2640946d2d8ea73686ce = MAKE_CODEOBJECT(module_filename_obj, 152, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE, const_str_plain_showPass_toggled, const_tuple_str_plain_self_str_plain_args_tuple, 1, 0, 0);
    codeobj_a35f124764436ec53911585e0d461dbe = MAKE_CODEOBJECT(module_filename_obj, 933, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE, const_str_plain_show_about, const_tuple_774b7c4dc74f4426ce5f4537624fd591_tuple, 2, 0, 0);
    codeobj_b6583bd5be2af69d1a53505c2c406838 = MAKE_CODEOBJECT(module_filename_obj, 230, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE, const_str_plain_startSpin, const_tuple_str_plain_self_str_plain_parent_str_plain_args_tuple, 2, 0, 0);
    codeobj_9d55278475ac7b5d71da18446ca17aab = MAKE_CODEOBJECT(module_filename_obj, 234, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE, const_str_plain_stopSpin, const_tuple_str_plain_self_str_plain_parent_str_plain_args_tuple, 2, 0, 0);
    codeobj_21fd2959b99fe54a3447114bd6e97730 = MAKE_CODEOBJECT(module_filename_obj, 775, CO_OPTIMIZED | CO_NEWLOCALS, const_str_plain_t1_run, const_tuple_3817d9ac697593d351865cd3ed4f9eb1_tuple, 0, 0, 0);
}

// The module function declarations.
static PyObject *MAKE_FUNCTION_dialogs$$$function_10_msg_err();


static PyObject *MAKE_FUNCTION_dialogs$$$function_11_msg_ok();


static PyObject *MAKE_FUNCTION_dialogs$$$function_12_query();


static PyObject *MAKE_FUNCTION_dialogs$$$function_13___init__();


static PyObject *MAKE_FUNCTION_dialogs$$$function_14_saveToCSV();


static PyObject *MAKE_FUNCTION_dialogs$$$function_15_filterLog();


static PyObject *MAKE_FUNCTION_dialogs$$$function_16_openLog();


static PyObject *MAKE_FUNCTION_dialogs$$$function_17___init__();


static PyObject *MAKE_FUNCTION_dialogs$$$function_18_openOpal();


static PyObject *MAKE_FUNCTION_dialogs$$$function_19___init__();


static PyObject *MAKE_FUNCTION_dialogs$$$function_19___init__$$$function_1_t1_run();


static PyObject *MAKE_FUNCTION_dialogs$$$function_19___init__$$$function_2_cleanup();


static PyObject *MAKE_FUNCTION_dialogs$$$function_1___init__();


static PyObject *MAKE_FUNCTION_dialogs$$$function_20_refreshUSB();


static PyObject *MAKE_FUNCTION_dialogs$$$function_21_show_about();


static PyObject *MAKE_FUNCTION_dialogs$$$function_22___init__();


static PyObject *MAKE_FUNCTION_dialogs$$$function_23_mngPower_prompt();


static PyObject *MAKE_FUNCTION_dialogs$$$function_2_onDestroy();


static PyObject *MAKE_FUNCTION_dialogs$$$function_3_check_toggled();


static PyObject *MAKE_FUNCTION_dialogs$$$function_4_showPass_toggled();


static PyObject *MAKE_FUNCTION_dialogs$$$function_5_msg_err();


static PyObject *MAKE_FUNCTION_dialogs$$$function_6_queryAuth();


static PyObject *MAKE_FUNCTION_dialogs$$$function_7_startSpin();


static PyObject *MAKE_FUNCTION_dialogs$$$function_8_stopSpin();


static PyObject *MAKE_FUNCTION_dialogs$$$function_9_saveToText();


// The module function definitions.
static PyObject *impl_dialogs$$$function_1___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_parent = python_pars[1];
    PyObject *par_queryTextList = python_pars[2];
    PyObject *var_index = NULL;
    PyObject *var_passLabel = NULL;
    PyObject *var_hbox1 = NULL;
    PyObject *var_spBoxQ = NULL;
    PyObject *var_querySave = NULL;
    PyObject *var_plTxt = NULL;
    PyObject *var_queryVbox = NULL;
    PyObject *var_scrolledWin = NULL;
    PyObject *var_checkBoxQ = NULL;
    PyObject *var_queryTextView = NULL;
    struct Nuitka_FrameObject *frame_4bf6f748b6bffa8bded57eec73a6cb75;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_4bf6f748b6bffa8bded57eec73a6cb75 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_4bf6f748b6bffa8bded57eec73a6cb75, codeobj_4bf6f748b6bffa8bded57eec73a6cb75, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_4bf6f748b6bffa8bded57eec73a6cb75 = cache_frame_4bf6f748b6bffa8bded57eec73a6cb75;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_4bf6f748b6bffa8bded57eec73a6cb75);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_4bf6f748b6bffa8bded57eec73a6cb75) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_instance_1 = const_str_empty;
        CHECK_OBJECT(par_queryTextList);
        tmp_args_element_name_1 = par_queryTextList;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 21;
        {
            PyObject *call_args[] = {tmp_args_element_name_1};
            tmp_assattr_name_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_join, call_args);
        }

        if (tmp_assattr_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 21;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_queryWinText, tmp_assattr_name_1);
        Py_DECREF(tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 21;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 23;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_Window);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 23;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_args_element_name_2 = par_self;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 23;
        {
            PyObject *call_args[] = {tmp_args_element_name_2};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain___init__, call_args);
        }

        Py_DECREF(tmp_called_instance_2);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 23;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(par_self);
        tmp_called_instance_3 = par_self;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 24;
        tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_3, const_str_plain_set_title, &PyTuple_GET_ITEM(const_tuple_str_digest_2f81980dfe65cd75aba129ef6cdeca0f_tuple, 0));

        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 24;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT(par_self);
        tmp_called_instance_4 = par_self;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 25;
        tmp_call_result_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_set_border_width, &PyTuple_GET_ITEM(const_tuple_int_pos_10_tuple, 0));

        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_2 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 27;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_5 = tmp_mvar_value_2;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 27;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_5, const_str_plain_ScrolledWindow);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 27;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_scrolledWin == NULL);
        var_scrolledWin = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_4;
        CHECK_OBJECT(var_scrolledWin);
        tmp_source_name_2 = var_scrolledWin;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_set_policy);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_3 == NULL) {
            Py_DECREF(tmp_called_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 28;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_3;
        tmp_args_element_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_POLICY_NEVER);
        if (tmp_args_element_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 28;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_4 == NULL)) {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_4 == NULL) {
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 28;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_4;
        tmp_args_element_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_POLICY_AUTOMATIC);
        if (tmp_args_element_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_3);

            exception_lineno = 28;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 28;
        {
            PyObject *call_args[] = {tmp_args_element_name_3, tmp_args_element_name_4};
            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_1, call_args);
        }

        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_3);
        Py_DECREF(tmp_args_element_name_4);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    {
        PyObject *tmp_called_instance_6;
        PyObject *tmp_call_result_5;
        CHECK_OBJECT(par_self);
        tmp_called_instance_6 = par_self;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 30;
        tmp_call_result_5 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_6, const_str_plain_set_default_size, &PyTuple_GET_ITEM(const_tuple_int_pos_400_int_pos_500_tuple, 0));

        if (tmp_call_result_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 30;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_5);
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_7;
        PyObject *tmp_source_name_5;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_call_result_6;
        int tmp_truth_name_1;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

        if (unlikely(tmp_mvar_value_5 == NULL)) {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
        }

        if (tmp_mvar_value_5 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
            exception_tb = NULL;

            exception_lineno = 31;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_5 = tmp_mvar_value_5;
        tmp_called_instance_7 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_path);
        if (tmp_called_instance_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 31;
        tmp_call_result_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_7, const_str_plain_isfile, &PyTuple_GET_ITEM(const_tuple_str_digest_5cf6c02bf201b8ae03ca790b05911675_tuple, 0));

        Py_DECREF(tmp_called_instance_7);
        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_6);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_6);

            exception_lineno = 31;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_call_result_6);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_8;
            PyObject *tmp_call_result_7;
            CHECK_OBJECT(par_self);
            tmp_called_instance_8 = par_self;
            frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 32;
            tmp_call_result_7 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_8, const_str_plain_set_icon_from_file, &PyTuple_GET_ITEM(const_tuple_str_digest_5cf6c02bf201b8ae03ca790b05911675_tuple, 0));

            if (tmp_call_result_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 32;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_7);
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_9;
        PyObject *tmp_mvar_value_6;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_6 == NULL)) {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_6 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 34;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_9 = tmp_mvar_value_6;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 34;
        tmp_assign_source_2 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_9, const_str_plain_VBox, &PyTuple_GET_ITEM(const_tuple_false_int_0_tuple, 0));

        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 34;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_queryVbox == NULL);
        var_queryVbox = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_10;
        PyObject *tmp_mvar_value_7;
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_7 == NULL)) {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_7 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 36;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_10 = tmp_mvar_value_7;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 36;
        tmp_assign_source_3 = CALL_METHOD_NO_ARGS(tmp_called_instance_10, const_str_plain_TextView);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 36;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_queryTextView == NULL);
        var_queryTextView = tmp_assign_source_3;
    }
    {
        PyObject *tmp_called_instance_11;
        PyObject *tmp_call_result_8;
        CHECK_OBJECT(var_queryTextView);
        tmp_called_instance_11 = var_queryTextView;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 37;
        tmp_call_result_8 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_11, const_str_plain_set_editable, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

        if (tmp_call_result_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_8);
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_called_instance_12;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(var_queryTextView);
        tmp_called_instance_12 = var_queryTextView;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 38;
        tmp_assattr_name_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_12, const_str_plain_get_buffer);
        if (tmp_assattr_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 38;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_queryTextBuffer, tmp_assattr_name_2);
        Py_DECREF(tmp_assattr_name_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 38;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_13;
        PyObject *tmp_source_name_6;
        PyObject *tmp_call_result_9;
        CHECK_OBJECT(par_self);
        tmp_source_name_6 = par_self;
        tmp_called_instance_13 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_queryTextBuffer);
        if (tmp_called_instance_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 39;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 39;
        tmp_call_result_9 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_13, const_str_plain_set_text, &PyTuple_GET_ITEM(const_tuple_str_empty_tuple, 0));

        Py_DECREF(tmp_called_instance_13);
        if (tmp_call_result_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 39;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_9);
    }
    {
        PyObject *tmp_called_instance_14;
        PyObject *tmp_call_result_10;
        PyObject *tmp_args_element_name_5;
        CHECK_OBJECT(var_scrolledWin);
        tmp_called_instance_14 = var_scrolledWin;
        CHECK_OBJECT(var_queryTextView);
        tmp_args_element_name_5 = var_queryTextView;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 40;
        {
            PyObject *call_args[] = {tmp_args_element_name_5};
            tmp_call_result_10 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_14, const_str_plain_add_with_viewport, call_args);
        }

        if (tmp_call_result_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 40;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_10);
    }
    {
        PyObject *tmp_called_instance_15;
        PyObject *tmp_call_result_11;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_args_element_name_8;
        PyObject *tmp_args_element_name_9;
        CHECK_OBJECT(var_queryVbox);
        tmp_called_instance_15 = var_queryVbox;
        CHECK_OBJECT(var_scrolledWin);
        tmp_args_element_name_6 = var_scrolledWin;
        tmp_args_element_name_7 = Py_True;
        tmp_args_element_name_8 = Py_True;
        tmp_args_element_name_9 = const_int_0;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 41;
        {
            PyObject *call_args[] = {tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9};
            tmp_call_result_11 = CALL_METHOD_WITH_ARGS4(tmp_called_instance_15, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 41;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_11);
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_7;
        CHECK_OBJECT(par_parent);
        tmp_source_name_7 = par_parent;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_VERSION);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 43;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_INT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 43;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assattr_name_3;
            PyObject *tmp_called_instance_16;
            PyObject *tmp_mvar_value_8;
            PyObject *tmp_assattr_target_3;
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_8 == NULL)) {
                tmp_mvar_value_8 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_8 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 46;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_16 = tmp_mvar_value_8;
            frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 46;
            tmp_assattr_name_3 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_16, const_str_plain_HBox, &PyTuple_GET_ITEM(const_tuple_false_int_0_tuple, 0));

            if (tmp_assattr_name_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 46;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_assattr_target_3 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, const_str_plain_save_box, tmp_assattr_name_3);
            Py_DECREF(tmp_assattr_name_3);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 46;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_called_instance_17;
            PyObject *tmp_mvar_value_9;
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_9 == NULL)) {
                tmp_mvar_value_9 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_9 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 47;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_17 = tmp_mvar_value_9;
            frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 47;
            tmp_assign_source_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_17, const_str_plain_Button, &PyTuple_GET_ITEM(const_tuple_str_digest_e1b0ee6128ec7d73a301039aeecc93b8_tuple, 0));

            if (tmp_assign_source_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 47;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_querySave == NULL);
            var_querySave = tmp_assign_source_4;
        }
        {
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_8;
            PyObject *tmp_call_result_12;
            PyObject *tmp_args_element_name_10;
            PyObject *tmp_args_element_name_11;
            PyObject *tmp_source_name_9;
            CHECK_OBJECT(var_querySave);
            tmp_source_name_8 = var_querySave;
            tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_connect);
            if (tmp_called_name_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 48;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_10 = const_str_plain_clicked;
            CHECK_OBJECT(par_self);
            tmp_source_name_9 = par_self;
            tmp_args_element_name_11 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_saveToText);
            if (tmp_args_element_name_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_2);

                exception_lineno = 48;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 48;
            {
                PyObject *call_args[] = {tmp_args_element_name_10, tmp_args_element_name_11};
                tmp_call_result_12 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_2, call_args);
            }

            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_args_element_name_11);
            if (tmp_call_result_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 48;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_12);
        }
        {
            PyObject *tmp_called_instance_18;
            PyObject *tmp_call_result_13;
            CHECK_OBJECT(var_querySave);
            tmp_called_instance_18 = var_querySave;
            frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 49;
            tmp_call_result_13 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_18, const_str_plain_set_tooltip_text, &PyTuple_GET_ITEM(const_tuple_str_digest_6926c4cdc4f6ef08c6e616381df4872b_tuple, 0));

            if (tmp_call_result_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 49;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_13);
        }
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            PyObject *tmp_source_name_10;
            CHECK_OBJECT(par_parent);
            tmp_source_name_10 = par_parent;
            tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_VERSION);
            if (tmp_compexpr_left_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 50;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_2 = const_int_0;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_2, tmp_compexpr_right_2);
            Py_DECREF(tmp_compexpr_left_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 50;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
                goto branch_yes_3;
            } else {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_called_instance_19;
                PyObject *tmp_call_result_14;
                CHECK_OBJECT(var_querySave);
                tmp_called_instance_19 = var_querySave;
                frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 51;
                tmp_call_result_14 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_19, const_str_plain_set_sensitive, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

                if (tmp_call_result_14 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 51;
                    type_description_1 = "ooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_14);
            }
            branch_no_3:;
        }
        {
            PyObject *tmp_called_instance_20;
            PyObject *tmp_source_name_11;
            PyObject *tmp_call_result_15;
            PyObject *tmp_args_element_name_12;
            PyObject *tmp_args_element_name_13;
            PyObject *tmp_args_element_name_14;
            PyObject *tmp_args_element_name_15;
            CHECK_OBJECT(par_self);
            tmp_source_name_11 = par_self;
            tmp_called_instance_20 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_save_box);
            if (tmp_called_instance_20 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 52;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(var_querySave);
            tmp_args_element_name_12 = var_querySave;
            tmp_args_element_name_13 = Py_False;
            tmp_args_element_name_14 = Py_False;
            tmp_args_element_name_15 = const_int_0;
            frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 52;
            {
                PyObject *call_args[] = {tmp_args_element_name_12, tmp_args_element_name_13, tmp_args_element_name_14, tmp_args_element_name_15};
                tmp_call_result_15 = CALL_METHOD_WITH_ARGS4(tmp_called_instance_20, const_str_plain_pack_end, call_args);
            }

            Py_DECREF(tmp_called_instance_20);
            if (tmp_call_result_15 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 52;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_15);
        }
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_12;
            PyObject *tmp_call_result_16;
            PyObject *tmp_args_element_name_16;
            PyObject *tmp_source_name_13;
            PyObject *tmp_args_element_name_17;
            PyObject *tmp_args_element_name_18;
            PyObject *tmp_args_element_name_19;
            CHECK_OBJECT(var_queryVbox);
            tmp_source_name_12 = var_queryVbox;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_pack_start);
            if (tmp_called_name_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 53;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_source_name_13 = par_self;
            tmp_args_element_name_16 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain_save_box);
            if (tmp_args_element_name_16 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_3);

                exception_lineno = 53;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_17 = Py_False;
            tmp_args_element_name_18 = Py_False;
            tmp_args_element_name_19 = const_int_0;
            frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 53;
            {
                PyObject *call_args[] = {tmp_args_element_name_16, tmp_args_element_name_17, tmp_args_element_name_18, tmp_args_element_name_19};
                tmp_call_result_16 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_3, call_args);
            }

            Py_DECREF(tmp_called_name_3);
            Py_DECREF(tmp_args_element_name_16);
            if (tmp_call_result_16 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 53;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_16);
        }
        branch_no_2:;
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_called_instance_21;
        PyObject *tmp_mvar_value_10;
        PyObject *tmp_assattr_target_4;
        tmp_mvar_value_10 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_10 == NULL)) {
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_10 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 55;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_21 = tmp_mvar_value_10;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 55;
        tmp_assattr_name_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_21, const_str_plain_Label, &PyTuple_GET_ITEM(const_tuple_str_digest_6beb662f9e257c6046122b13fb912121_tuple, 0));

        if (tmp_assattr_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, const_str_plain_query_instr, tmp_assattr_name_4);
        Py_DECREF(tmp_assattr_name_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_name_4;
        PyObject *tmp_source_name_14;
        PyObject *tmp_call_result_17;
        PyObject *tmp_args_element_name_20;
        PyObject *tmp_source_name_15;
        PyObject *tmp_args_element_name_21;
        PyObject *tmp_args_element_name_22;
        PyObject *tmp_args_element_name_23;
        CHECK_OBJECT(var_queryVbox);
        tmp_source_name_14 = var_queryVbox;
        tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_14, const_str_plain_pack_start);
        if (tmp_called_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 56;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_15 = par_self;
        tmp_args_element_name_20 = LOOKUP_ATTRIBUTE(tmp_source_name_15, const_str_plain_query_instr);
        if (tmp_args_element_name_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_4);

            exception_lineno = 56;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_21 = Py_False;
        tmp_args_element_name_22 = Py_False;
        tmp_args_element_name_23 = const_int_0;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 56;
        {
            PyObject *call_args[] = {tmp_args_element_name_20, tmp_args_element_name_21, tmp_args_element_name_22, tmp_args_element_name_23};
            tmp_call_result_17 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_4, call_args);
        }

        Py_DECREF(tmp_called_name_4);
        Py_DECREF(tmp_args_element_name_20);
        if (tmp_call_result_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 56;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_17);
    }
    {
        PyObject *tmp_assattr_name_5;
        PyObject *tmp_called_instance_22;
        PyObject *tmp_mvar_value_11;
        PyObject *tmp_assattr_target_5;
        tmp_mvar_value_11 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_11 == NULL)) {
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_11 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 58;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_22 = tmp_mvar_value_11;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 58;
        tmp_assattr_name_5 = CALL_METHOD_NO_ARGS(tmp_called_instance_22, const_str_plain_Spinner);
        if (tmp_assattr_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 58;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_5, const_str_plain_spinQ, tmp_assattr_name_5);
        Py_DECREF(tmp_assattr_name_5);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 58;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_name_5;
        PyObject *tmp_source_name_16;
        PyObject *tmp_call_result_18;
        PyObject *tmp_args_element_name_24;
        PyObject *tmp_source_name_17;
        PyObject *tmp_args_element_name_25;
        PyObject *tmp_args_element_name_26;
        PyObject *tmp_args_element_name_27;
        CHECK_OBJECT(var_queryVbox);
        tmp_source_name_16 = var_queryVbox;
        tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_16, const_str_plain_pack_start);
        if (tmp_called_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 59;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_17 = par_self;
        tmp_args_element_name_24 = LOOKUP_ATTRIBUTE(tmp_source_name_17, const_str_plain_spinQ);
        if (tmp_args_element_name_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_5);

            exception_lineno = 59;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_25 = Py_False;
        tmp_args_element_name_26 = Py_False;
        tmp_args_element_name_27 = const_int_0;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 59;
        {
            PyObject *call_args[] = {tmp_args_element_name_24, tmp_args_element_name_25, tmp_args_element_name_26, tmp_args_element_name_27};
            tmp_call_result_18 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_5, call_args);
        }

        Py_DECREF(tmp_called_name_5);
        Py_DECREF(tmp_args_element_name_24);
        if (tmp_call_result_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 59;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_18);
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_instance_23;
        PyObject *tmp_source_name_18;
        CHECK_OBJECT(par_parent);
        tmp_source_name_18 = par_parent;
        tmp_called_instance_23 = LOOKUP_ATTRIBUTE(tmp_source_name_18, const_str_plain_dev_select);
        if (tmp_called_instance_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 60;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 60;
        tmp_assign_source_5 = CALL_METHOD_NO_ARGS(tmp_called_instance_23, const_str_plain_get_active);
        Py_DECREF(tmp_called_instance_23);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 60;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_index == NULL);
        var_index = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assattr_name_6;
        PyObject *tmp_called_instance_24;
        PyObject *tmp_mvar_value_12;
        PyObject *tmp_assattr_target_6;
        tmp_mvar_value_12 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_12 == NULL)) {
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_12 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 88;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_24 = tmp_mvar_value_12;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 88;
        tmp_assattr_name_6 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_24, const_str_plain_VBox, &PyTuple_GET_ITEM(const_tuple_false_int_0_tuple, 0));

        if (tmp_assattr_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 88;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_6, const_str_plain_passBoxQ, tmp_assattr_name_6);
        Py_DECREF(tmp_assattr_name_6);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 88;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_instance_25;
        PyObject *tmp_mvar_value_13;
        tmp_mvar_value_13 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_13 == NULL)) {
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_13 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 89;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_25 = tmp_mvar_value_13;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 89;
        tmp_assign_source_6 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_25, const_str_plain_HBox, &PyTuple_GET_ITEM(const_tuple_false_int_0_tuple, 0));

        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 89;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_hbox1 == NULL);
        var_hbox1 = tmp_assign_source_6;
    }
    {
        nuitka_bool tmp_condition_result_4;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_source_name_19;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        PyObject *tmp_source_name_20;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        PyObject *tmp_source_name_21;
        CHECK_OBJECT(par_parent);
        tmp_source_name_19 = par_parent;
        tmp_compexpr_left_3 = LOOKUP_ATTRIBUTE(tmp_source_name_19, const_str_plain_VERSION);
        if (tmp_compexpr_left_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_3 = const_int_pos_3;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        Py_DECREF(tmp_compexpr_left_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT(par_parent);
        tmp_source_name_20 = par_parent;
        tmp_compexpr_left_4 = LOOKUP_ATTRIBUTE(tmp_source_name_20, const_str_plain_VERSION);
        if (tmp_compexpr_left_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_4 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_4, tmp_compexpr_right_4);
        Py_DECREF(tmp_compexpr_left_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_parent);
        tmp_source_name_21 = par_parent;
        tmp_compexpr_left_5 = LOOKUP_ATTRIBUTE(tmp_source_name_21, const_str_plain_PBA_VERSION);
        if (tmp_compexpr_left_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_5 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_INT(tmp_compexpr_left_5, tmp_compexpr_right_5);
        Py_DECREF(tmp_compexpr_left_5);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_right_value_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_or_right_value_1 = tmp_and_left_value_1;
        and_end_1:;
        tmp_condition_result_4 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_4 = tmp_or_left_value_1;
        or_end_1:;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_assign_source_7;
            tmp_assign_source_7 = const_str_digest_36d32a0ddc1f6851748955a073c870dd;
            assert(var_plTxt == NULL);
            Py_INCREF(tmp_assign_source_7);
            var_plTxt = tmp_assign_source_7;
        }
        goto branch_end_4;
        branch_no_4:;
        {
            PyObject *tmp_assign_source_8;
            tmp_assign_source_8 = const_str_digest_73f4953da6c69be9cc1fa39da74e31a8;
            assert(var_plTxt == NULL);
            Py_INCREF(tmp_assign_source_8);
            var_plTxt = tmp_assign_source_8;
        }
        branch_end_4:;
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_called_instance_26;
        PyObject *tmp_mvar_value_14;
        PyObject *tmp_args_element_name_28;
        tmp_mvar_value_14 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_14 == NULL)) {
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_14 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 95;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_26 = tmp_mvar_value_14;
        CHECK_OBJECT(var_plTxt);
        tmp_args_element_name_28 = var_plTxt;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 95;
        {
            PyObject *call_args[] = {tmp_args_element_name_28};
            tmp_assign_source_9 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_26, const_str_plain_Label, call_args);
        }

        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_passLabel == NULL);
        var_passLabel = tmp_assign_source_9;
    }
    {
        PyObject *tmp_called_instance_27;
        PyObject *tmp_call_result_19;
        CHECK_OBJECT(var_passLabel);
        tmp_called_instance_27 = var_passLabel;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 96;
        tmp_call_result_19 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_27, const_str_plain_set_width_chars, &PyTuple_GET_ITEM(const_tuple_int_pos_20_tuple, 0));

        if (tmp_call_result_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 96;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_19);
    }
    {
        PyObject *tmp_assattr_name_7;
        PyObject *tmp_called_instance_28;
        PyObject *tmp_mvar_value_15;
        PyObject *tmp_assattr_target_7;
        tmp_mvar_value_15 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_15 == NULL)) {
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_15 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 97;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_28 = tmp_mvar_value_15;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 97;
        tmp_assattr_name_7 = CALL_METHOD_NO_ARGS(tmp_called_instance_28, const_str_plain_Entry);
        if (tmp_assattr_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 97;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_7 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_7, const_str_plain_queryPass, tmp_assattr_name_7);
        Py_DECREF(tmp_assattr_name_7);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 97;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_29;
        PyObject *tmp_source_name_22;
        PyObject *tmp_call_result_20;
        CHECK_OBJECT(par_self);
        tmp_source_name_22 = par_self;
        tmp_called_instance_29 = LOOKUP_ATTRIBUTE(tmp_source_name_22, const_str_plain_queryPass);
        if (tmp_called_instance_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 98;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 98;
        tmp_call_result_20 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_29, const_str_plain_set_visibility, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

        Py_DECREF(tmp_called_instance_29);
        if (tmp_call_result_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 98;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_20);
    }
    {
        PyObject *tmp_assattr_name_8;
        PyObject *tmp_called_instance_30;
        PyObject *tmp_mvar_value_16;
        PyObject *tmp_assattr_target_8;
        tmp_mvar_value_16 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_16 == NULL)) {
            tmp_mvar_value_16 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_16 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 100;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_30 = tmp_mvar_value_16;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 100;
        tmp_assattr_name_8 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_30, const_str_plain_Button, &PyTuple_GET_ITEM(const_tuple_str_plain_Submit_tuple, 0));

        if (tmp_assattr_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 100;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_8 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_8, const_str_plain_submitPass, tmp_assattr_name_8);
        Py_DECREF(tmp_assattr_name_8);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 100;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_name_6;
        PyObject *tmp_source_name_23;
        PyObject *tmp_source_name_24;
        PyObject *tmp_call_result_21;
        PyObject *tmp_args_element_name_29;
        PyObject *tmp_args_element_name_30;
        PyObject *tmp_source_name_25;
        PyObject *tmp_args_element_name_31;
        CHECK_OBJECT(par_self);
        tmp_source_name_24 = par_self;
        tmp_source_name_23 = LOOKUP_ATTRIBUTE(tmp_source_name_24, const_str_plain_submitPass);
        if (tmp_source_name_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 101;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_6 = LOOKUP_ATTRIBUTE(tmp_source_name_23, const_str_plain_connect);
        Py_DECREF(tmp_source_name_23);
        if (tmp_called_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 101;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_29 = const_str_plain_clicked;
        CHECK_OBJECT(par_self);
        tmp_source_name_25 = par_self;
        tmp_args_element_name_30 = LOOKUP_ATTRIBUTE(tmp_source_name_25, const_str_plain_queryAuth);
        if (tmp_args_element_name_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_6);

            exception_lineno = 101;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_parent);
        tmp_args_element_name_31 = par_parent;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 101;
        {
            PyObject *call_args[] = {tmp_args_element_name_29, tmp_args_element_name_30, tmp_args_element_name_31};
            tmp_call_result_21 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_6, call_args);
        }

        Py_DECREF(tmp_called_name_6);
        Py_DECREF(tmp_args_element_name_30);
        if (tmp_call_result_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 101;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_21);
    }
    {
        nuitka_bool tmp_condition_result_5;
        int tmp_or_left_truth_2;
        nuitka_bool tmp_or_left_value_2;
        nuitka_bool tmp_or_right_value_2;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        PyObject *tmp_source_name_26;
        PyObject *tmp_compexpr_left_7;
        PyObject *tmp_compexpr_right_7;
        PyObject *tmp_source_name_27;
        CHECK_OBJECT(par_parent);
        tmp_source_name_26 = par_parent;
        tmp_compexpr_left_6 = LOOKUP_ATTRIBUTE(tmp_source_name_26, const_str_plain_VERSION);
        if (tmp_compexpr_left_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 102;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_6 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_6, tmp_compexpr_right_6);
        Py_DECREF(tmp_compexpr_left_6);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 102;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_2 = tmp_or_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_2 == 1) {
            goto or_left_2;
        } else {
            goto or_right_2;
        }
        or_right_2:;
        CHECK_OBJECT(par_parent);
        tmp_source_name_27 = par_parent;
        tmp_compexpr_left_7 = LOOKUP_ATTRIBUTE(tmp_source_name_27, const_str_plain_PBA_VERSION);
        if (tmp_compexpr_left_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 102;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_7 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_7, tmp_compexpr_right_7);
        Py_DECREF(tmp_compexpr_left_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 102;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_5 = tmp_or_right_value_2;
        goto or_end_2;
        or_left_2:;
        tmp_condition_result_5 = tmp_or_left_value_2;
        or_end_2:;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            PyObject *tmp_called_instance_31;
            PyObject *tmp_source_name_28;
            PyObject *tmp_call_result_22;
            CHECK_OBJECT(par_self);
            tmp_source_name_28 = par_self;
            tmp_called_instance_31 = LOOKUP_ATTRIBUTE(tmp_source_name_28, const_str_plain_submitPass);
            if (tmp_called_instance_31 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 103;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 103;
            tmp_call_result_22 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_31, const_str_plain_set_sensitive, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

            Py_DECREF(tmp_called_instance_31);
            if (tmp_call_result_22 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 103;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_22);
        }
        branch_no_5:;
    }
    {
        PyObject *tmp_called_instance_32;
        PyObject *tmp_call_result_23;
        PyObject *tmp_args_element_name_32;
        PyObject *tmp_args_element_name_33;
        PyObject *tmp_args_element_name_34;
        PyObject *tmp_args_element_name_35;
        CHECK_OBJECT(var_hbox1);
        tmp_called_instance_32 = var_hbox1;
        CHECK_OBJECT(var_passLabel);
        tmp_args_element_name_32 = var_passLabel;
        tmp_args_element_name_33 = Py_False;
        tmp_args_element_name_34 = Py_False;
        tmp_args_element_name_35 = const_int_0;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 104;
        {
            PyObject *call_args[] = {tmp_args_element_name_32, tmp_args_element_name_33, tmp_args_element_name_34, tmp_args_element_name_35};
            tmp_call_result_23 = CALL_METHOD_WITH_ARGS4(tmp_called_instance_32, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 104;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_23);
    }
    {
        PyObject *tmp_called_name_7;
        PyObject *tmp_source_name_29;
        PyObject *tmp_call_result_24;
        PyObject *tmp_args_element_name_36;
        PyObject *tmp_source_name_30;
        PyObject *tmp_args_element_name_37;
        PyObject *tmp_args_element_name_38;
        PyObject *tmp_args_element_name_39;
        CHECK_OBJECT(var_hbox1);
        tmp_source_name_29 = var_hbox1;
        tmp_called_name_7 = LOOKUP_ATTRIBUTE(tmp_source_name_29, const_str_plain_pack_start);
        if (tmp_called_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_30 = par_self;
        tmp_args_element_name_36 = LOOKUP_ATTRIBUTE(tmp_source_name_30, const_str_plain_queryPass);
        if (tmp_args_element_name_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_7);

            exception_lineno = 105;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_37 = Py_True;
        tmp_args_element_name_38 = Py_True;
        tmp_args_element_name_39 = const_int_0;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 105;
        {
            PyObject *call_args[] = {tmp_args_element_name_36, tmp_args_element_name_37, tmp_args_element_name_38, tmp_args_element_name_39};
            tmp_call_result_24 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_7, call_args);
        }

        Py_DECREF(tmp_called_name_7);
        Py_DECREF(tmp_args_element_name_36);
        if (tmp_call_result_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_24);
    }
    {
        PyObject *tmp_called_name_8;
        PyObject *tmp_source_name_31;
        PyObject *tmp_call_result_25;
        PyObject *tmp_args_element_name_40;
        PyObject *tmp_source_name_32;
        PyObject *tmp_args_element_name_41;
        PyObject *tmp_args_element_name_42;
        PyObject *tmp_args_element_name_43;
        CHECK_OBJECT(var_hbox1);
        tmp_source_name_31 = var_hbox1;
        tmp_called_name_8 = LOOKUP_ATTRIBUTE(tmp_source_name_31, const_str_plain_pack_start);
        if (tmp_called_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 106;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_32 = par_self;
        tmp_args_element_name_40 = LOOKUP_ATTRIBUTE(tmp_source_name_32, const_str_plain_submitPass);
        if (tmp_args_element_name_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_8);

            exception_lineno = 106;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_41 = Py_False;
        tmp_args_element_name_42 = Py_False;
        tmp_args_element_name_43 = const_int_0;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 106;
        {
            PyObject *call_args[] = {tmp_args_element_name_40, tmp_args_element_name_41, tmp_args_element_name_42, tmp_args_element_name_43};
            tmp_call_result_25 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_8, call_args);
        }

        Py_DECREF(tmp_called_name_8);
        Py_DECREF(tmp_args_element_name_40);
        if (tmp_call_result_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 106;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_25);
    }
    {
        PyObject *tmp_called_instance_33;
        PyObject *tmp_source_name_33;
        PyObject *tmp_call_result_26;
        PyObject *tmp_args_element_name_44;
        PyObject *tmp_args_element_name_45;
        PyObject *tmp_args_element_name_46;
        PyObject *tmp_args_element_name_47;
        CHECK_OBJECT(par_self);
        tmp_source_name_33 = par_self;
        tmp_called_instance_33 = LOOKUP_ATTRIBUTE(tmp_source_name_33, const_str_plain_passBoxQ);
        if (tmp_called_instance_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_hbox1);
        tmp_args_element_name_44 = var_hbox1;
        tmp_args_element_name_45 = Py_False;
        tmp_args_element_name_46 = Py_False;
        tmp_args_element_name_47 = const_int_0;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 107;
        {
            PyObject *call_args[] = {tmp_args_element_name_44, tmp_args_element_name_45, tmp_args_element_name_46, tmp_args_element_name_47};
            tmp_call_result_26 = CALL_METHOD_WITH_ARGS4(tmp_called_instance_33, const_str_plain_pack_start, call_args);
        }

        Py_DECREF(tmp_called_instance_33);
        if (tmp_call_result_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_26);
    }
    {
        PyObject *tmp_called_name_9;
        PyObject *tmp_source_name_34;
        PyObject *tmp_call_result_27;
        PyObject *tmp_args_element_name_48;
        PyObject *tmp_source_name_35;
        PyObject *tmp_args_element_name_49;
        PyObject *tmp_args_element_name_50;
        PyObject *tmp_args_element_name_51;
        CHECK_OBJECT(var_queryVbox);
        tmp_source_name_34 = var_queryVbox;
        tmp_called_name_9 = LOOKUP_ATTRIBUTE(tmp_source_name_34, const_str_plain_pack_start);
        if (tmp_called_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_35 = par_self;
        tmp_args_element_name_48 = LOOKUP_ATTRIBUTE(tmp_source_name_35, const_str_plain_passBoxQ);
        if (tmp_args_element_name_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_9);

            exception_lineno = 108;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_49 = Py_False;
        tmp_args_element_name_50 = Py_False;
        tmp_args_element_name_51 = const_int_0;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 108;
        {
            PyObject *call_args[] = {tmp_args_element_name_48, tmp_args_element_name_49, tmp_args_element_name_50, tmp_args_element_name_51};
            tmp_call_result_27 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_9, call_args);
        }

        Py_DECREF(tmp_called_name_9);
        Py_DECREF(tmp_args_element_name_48);
        if (tmp_call_result_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_27);
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_called_instance_34;
        PyObject *tmp_mvar_value_17;
        tmp_mvar_value_17 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_17 == NULL)) {
            tmp_mvar_value_17 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_17 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 110;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_34 = tmp_mvar_value_17;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 110;
        tmp_assign_source_10 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_34, const_str_plain_HBox, &PyTuple_GET_ITEM(const_tuple_false_int_0_tuple, 0));

        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_spBoxQ == NULL);
        var_spBoxQ = tmp_assign_source_10;
    }
    {
        PyObject *tmp_assattr_name_9;
        PyObject *tmp_called_instance_35;
        PyObject *tmp_mvar_value_18;
        PyObject *tmp_assattr_target_9;
        tmp_mvar_value_18 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_18 == NULL)) {
            tmp_mvar_value_18 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_18 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 111;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_35 = tmp_mvar_value_18;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 111;
        tmp_assattr_name_9 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_35, const_str_plain_CheckButton, &PyTuple_GET_ITEM(const_tuple_str_digest_ada44e9efab8574d9851f2401c97964e_tuple, 0));

        if (tmp_assattr_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 111;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_9 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_9, const_str_plain_showPassQ, tmp_assattr_name_9);
        Py_DECREF(tmp_assattr_name_9);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 111;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_name_10;
        PyObject *tmp_source_name_36;
        PyObject *tmp_source_name_37;
        PyObject *tmp_call_result_28;
        PyObject *tmp_args_element_name_52;
        PyObject *tmp_args_element_name_53;
        PyObject *tmp_source_name_38;
        CHECK_OBJECT(par_self);
        tmp_source_name_37 = par_self;
        tmp_source_name_36 = LOOKUP_ATTRIBUTE(tmp_source_name_37, const_str_plain_showPassQ);
        if (tmp_source_name_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 112;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_10 = LOOKUP_ATTRIBUTE(tmp_source_name_36, const_str_plain_connect);
        Py_DECREF(tmp_source_name_36);
        if (tmp_called_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 112;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_52 = const_str_plain_toggled;
        CHECK_OBJECT(par_self);
        tmp_source_name_38 = par_self;
        tmp_args_element_name_53 = LOOKUP_ATTRIBUTE(tmp_source_name_38, const_str_plain_showPass_toggled);
        if (tmp_args_element_name_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_10);

            exception_lineno = 112;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 112;
        {
            PyObject *call_args[] = {tmp_args_element_name_52, tmp_args_element_name_53};
            tmp_call_result_28 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_10, call_args);
        }

        Py_DECREF(tmp_called_name_10);
        Py_DECREF(tmp_args_element_name_53);
        if (tmp_call_result_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 112;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_28);
    }
    {
        PyObject *tmp_called_instance_36;
        PyObject *tmp_source_name_39;
        PyObject *tmp_call_result_29;
        CHECK_OBJECT(par_self);
        tmp_source_name_39 = par_self;
        tmp_called_instance_36 = LOOKUP_ATTRIBUTE(tmp_source_name_39, const_str_plain_showPassQ);
        if (tmp_called_instance_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 113;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 113;
        tmp_call_result_29 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_36, const_str_plain_set_active, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

        Py_DECREF(tmp_called_instance_36);
        if (tmp_call_result_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 113;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_29);
    }
    {
        PyObject *tmp_called_name_11;
        PyObject *tmp_source_name_40;
        PyObject *tmp_call_result_30;
        PyObject *tmp_args_element_name_54;
        PyObject *tmp_source_name_41;
        PyObject *tmp_args_element_name_55;
        PyObject *tmp_args_element_name_56;
        PyObject *tmp_args_element_name_57;
        CHECK_OBJECT(var_spBoxQ);
        tmp_source_name_40 = var_spBoxQ;
        tmp_called_name_11 = LOOKUP_ATTRIBUTE(tmp_source_name_40, const_str_plain_pack_end);
        if (tmp_called_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_41 = par_self;
        tmp_args_element_name_54 = LOOKUP_ATTRIBUTE(tmp_source_name_41, const_str_plain_showPassQ);
        if (tmp_args_element_name_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_11);

            exception_lineno = 114;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_55 = Py_False;
        tmp_args_element_name_56 = Py_False;
        tmp_args_element_name_57 = const_int_0;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 114;
        {
            PyObject *call_args[] = {tmp_args_element_name_54, tmp_args_element_name_55, tmp_args_element_name_56, tmp_args_element_name_57};
            tmp_call_result_30 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_11, call_args);
        }

        Py_DECREF(tmp_called_name_11);
        Py_DECREF(tmp_args_element_name_54);
        if (tmp_call_result_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_30);
    }
    {
        PyObject *tmp_called_instance_37;
        PyObject *tmp_source_name_42;
        PyObject *tmp_call_result_31;
        PyObject *tmp_args_element_name_58;
        PyObject *tmp_args_element_name_59;
        PyObject *tmp_args_element_name_60;
        PyObject *tmp_args_element_name_61;
        CHECK_OBJECT(par_self);
        tmp_source_name_42 = par_self;
        tmp_called_instance_37 = LOOKUP_ATTRIBUTE(tmp_source_name_42, const_str_plain_passBoxQ);
        if (tmp_called_instance_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_spBoxQ);
        tmp_args_element_name_58 = var_spBoxQ;
        tmp_args_element_name_59 = Py_False;
        tmp_args_element_name_60 = Py_False;
        tmp_args_element_name_61 = const_int_0;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 115;
        {
            PyObject *call_args[] = {tmp_args_element_name_58, tmp_args_element_name_59, tmp_args_element_name_60, tmp_args_element_name_61};
            tmp_call_result_31 = CALL_METHOD_WITH_ARGS4(tmp_called_instance_37, const_str_plain_pack_start, call_args);
        }

        Py_DECREF(tmp_called_instance_37);
        if (tmp_call_result_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_31);
    }
    {
        nuitka_bool tmp_condition_result_6;
        int tmp_or_left_truth_3;
        nuitka_bool tmp_or_left_value_3;
        nuitka_bool tmp_or_right_value_3;
        PyObject *tmp_compexpr_left_8;
        PyObject *tmp_compexpr_right_8;
        PyObject *tmp_left_name_1;
        PyObject *tmp_source_name_43;
        PyObject *tmp_right_name_1;
        int tmp_and_left_truth_2;
        nuitka_bool tmp_and_left_value_2;
        nuitka_bool tmp_and_right_value_2;
        PyObject *tmp_compexpr_left_9;
        PyObject *tmp_compexpr_right_9;
        PyObject *tmp_source_name_44;
        PyObject *tmp_compexpr_left_10;
        PyObject *tmp_compexpr_right_10;
        PyObject *tmp_source_name_45;
        CHECK_OBJECT(par_parent);
        tmp_source_name_43 = par_parent;
        tmp_left_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_43, const_str_plain_VERSION);
        if (tmp_left_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 117;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = const_int_pos_3;
        tmp_compexpr_left_8 = BINARY_OPERATION_MOD_OBJECT_INT(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_left_name_1);
        if (tmp_compexpr_left_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 117;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_8 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_8, tmp_compexpr_right_8);
        Py_DECREF(tmp_compexpr_left_8);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 117;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_3 = tmp_or_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_3 == 1) {
            goto or_left_3;
        } else {
            goto or_right_3;
        }
        or_right_3:;
        CHECK_OBJECT(par_parent);
        tmp_source_name_44 = par_parent;
        tmp_compexpr_left_9 = LOOKUP_ATTRIBUTE(tmp_source_name_44, const_str_plain_VERSION);
        if (tmp_compexpr_left_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 117;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_9 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_9, tmp_compexpr_right_9);
        Py_DECREF(tmp_compexpr_left_9);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 117;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_2 == 1) {
            goto and_right_2;
        } else {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT(par_parent);
        tmp_source_name_45 = par_parent;
        tmp_compexpr_left_10 = LOOKUP_ATTRIBUTE(tmp_source_name_45, const_str_plain_PBA_VERSION);
        if (tmp_compexpr_left_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 117;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_10 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_INT(tmp_compexpr_left_10, tmp_compexpr_right_10);
        Py_DECREF(tmp_compexpr_left_10);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 117;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_right_value_3 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_or_right_value_3 = tmp_and_left_value_2;
        and_end_2:;
        tmp_condition_result_6 = tmp_or_right_value_3;
        goto or_end_3;
        or_left_3:;
        tmp_condition_result_6 = tmp_or_left_value_3;
        or_end_3:;
        if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_assign_source_11;
            PyObject *tmp_called_instance_38;
            PyObject *tmp_mvar_value_19;
            tmp_mvar_value_19 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_19 == NULL)) {
                tmp_mvar_value_19 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_19 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 118;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_38 = tmp_mvar_value_19;
            frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 118;
            tmp_assign_source_11 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_38, const_str_plain_HBox, &PyTuple_GET_ITEM(const_tuple_false_int_0_tuple, 0));

            if (tmp_assign_source_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 118;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_checkBoxQ == NULL);
            var_checkBoxQ = tmp_assign_source_11;
        }
        {
            PyObject *tmp_assattr_name_10;
            PyObject *tmp_called_instance_39;
            PyObject *tmp_mvar_value_20;
            PyObject *tmp_assattr_target_10;
            tmp_mvar_value_20 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_20 == NULL)) {
                tmp_mvar_value_20 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_20 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 119;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_39 = tmp_mvar_value_20;
            frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 119;
            tmp_assattr_name_10 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_39, const_str_plain_CheckButton, &PyTuple_GET_ITEM(const_tuple_str_digest_094c260cf4b4cdff973eb04653534ba7_tuple, 0));

            if (tmp_assattr_name_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 119;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_assattr_target_10 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_10, const_str_plain_passReadQ, tmp_assattr_name_10);
            Py_DECREF(tmp_assattr_name_10);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 119;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_called_name_12;
            PyObject *tmp_source_name_46;
            PyObject *tmp_source_name_47;
            PyObject *tmp_call_result_32;
            PyObject *tmp_args_element_name_62;
            PyObject *tmp_args_element_name_63;
            PyObject *tmp_source_name_48;
            CHECK_OBJECT(par_self);
            tmp_source_name_47 = par_self;
            tmp_source_name_46 = LOOKUP_ATTRIBUTE(tmp_source_name_47, const_str_plain_passReadQ);
            if (tmp_source_name_46 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 120;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_called_name_12 = LOOKUP_ATTRIBUTE(tmp_source_name_46, const_str_plain_connect);
            Py_DECREF(tmp_source_name_46);
            if (tmp_called_name_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 120;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_62 = const_str_plain_toggled;
            CHECK_OBJECT(par_self);
            tmp_source_name_48 = par_self;
            tmp_args_element_name_63 = LOOKUP_ATTRIBUTE(tmp_source_name_48, const_str_plain_check_toggled);
            if (tmp_args_element_name_63 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_12);

                exception_lineno = 120;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 120;
            {
                PyObject *call_args[] = {tmp_args_element_name_62, tmp_args_element_name_63};
                tmp_call_result_32 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_12, call_args);
            }

            Py_DECREF(tmp_called_name_12);
            Py_DECREF(tmp_args_element_name_63);
            if (tmp_call_result_32 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 120;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_32);
        }
        {
            PyObject *tmp_called_name_13;
            PyObject *tmp_source_name_49;
            PyObject *tmp_call_result_33;
            PyObject *tmp_args_element_name_64;
            PyObject *tmp_source_name_50;
            PyObject *tmp_args_element_name_65;
            PyObject *tmp_args_element_name_66;
            PyObject *tmp_args_element_name_67;
            CHECK_OBJECT(var_checkBoxQ);
            tmp_source_name_49 = var_checkBoxQ;
            tmp_called_name_13 = LOOKUP_ATTRIBUTE(tmp_source_name_49, const_str_plain_pack_end);
            if (tmp_called_name_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 121;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_source_name_50 = par_self;
            tmp_args_element_name_64 = LOOKUP_ATTRIBUTE(tmp_source_name_50, const_str_plain_passReadQ);
            if (tmp_args_element_name_64 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_13);

                exception_lineno = 121;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_65 = Py_False;
            tmp_args_element_name_66 = Py_False;
            tmp_args_element_name_67 = const_int_0;
            frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 121;
            {
                PyObject *call_args[] = {tmp_args_element_name_64, tmp_args_element_name_65, tmp_args_element_name_66, tmp_args_element_name_67};
                tmp_call_result_33 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_13, call_args);
            }

            Py_DECREF(tmp_called_name_13);
            Py_DECREF(tmp_args_element_name_64);
            if (tmp_call_result_33 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 121;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_33);
        }
        {
            PyObject *tmp_called_instance_40;
            PyObject *tmp_source_name_51;
            PyObject *tmp_call_result_34;
            PyObject *tmp_args_element_name_68;
            PyObject *tmp_args_element_name_69;
            PyObject *tmp_args_element_name_70;
            PyObject *tmp_args_element_name_71;
            CHECK_OBJECT(par_self);
            tmp_source_name_51 = par_self;
            tmp_called_instance_40 = LOOKUP_ATTRIBUTE(tmp_source_name_51, const_str_plain_passBoxQ);
            if (tmp_called_instance_40 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 122;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(var_checkBoxQ);
            tmp_args_element_name_68 = var_checkBoxQ;
            tmp_args_element_name_69 = Py_False;
            tmp_args_element_name_70 = Py_False;
            tmp_args_element_name_71 = const_int_0;
            frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 122;
            {
                PyObject *call_args[] = {tmp_args_element_name_68, tmp_args_element_name_69, tmp_args_element_name_70, tmp_args_element_name_71};
                tmp_call_result_34 = CALL_METHOD_WITH_ARGS4(tmp_called_instance_40, const_str_plain_pack_start, call_args);
            }

            Py_DECREF(tmp_called_instance_40);
            if (tmp_call_result_34 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 122;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_34);
        }
        branch_no_6:;
    }
    {
        PyObject *tmp_called_name_14;
        PyObject *tmp_source_name_52;
        PyObject *tmp_source_name_53;
        PyObject *tmp_call_result_35;
        PyObject *tmp_args_element_name_72;
        PyObject *tmp_source_name_54;
        CHECK_OBJECT(par_self);
        tmp_source_name_53 = par_self;
        tmp_source_name_52 = LOOKUP_ATTRIBUTE(tmp_source_name_53, const_str_plain_queryTextBuffer);
        if (tmp_source_name_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 125;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_14 = LOOKUP_ATTRIBUTE(tmp_source_name_52, const_str_plain_set_text);
        Py_DECREF(tmp_source_name_52);
        if (tmp_called_name_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 125;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_54 = par_self;
        tmp_args_element_name_72 = LOOKUP_ATTRIBUTE(tmp_source_name_54, const_str_plain_queryWinText);
        if (tmp_args_element_name_72 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_14);

            exception_lineno = 125;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 125;
        tmp_call_result_35 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_14, tmp_args_element_name_72);
        Py_DECREF(tmp_called_name_14);
        Py_DECREF(tmp_args_element_name_72);
        if (tmp_call_result_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 125;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_35);
    }
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_compexpr_left_11;
        PyObject *tmp_compexpr_right_11;
        PyObject *tmp_source_name_55;
        CHECK_OBJECT(par_parent);
        tmp_source_name_55 = par_parent;
        tmp_compexpr_left_11 = LOOKUP_ATTRIBUTE(tmp_source_name_55, const_str_plain_VERSION);
        if (tmp_compexpr_left_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 127;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_11 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_INT(tmp_compexpr_left_11, tmp_compexpr_right_11);
        Py_DECREF(tmp_compexpr_left_11);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 127;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_7 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
        branch_yes_7:;
        {
            PyObject *tmp_called_instance_41;
            PyObject *tmp_source_name_56;
            PyObject *tmp_call_result_36;
            CHECK_OBJECT(par_self);
            tmp_source_name_56 = par_self;
            tmp_called_instance_41 = LOOKUP_ATTRIBUTE(tmp_source_name_56, const_str_plain_queryPass);
            if (tmp_called_instance_41 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 128;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 128;
            tmp_call_result_36 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_41, const_str_plain_set_text, &PyTuple_GET_ITEM(const_tuple_str_empty_tuple, 0));

            Py_DECREF(tmp_called_instance_41);
            if (tmp_call_result_36 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 128;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_36);
        }
        branch_no_7:;
    }
    {
        PyObject *tmp_called_instance_42;
        PyObject *tmp_call_result_37;
        PyObject *tmp_args_element_name_73;
        CHECK_OBJECT(par_self);
        tmp_called_instance_42 = par_self;
        CHECK_OBJECT(var_queryVbox);
        tmp_args_element_name_73 = var_queryVbox;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 130;
        {
            PyObject *call_args[] = {tmp_args_element_name_73};
            tmp_call_result_37 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_42, const_str_plain_add, call_args);
        }

        if (tmp_call_result_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 130;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_37);
    }
    {
        PyObject *tmp_called_instance_43;
        PyObject *tmp_call_result_38;
        CHECK_OBJECT(par_self);
        tmp_called_instance_43 = par_self;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 131;
        tmp_call_result_38 = CALL_METHOD_NO_ARGS(tmp_called_instance_43, const_str_plain_show_all);
        if (tmp_call_result_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 131;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_38);
    }
    {
        PyObject *tmp_called_instance_44;
        PyObject *tmp_source_name_57;
        PyObject *tmp_call_result_39;
        CHECK_OBJECT(par_self);
        tmp_source_name_57 = par_self;
        tmp_called_instance_44 = LOOKUP_ATTRIBUTE(tmp_source_name_57, const_str_plain_spinQ);
        if (tmp_called_instance_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 133;
        tmp_call_result_39 = CALL_METHOD_NO_ARGS(tmp_called_instance_44, const_str_plain_hide);
        Py_DECREF(tmp_called_instance_44);
        if (tmp_call_result_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_39);
    }
    {
        PyObject *tmp_called_instance_45;
        PyObject *tmp_call_result_40;
        CHECK_OBJECT(par_parent);
        tmp_called_instance_45 = par_parent;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 134;
        tmp_call_result_40 = CALL_METHOD_NO_ARGS(tmp_called_instance_45, const_str_plain_disable_menu);
        if (tmp_call_result_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 134;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_40);
    }
    {
        PyObject *tmp_called_name_15;
        PyObject *tmp_source_name_58;
        PyObject *tmp_call_result_41;
        PyObject *tmp_args_element_name_74;
        PyObject *tmp_args_element_name_75;
        PyObject *tmp_source_name_59;
        PyObject *tmp_args_element_name_76;
        CHECK_OBJECT(par_self);
        tmp_source_name_58 = par_self;
        tmp_called_name_15 = LOOKUP_ATTRIBUTE(tmp_source_name_58, const_str_plain_connect);
        if (tmp_called_name_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 135;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_74 = const_str_plain_destroy;
        CHECK_OBJECT(par_self);
        tmp_source_name_59 = par_self;
        tmp_args_element_name_75 = LOOKUP_ATTRIBUTE(tmp_source_name_59, const_str_plain_onDestroy);
        if (tmp_args_element_name_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_15);

            exception_lineno = 135;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_parent);
        tmp_args_element_name_76 = par_parent;
        frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame.f_lineno = 135;
        {
            PyObject *call_args[] = {tmp_args_element_name_74, tmp_args_element_name_75, tmp_args_element_name_76};
            tmp_call_result_41 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_15, call_args);
        }

        Py_DECREF(tmp_called_name_15);
        Py_DECREF(tmp_args_element_name_75);
        if (tmp_call_result_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 135;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_41);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4bf6f748b6bffa8bded57eec73a6cb75);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4bf6f748b6bffa8bded57eec73a6cb75);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4bf6f748b6bffa8bded57eec73a6cb75, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_4bf6f748b6bffa8bded57eec73a6cb75->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4bf6f748b6bffa8bded57eec73a6cb75, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4bf6f748b6bffa8bded57eec73a6cb75,
        type_description_1,
        par_self,
        par_parent,
        par_queryTextList,
        var_index,
        var_passLabel,
        var_hbox1,
        var_spBoxQ,
        var_querySave,
        var_plTxt,
        var_queryVbox,
        var_scrolledWin,
        var_checkBoxQ,
        var_queryTextView
    );


    // Release cached frame.
    if (frame_4bf6f748b6bffa8bded57eec73a6cb75 == cache_frame_4bf6f748b6bffa8bded57eec73a6cb75) {
        Py_DECREF(frame_4bf6f748b6bffa8bded57eec73a6cb75);
    }
    cache_frame_4bf6f748b6bffa8bded57eec73a6cb75 = NULL;

    assertFrameObject(frame_4bf6f748b6bffa8bded57eec73a6cb75);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_1___init__);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_index);
    Py_DECREF(var_index);
    var_index = NULL;

    CHECK_OBJECT((PyObject *)var_passLabel);
    Py_DECREF(var_passLabel);
    var_passLabel = NULL;

    CHECK_OBJECT((PyObject *)var_hbox1);
    Py_DECREF(var_hbox1);
    var_hbox1 = NULL;

    CHECK_OBJECT((PyObject *)var_spBoxQ);
    Py_DECREF(var_spBoxQ);
    var_spBoxQ = NULL;

    Py_XDECREF(var_querySave);
    var_querySave = NULL;

    CHECK_OBJECT((PyObject *)var_plTxt);
    Py_DECREF(var_plTxt);
    var_plTxt = NULL;

    CHECK_OBJECT((PyObject *)var_queryVbox);
    Py_DECREF(var_queryVbox);
    var_queryVbox = NULL;

    CHECK_OBJECT((PyObject *)var_scrolledWin);
    Py_DECREF(var_scrolledWin);
    var_scrolledWin = NULL;

    Py_XDECREF(var_checkBoxQ);
    var_checkBoxQ = NULL;

    CHECK_OBJECT((PyObject *)var_queryTextView);
    Py_DECREF(var_queryTextView);
    var_queryTextView = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_index);
    var_index = NULL;

    Py_XDECREF(var_passLabel);
    var_passLabel = NULL;

    Py_XDECREF(var_hbox1);
    var_hbox1 = NULL;

    Py_XDECREF(var_spBoxQ);
    var_spBoxQ = NULL;

    Py_XDECREF(var_querySave);
    var_querySave = NULL;

    Py_XDECREF(var_plTxt);
    var_plTxt = NULL;

    Py_XDECREF(var_queryVbox);
    var_queryVbox = NULL;

    Py_XDECREF(var_scrolledWin);
    var_scrolledWin = NULL;

    Py_XDECREF(var_checkBoxQ);
    var_checkBoxQ = NULL;

    Py_XDECREF(var_queryTextView);
    var_queryTextView = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_1___init__);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_queryTextList);
    Py_DECREF(par_queryTextList);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_queryTextList);
    Py_DECREF(par_queryTextList);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_2_onDestroy(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_button = python_pars[1];
    PyObject *par_parent = python_pars[2];
    struct Nuitka_FrameObject *frame_b13925c23bd35212453f4b8800203e07;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_b13925c23bd35212453f4b8800203e07 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME(cache_frame_b13925c23bd35212453f4b8800203e07, codeobj_b13925c23bd35212453f4b8800203e07, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_b13925c23bd35212453f4b8800203e07 = cache_frame_b13925c23bd35212453f4b8800203e07;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_b13925c23bd35212453f4b8800203e07);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_b13925c23bd35212453f4b8800203e07) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_parent);
        tmp_called_instance_1 = par_parent;
        frame_b13925c23bd35212453f4b8800203e07->m_frame.f_lineno = 138;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_enable_menu);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 138;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b13925c23bd35212453f4b8800203e07);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b13925c23bd35212453f4b8800203e07);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b13925c23bd35212453f4b8800203e07, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_b13925c23bd35212453f4b8800203e07->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b13925c23bd35212453f4b8800203e07, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b13925c23bd35212453f4b8800203e07,
        type_description_1,
        par_self,
        par_button,
        par_parent
    );


    // Release cached frame.
    if (frame_b13925c23bd35212453f4b8800203e07 == cache_frame_b13925c23bd35212453f4b8800203e07) {
        Py_DECREF(frame_b13925c23bd35212453f4b8800203e07);
    }
    cache_frame_b13925c23bd35212453f4b8800203e07 = NULL;

    assertFrameObject(frame_b13925c23bd35212453f4b8800203e07);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_2_onDestroy);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_3_check_toggled(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_checkbox = python_pars[1];
    PyObject *var_is_checked = NULL;
    struct Nuitka_FrameObject *frame_df0270df38e2bd58819d05387e4bda45;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_df0270df38e2bd58819d05387e4bda45 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_df0270df38e2bd58819d05387e4bda45, codeobj_df0270df38e2bd58819d05387e4bda45, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_df0270df38e2bd58819d05387e4bda45 = cache_frame_df0270df38e2bd58819d05387e4bda45;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_df0270df38e2bd58819d05387e4bda45);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_df0270df38e2bd58819d05387e4bda45) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_verify);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_verify);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 236 ], 35, 0);
            exception_tb = NULL;

            exception_lineno = 141;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_licCheck);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 141;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_parent);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_parent);
        }

        if (tmp_mvar_value_2 == NULL) {
            Py_DECREF(tmp_called_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 1269 ], 35, 0);
            exception_tb = NULL;

            exception_lineno = 141;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_1 = tmp_mvar_value_2;
        frame_df0270df38e2bd58819d05387e4bda45->m_frame.f_lineno = 141;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_called_name_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 141;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT(par_checkbox);
        tmp_called_instance_1 = par_checkbox;
        frame_df0270df38e2bd58819d05387e4bda45->m_frame.f_lineno = 142;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_get_active);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 142;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_is_checked == NULL);
        var_is_checked = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_is_checked);
        tmp_truth_name_1 = CHECK_IF_TRUE(var_is_checked);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 143;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_source_name_2;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT(par_self);
            tmp_source_name_2 = par_self;
            tmp_called_instance_2 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_queryPass);
            if (tmp_called_instance_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 144;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_df0270df38e2bd58819d05387e4bda45->m_frame.f_lineno = 144;
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_set_text, &PyTuple_GET_ITEM(const_tuple_str_empty_tuple, 0));

            Py_DECREF(tmp_called_instance_2);
            if (tmp_call_result_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 144;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_2);
        }
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_source_name_3;
            PyObject *tmp_call_result_3;
            CHECK_OBJECT(par_self);
            tmp_source_name_3 = par_self;
            tmp_called_instance_3 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_queryPass);
            if (tmp_called_instance_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 145;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_df0270df38e2bd58819d05387e4bda45->m_frame.f_lineno = 145;
            tmp_call_result_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_3, const_str_plain_set_sensitive, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

            Py_DECREF(tmp_called_instance_3);
            if (tmp_call_result_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 145;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_3);
        }
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_source_name_4;
            PyObject *tmp_call_result_4;
            CHECK_OBJECT(par_self);
            tmp_source_name_4 = par_self;
            tmp_called_instance_4 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_showPassQ);
            if (tmp_called_instance_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 146;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_df0270df38e2bd58819d05387e4bda45->m_frame.f_lineno = 146;
            tmp_call_result_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_set_active, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

            Py_DECREF(tmp_called_instance_4);
            if (tmp_call_result_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 146;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_4);
        }
        {
            PyObject *tmp_called_instance_5;
            PyObject *tmp_source_name_5;
            PyObject *tmp_call_result_5;
            CHECK_OBJECT(par_self);
            tmp_source_name_5 = par_self;
            tmp_called_instance_5 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_showPassQ);
            if (tmp_called_instance_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 147;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_df0270df38e2bd58819d05387e4bda45->m_frame.f_lineno = 147;
            tmp_call_result_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_5, const_str_plain_set_sensitive, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

            Py_DECREF(tmp_called_instance_5);
            if (tmp_call_result_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 147;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_5);
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_called_instance_6;
            PyObject *tmp_source_name_6;
            PyObject *tmp_call_result_6;
            CHECK_OBJECT(par_self);
            tmp_source_name_6 = par_self;
            tmp_called_instance_6 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_queryPass);
            if (tmp_called_instance_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 149;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_df0270df38e2bd58819d05387e4bda45->m_frame.f_lineno = 149;
            tmp_call_result_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_6, const_str_plain_set_sensitive, &PyTuple_GET_ITEM(const_tuple_true_tuple, 0));

            Py_DECREF(tmp_called_instance_6);
            if (tmp_call_result_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 149;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_6);
        }
        {
            PyObject *tmp_called_instance_7;
            PyObject *tmp_source_name_7;
            PyObject *tmp_call_result_7;
            CHECK_OBJECT(par_self);
            tmp_source_name_7 = par_self;
            tmp_called_instance_7 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_showPassQ);
            if (tmp_called_instance_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 150;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_df0270df38e2bd58819d05387e4bda45->m_frame.f_lineno = 150;
            tmp_call_result_7 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_7, const_str_plain_set_sensitive, &PyTuple_GET_ITEM(const_tuple_true_tuple, 0));

            Py_DECREF(tmp_called_instance_7);
            if (tmp_call_result_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 150;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_7);
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_df0270df38e2bd58819d05387e4bda45);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_df0270df38e2bd58819d05387e4bda45);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_df0270df38e2bd58819d05387e4bda45, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_df0270df38e2bd58819d05387e4bda45->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_df0270df38e2bd58819d05387e4bda45, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_df0270df38e2bd58819d05387e4bda45,
        type_description_1,
        par_self,
        par_checkbox,
        var_is_checked
    );


    // Release cached frame.
    if (frame_df0270df38e2bd58819d05387e4bda45 == cache_frame_df0270df38e2bd58819d05387e4bda45) {
        Py_DECREF(frame_df0270df38e2bd58819d05387e4bda45);
    }
    cache_frame_df0270df38e2bd58819d05387e4bda45 = NULL;

    assertFrameObject(frame_df0270df38e2bd58819d05387e4bda45);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_3_check_toggled);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_is_checked);
    Py_DECREF(var_is_checked);
    var_is_checked = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_is_checked);
    var_is_checked = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_3_check_toggled);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_checkbox);
    Py_DECREF(par_checkbox);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_checkbox);
    Py_DECREF(par_checkbox);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_4_showPass_toggled(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_args = python_pars[1];
    struct Nuitka_FrameObject *frame_5213d8c40e0b2640946d2d8ea73686ce;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_5213d8c40e0b2640946d2d8ea73686ce = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME(cache_frame_5213d8c40e0b2640946d2d8ea73686ce, codeobj_5213d8c40e0b2640946d2d8ea73686ce, module_dialogs, sizeof(void *)+sizeof(void *));
    frame_5213d8c40e0b2640946d2d8ea73686ce = cache_frame_5213d8c40e0b2640946d2d8ea73686ce;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_5213d8c40e0b2640946d2d8ea73686ce);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_5213d8c40e0b2640946d2d8ea73686ce) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_verify);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_verify);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 236 ], 35, 0);
            exception_tb = NULL;

            exception_lineno = 153;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_licCheck);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 153;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_parent);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_parent);
        }

        if (tmp_mvar_value_2 == NULL) {
            Py_DECREF(tmp_called_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 1269 ], 35, 0);
            exception_tb = NULL;

            exception_lineno = 153;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_1 = tmp_mvar_value_2;
        frame_5213d8c40e0b2640946d2d8ea73686ce->m_frame.f_lineno = 153;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_called_name_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 153;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_2;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_showPassQ);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_5213d8c40e0b2640946d2d8ea73686ce->m_frame.f_lineno = 154;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_get_active);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_2);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_2);

            exception_lineno = 154;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_call_result_2);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_source_name_3;
            PyObject *tmp_call_result_3;
            CHECK_OBJECT(par_self);
            tmp_source_name_3 = par_self;
            tmp_called_instance_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_queryPass);
            if (tmp_called_instance_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 155;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            frame_5213d8c40e0b2640946d2d8ea73686ce->m_frame.f_lineno = 155;
            tmp_call_result_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_set_visibility, &PyTuple_GET_ITEM(const_tuple_true_tuple, 0));

            Py_DECREF(tmp_called_instance_2);
            if (tmp_call_result_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 155;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_3);
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_source_name_4;
            PyObject *tmp_call_result_4;
            CHECK_OBJECT(par_self);
            tmp_source_name_4 = par_self;
            tmp_called_instance_3 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_queryPass);
            if (tmp_called_instance_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 157;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            frame_5213d8c40e0b2640946d2d8ea73686ce->m_frame.f_lineno = 157;
            tmp_call_result_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_3, const_str_plain_set_visibility, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

            Py_DECREF(tmp_called_instance_3);
            if (tmp_call_result_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 157;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_4);
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5213d8c40e0b2640946d2d8ea73686ce);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5213d8c40e0b2640946d2d8ea73686ce);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5213d8c40e0b2640946d2d8ea73686ce, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_5213d8c40e0b2640946d2d8ea73686ce->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5213d8c40e0b2640946d2d8ea73686ce, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5213d8c40e0b2640946d2d8ea73686ce,
        type_description_1,
        par_self,
        par_args
    );


    // Release cached frame.
    if (frame_5213d8c40e0b2640946d2d8ea73686ce == cache_frame_5213d8c40e0b2640946d2d8ea73686ce) {
        Py_DECREF(frame_5213d8c40e0b2640946d2d8ea73686ce);
    }
    cache_frame_5213d8c40e0b2640946d2d8ea73686ce = NULL;

    assertFrameObject(frame_5213d8c40e0b2640946d2d8ea73686ce);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_4_showPass_toggled);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_5_msg_err(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_msg = python_pars[1];
    PyObject *var_res = NULL;
    PyObject *var_message = NULL;
    struct Nuitka_FrameObject *frame_9730951a27bd19498aa102cb6a04e842;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_9730951a27bd19498aa102cb6a04e842 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_9730951a27bd19498aa102cb6a04e842, codeobj_9730951a27bd19498aa102cb6a04e842, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_9730951a27bd19498aa102cb6a04e842 = cache_frame_9730951a27bd19498aa102cb6a04e842;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9730951a27bd19498aa102cb6a04e842);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9730951a27bd19498aa102cb6a04e842) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 160;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_MessageDialog);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 160;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_2 == NULL) {
            Py_DECREF(tmp_called_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 160;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_2;
        tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_MESSAGE_ERROR);
        if (tmp_dict_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 160;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = const_str_plain_type;
        tmp_kw_name_1 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1);
        Py_DECREF(tmp_dict_value_1);
        assert(!(tmp_res != 0));
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_3 == NULL) {
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_kw_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 160;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_3;
        tmp_dict_value_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_BUTTONS_OK);
        if (tmp_dict_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_kw_name_1);

            exception_lineno = 160;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = const_str_plain_buttons;
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2);
        Py_DECREF(tmp_dict_value_2);
        assert(!(tmp_res != 0));
        CHECK_OBJECT(par_self);
        tmp_dict_value_3 = par_self;
        tmp_dict_key_3 = const_str_plain_parent;
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3);
        assert(!(tmp_res != 0));
        frame_9730951a27bd19498aa102cb6a04e842->m_frame.f_lineno = 160;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_KEYARGS(tmp_called_name_1, tmp_kw_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_kw_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 160;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_message == NULL);
        var_message = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT(var_message);
        tmp_called_instance_1 = var_message;
        CHECK_OBJECT(par_msg);
        tmp_args_element_name_1 = par_msg;
        frame_9730951a27bd19498aa102cb6a04e842->m_frame.f_lineno = 162;
        {
            PyObject *call_args[] = {tmp_args_element_name_1};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_set_markup, call_args);
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT(var_message);
        tmp_called_instance_2 = var_message;
        frame_9730951a27bd19498aa102cb6a04e842->m_frame.f_lineno = 163;
        tmp_assign_source_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_run);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 163;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_res == NULL);
        var_res = tmp_assign_source_2;
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(var_message);
        tmp_called_instance_3 = var_message;
        frame_9730951a27bd19498aa102cb6a04e842->m_frame.f_lineno = 164;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_3, const_str_plain_destroy);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9730951a27bd19498aa102cb6a04e842);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9730951a27bd19498aa102cb6a04e842);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9730951a27bd19498aa102cb6a04e842, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_9730951a27bd19498aa102cb6a04e842->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9730951a27bd19498aa102cb6a04e842, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9730951a27bd19498aa102cb6a04e842,
        type_description_1,
        par_self,
        par_msg,
        var_res,
        var_message
    );


    // Release cached frame.
    if (frame_9730951a27bd19498aa102cb6a04e842 == cache_frame_9730951a27bd19498aa102cb6a04e842) {
        Py_DECREF(frame_9730951a27bd19498aa102cb6a04e842);
    }
    cache_frame_9730951a27bd19498aa102cb6a04e842 = NULL;

    assertFrameObject(frame_9730951a27bd19498aa102cb6a04e842);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_5_msg_err);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_res);
    Py_DECREF(var_res);
    var_res = NULL;

    CHECK_OBJECT((PyObject *)var_message);
    Py_DECREF(var_message);
    var_message = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_res);
    var_res = NULL;

    Py_XDECREF(var_message);
    var_message = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_5_msg_err);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_msg);
    Py_DECREF(par_msg);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_msg);
    Py_DECREF(par_msg);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_6_queryAuth(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_button = python_pars[1];
    PyObject *par_parent = python_pars[2];
    PyObject *var_pw_strip = NULL;
    PyObject *var_index = NULL;
    PyObject *var_t1 = NULL;
    PyObject *var_user = NULL;
    PyObject *var_m_na = NULL;
    PyObject *var_salt = NULL;
    struct Nuitka_FrameObject *frame_4819b15a430890c766193c4b26ec24f6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_4819b15a430890c766193c4b26ec24f6 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_4819b15a430890c766193c4b26ec24f6, codeobj_4819b15a430890c766193c4b26ec24f6, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_4819b15a430890c766193c4b26ec24f6 = cache_frame_4819b15a430890c766193c4b26ec24f6;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_4819b15a430890c766193c4b26ec24f6);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_4819b15a430890c766193c4b26ec24f6) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_verify);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_verify);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 236 ], 35, 0);
            exception_tb = NULL;

            exception_lineno = 167;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_parent);
        tmp_args_element_name_1 = par_parent;
        frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 167;
        {
            PyObject *call_args[] = {tmp_args_element_name_1};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_licCheck, call_args);
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 167;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
        }

        if (tmp_mvar_value_2 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
            exception_tb = NULL;

            exception_lineno = 168;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_2;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_sub);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_2 = const_str_digest_29fe972ddfd3c3ace7d88aee7a9cd77e;
        tmp_args_element_name_3 = const_str_empty;
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_queryPass);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 168;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 168;
        tmp_args_element_name_4 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_get_text);
        Py_DECREF(tmp_called_instance_2);
        if (tmp_args_element_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 168;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 168;
        {
            PyObject *call_args[] = {tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_1, call_args);
        }

        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_4);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        assert(var_pw_strip == NULL);
        var_pw_strip = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_3;
        PyObject *tmp_operand_name_1;
        int tmp_and_left_truth_2;
        PyObject *tmp_and_left_value_2;
        PyObject *tmp_and_right_value_2;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_source_name_4;
        int tmp_and_left_truth_3;
        PyObject *tmp_and_left_value_3;
        PyObject *tmp_and_right_value_3;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_source_name_5;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        PyObject *tmp_source_name_6;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_source_name_7;
        CHECK_OBJECT(par_self);
        tmp_source_name_3 = par_self;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_queryPass);
        if (tmp_called_instance_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 169;
        tmp_compexpr_left_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_3, const_str_plain_get_text);
        Py_DECREF(tmp_called_instance_3);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_str_empty;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_parent);
        tmp_source_name_4 = par_parent;
        tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_VERSION);
        if (tmp_compexpr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = const_int_pos_3;
        tmp_or_left_value_1 = RICH_COMPARE_EQ_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        Py_DECREF(tmp_compexpr_left_2);
        if (tmp_or_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_or_left_value_1);

            exception_lineno = 169;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        Py_DECREF(tmp_or_left_value_1);
        CHECK_OBJECT(par_parent);
        tmp_source_name_5 = par_parent;
        tmp_compexpr_left_3 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_VERSION);
        if (tmp_compexpr_left_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_3 = const_int_pos_1;
        tmp_and_left_value_3 = RICH_COMPARE_EQ_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        Py_DECREF(tmp_compexpr_left_3);
        if (tmp_and_left_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_truth_3 = CHECK_IF_TRUE(tmp_and_left_value_3);
        if (tmp_and_left_truth_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_and_left_value_3);

            exception_lineno = 169;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_3 == 1) {
            goto and_right_3;
        } else {
            goto and_left_3;
        }
        and_right_3:;
        Py_DECREF(tmp_and_left_value_3);
        CHECK_OBJECT(par_parent);
        tmp_source_name_6 = par_parent;
        tmp_compexpr_left_4 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_PBA_VERSION);
        if (tmp_compexpr_left_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_4 = const_int_pos_1;
        tmp_and_right_value_3 = RICH_COMPARE_NOTEQ_OBJECT_OBJECT(tmp_compexpr_left_4, tmp_compexpr_right_4);
        Py_DECREF(tmp_compexpr_left_4);
        if (tmp_and_right_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = tmp_and_right_value_3;
        goto and_end_3;
        and_left_3:;
        tmp_or_right_value_1 = tmp_and_left_value_3;
        and_end_3:;
        tmp_and_left_value_2 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_and_left_value_2 = tmp_or_left_value_1;
        or_end_1:;
        tmp_and_left_truth_2 = CHECK_IF_TRUE(tmp_and_left_value_2);
        if (tmp_and_left_truth_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_and_left_value_2);

            exception_lineno = 169;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_2 == 1) {
            goto and_right_2;
        } else {
            goto and_left_2;
        }
        and_right_2:;
        Py_DECREF(tmp_and_left_value_2);
        CHECK_OBJECT(par_self);
        tmp_source_name_7 = par_self;
        tmp_called_instance_4 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_passReadQ);
        if (tmp_called_instance_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 169;
        tmp_and_right_value_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_4, const_str_plain_get_active);
        Py_DECREF(tmp_called_instance_4);
        if (tmp_and_right_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_1 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_operand_name_1 = tmp_and_left_value_2;
        and_end_2:;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        Py_DECREF(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_5;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT(par_self);
            tmp_called_instance_5 = par_self;
            frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 170;
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_5, const_str_plain_msg_err, &PyTuple_GET_ITEM(const_tuple_str_digest_8482c425481a7392528c91276c4d7ae3_tuple, 0));

            if (tmp_call_result_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 170;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_2);
        }
        tmp_return_value = Py_None;
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_2;
            int tmp_and_left_truth_4;
            nuitka_bool tmp_and_left_value_4;
            nuitka_bool tmp_and_right_value_4;
            PyObject *tmp_compexpr_left_5;
            PyObject *tmp_compexpr_right_5;
            PyObject *tmp_operand_name_2;
            int tmp_and_left_truth_5;
            PyObject *tmp_and_left_value_5;
            PyObject *tmp_and_right_value_5;
            int tmp_or_left_truth_2;
            PyObject *tmp_or_left_value_2;
            PyObject *tmp_or_right_value_2;
            PyObject *tmp_compexpr_left_6;
            PyObject *tmp_compexpr_right_6;
            PyObject *tmp_source_name_8;
            int tmp_and_left_truth_6;
            PyObject *tmp_and_left_value_6;
            PyObject *tmp_and_right_value_6;
            PyObject *tmp_compexpr_left_7;
            PyObject *tmp_compexpr_right_7;
            PyObject *tmp_source_name_9;
            PyObject *tmp_compexpr_left_8;
            PyObject *tmp_compexpr_right_8;
            PyObject *tmp_source_name_10;
            PyObject *tmp_called_instance_6;
            PyObject *tmp_source_name_11;
            CHECK_OBJECT(var_pw_strip);
            tmp_compexpr_left_5 = var_pw_strip;
            tmp_compexpr_right_5 = const_str_empty;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_5, tmp_compexpr_right_5);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 172;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            tmp_and_left_value_4 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_and_left_truth_4 = tmp_and_left_value_4 == NUITKA_BOOL_TRUE ? 1 : 0;
            if (tmp_and_left_truth_4 == 1) {
                goto and_right_4;
            } else {
                goto and_left_4;
            }
            and_right_4:;
            CHECK_OBJECT(par_parent);
            tmp_source_name_8 = par_parent;
            tmp_compexpr_left_6 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_VERSION);
            if (tmp_compexpr_left_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 172;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_6 = const_int_pos_3;
            tmp_or_left_value_2 = RICH_COMPARE_EQ_OBJECT_OBJECT(tmp_compexpr_left_6, tmp_compexpr_right_6);
            Py_DECREF(tmp_compexpr_left_6);
            if (tmp_or_left_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 172;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            tmp_or_left_truth_2 = CHECK_IF_TRUE(tmp_or_left_value_2);
            if (tmp_or_left_truth_2 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_or_left_value_2);

                exception_lineno = 172;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            if (tmp_or_left_truth_2 == 1) {
                goto or_left_2;
            } else {
                goto or_right_2;
            }
            or_right_2:;
            Py_DECREF(tmp_or_left_value_2);
            CHECK_OBJECT(par_parent);
            tmp_source_name_9 = par_parent;
            tmp_compexpr_left_7 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_VERSION);
            if (tmp_compexpr_left_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 172;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_7 = const_int_pos_1;
            tmp_and_left_value_6 = RICH_COMPARE_EQ_OBJECT_OBJECT(tmp_compexpr_left_7, tmp_compexpr_right_7);
            Py_DECREF(tmp_compexpr_left_7);
            if (tmp_and_left_value_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 172;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            tmp_and_left_truth_6 = CHECK_IF_TRUE(tmp_and_left_value_6);
            if (tmp_and_left_truth_6 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_and_left_value_6);

                exception_lineno = 172;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            if (tmp_and_left_truth_6 == 1) {
                goto and_right_6;
            } else {
                goto and_left_6;
            }
            and_right_6:;
            Py_DECREF(tmp_and_left_value_6);
            CHECK_OBJECT(par_parent);
            tmp_source_name_10 = par_parent;
            tmp_compexpr_left_8 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_PBA_VERSION);
            if (tmp_compexpr_left_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 172;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_8 = const_int_pos_1;
            tmp_and_right_value_6 = RICH_COMPARE_NOTEQ_OBJECT_OBJECT(tmp_compexpr_left_8, tmp_compexpr_right_8);
            Py_DECREF(tmp_compexpr_left_8);
            if (tmp_and_right_value_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 172;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            tmp_or_right_value_2 = tmp_and_right_value_6;
            goto and_end_6;
            and_left_6:;
            tmp_or_right_value_2 = tmp_and_left_value_6;
            and_end_6:;
            tmp_and_left_value_5 = tmp_or_right_value_2;
            goto or_end_2;
            or_left_2:;
            tmp_and_left_value_5 = tmp_or_left_value_2;
            or_end_2:;
            tmp_and_left_truth_5 = CHECK_IF_TRUE(tmp_and_left_value_5);
            if (tmp_and_left_truth_5 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_and_left_value_5);

                exception_lineno = 172;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            if (tmp_and_left_truth_5 == 1) {
                goto and_right_5;
            } else {
                goto and_left_5;
            }
            and_right_5:;
            Py_DECREF(tmp_and_left_value_5);
            CHECK_OBJECT(par_self);
            tmp_source_name_11 = par_self;
            tmp_called_instance_6 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_passReadQ);
            if (tmp_called_instance_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 172;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 172;
            tmp_and_right_value_5 = CALL_METHOD_NO_ARGS(tmp_called_instance_6, const_str_plain_get_active);
            Py_DECREF(tmp_called_instance_6);
            if (tmp_and_right_value_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 172;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            tmp_operand_name_2 = tmp_and_right_value_5;
            goto and_end_5;
            and_left_5:;
            tmp_operand_name_2 = tmp_and_left_value_5;
            and_end_5:;
            tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
            Py_DECREF(tmp_operand_name_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 172;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            tmp_and_right_value_4 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_2 = tmp_and_right_value_4;
            goto and_end_4;
            and_left_4:;
            tmp_condition_result_2 = tmp_and_left_value_4;
            and_end_4:;
            if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
                goto branch_yes_2;
            } else {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_called_instance_7;
                PyObject *tmp_call_result_3;
                CHECK_OBJECT(par_self);
                tmp_called_instance_7 = par_self;
                frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 173;
                tmp_call_result_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_7, const_str_plain_msg_err, &PyTuple_GET_ITEM(const_tuple_str_digest_84ba3144e8a4c8824551fdd8d0fe5bde_tuple, 0));

                if (tmp_call_result_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 173;
                    type_description_1 = "ooooooooNo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_3);
            }
            tmp_return_value = Py_None;
            Py_INCREF(tmp_return_value);
            goto frame_return_exit_1;
            branch_no_2:;
        }
        branch_end_1:;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_8;
        PyObject *tmp_source_name_12;
        CHECK_OBJECT(par_parent);
        tmp_source_name_12 = par_parent;
        tmp_called_instance_8 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_dev_select);
        if (tmp_called_instance_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 177;
        tmp_assign_source_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_8, const_str_plain_get_active);
        Py_DECREF(tmp_called_instance_8);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        assert(var_index == NULL);
        var_index = tmp_assign_source_2;
    }
    {
        PyObject *tmp_called_instance_9;
        PyObject *tmp_source_name_13;
        PyObject *tmp_call_result_4;
        CHECK_OBJECT(par_self);
        tmp_source_name_13 = par_self;
        tmp_called_instance_9 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain_showPassQ);
        if (tmp_called_instance_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 178;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 178;
        tmp_call_result_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_9, const_str_plain_set_active, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

        Py_DECREF(tmp_called_instance_9);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 178;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_14;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_parent);
        tmp_source_name_14 = par_parent;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_14, const_str_plain_devs_list);
        if (tmp_subscribed_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 179;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_1 = var_index;
        tmp_assattr_name_1 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
        Py_DECREF(tmp_subscribed_name_1);
        if (tmp_assattr_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 179;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_parent);
        tmp_assattr_target_1 = par_parent;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_devname, tmp_assattr_name_1);
        Py_DECREF(tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 179;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_15;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_source_name_16;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
        }

        if (tmp_mvar_value_3 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
            exception_tb = NULL;

            exception_lineno = 181;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_15 = tmp_mvar_value_3;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_15, const_str_plain_search);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 181;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_5 = const_str_digest_3208df8276e003cd29da26b8243ad24d;
        CHECK_OBJECT(par_self);
        tmp_source_name_16 = par_self;
        tmp_args_element_name_6 = LOOKUP_ATTRIBUTE(tmp_source_name_16, const_str_plain_queryWinText);
        if (tmp_args_element_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 181;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 181;
        {
            PyObject *call_args[] = {tmp_args_element_name_5, tmp_args_element_name_6};
            tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_2, call_args);
        }

        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_6);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 181;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        assert(var_m_na == NULL);
        var_m_na = tmp_assign_source_3;
    }
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_m_na);
        tmp_truth_name_1 = CHECK_IF_TRUE(var_m_na);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 182;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_called_instance_10;
            PyObject *tmp_call_result_5;
            CHECK_OBJECT(par_self);
            tmp_called_instance_10 = par_self;
            frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 183;
            tmp_call_result_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_10, const_str_plain_msg_err, &PyTuple_GET_ITEM(const_tuple_str_digest_6cee2b564da3c577324783ad168aeab9_tuple, 0));

            if (tmp_call_result_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 183;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_5);
        }
        tmp_return_value = Py_None;
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
        branch_no_3:;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_source_name_17;
        PyObject *tmp_subscript_name_2;
        CHECK_OBJECT(par_parent);
        tmp_source_name_17 = par_parent;
        tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_17, const_str_plain_salt_list);
        if (tmp_subscribed_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_2 = var_index;
        tmp_assign_source_4 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_2, tmp_subscript_name_2);
        Py_DECREF(tmp_subscribed_name_2);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        assert(var_salt == NULL);
        var_salt = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_source_name_18;
        PyObject *tmp_subscript_name_3;
        CHECK_OBJECT(par_parent);
        tmp_source_name_18 = par_parent;
        tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_18, const_str_plain_user_list);
        if (tmp_subscribed_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 207;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_3 = var_index;
        tmp_assign_source_5 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_3, tmp_subscript_name_3);
        Py_DECREF(tmp_subscribed_name_3);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 207;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        assert(var_user == NULL);
        var_user = tmp_assign_source_5;
    }
    {
        PyObject *tmp_called_instance_11;
        PyObject *tmp_source_name_19;
        PyObject *tmp_call_result_6;
        CHECK_OBJECT(par_self);
        tmp_source_name_19 = par_self;
        tmp_called_instance_11 = LOOKUP_ATTRIBUTE(tmp_source_name_19, const_str_plain_queryPass);
        if (tmp_called_instance_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 213;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 213;
        tmp_call_result_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_11, const_str_plain_set_sensitive, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

        Py_DECREF(tmp_called_instance_11);
        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 213;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_6);
    }
    {
        PyObject *tmp_called_instance_12;
        PyObject *tmp_source_name_20;
        PyObject *tmp_call_result_7;
        CHECK_OBJECT(par_self);
        tmp_source_name_20 = par_self;
        tmp_called_instance_12 = LOOKUP_ATTRIBUTE(tmp_source_name_20, const_str_plain_submitPass);
        if (tmp_called_instance_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 214;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 214;
        tmp_call_result_7 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_12, const_str_plain_set_sensitive, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

        Py_DECREF(tmp_called_instance_12);
        if (tmp_call_result_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 214;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_7);
    }
    {
        PyObject *tmp_called_instance_13;
        PyObject *tmp_source_name_21;
        PyObject *tmp_call_result_8;
        CHECK_OBJECT(par_self);
        tmp_source_name_21 = par_self;
        tmp_called_instance_13 = LOOKUP_ATTRIBUTE(tmp_source_name_21, const_str_plain_query_instr);
        if (tmp_called_instance_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 215;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 215;
        tmp_call_result_8 = CALL_METHOD_NO_ARGS(tmp_called_instance_13, const_str_plain_hide);
        Py_DECREF(tmp_called_instance_13);
        if (tmp_call_result_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 215;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_8);
    }
    {
        PyObject *tmp_called_instance_14;
        PyObject *tmp_source_name_22;
        PyObject *tmp_call_result_9;
        CHECK_OBJECT(par_self);
        tmp_source_name_22 = par_self;
        tmp_called_instance_14 = LOOKUP_ATTRIBUTE(tmp_source_name_22, const_str_plain_showPassQ);
        if (tmp_called_instance_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 216;
        tmp_call_result_9 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_14, const_str_plain_set_sensitive, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

        Py_DECREF(tmp_called_instance_14);
        if (tmp_call_result_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_9);
    }
    {
        nuitka_bool tmp_condition_result_4;
        int tmp_or_left_truth_3;
        nuitka_bool tmp_or_left_value_3;
        nuitka_bool tmp_or_right_value_3;
        PyObject *tmp_compexpr_left_9;
        PyObject *tmp_compexpr_right_9;
        PyObject *tmp_source_name_23;
        PyObject *tmp_compexpr_left_10;
        PyObject *tmp_compexpr_right_10;
        PyObject *tmp_source_name_24;
        CHECK_OBJECT(par_parent);
        tmp_source_name_23 = par_parent;
        tmp_compexpr_left_9 = LOOKUP_ATTRIBUTE(tmp_source_name_23, const_str_plain_VERSION);
        if (tmp_compexpr_left_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 217;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_9 = const_int_pos_3;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_9, tmp_compexpr_right_9);
        Py_DECREF(tmp_compexpr_left_9);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 217;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_3 = tmp_or_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_3 == 1) {
            goto or_left_3;
        } else {
            goto or_right_3;
        }
        or_right_3:;
        CHECK_OBJECT(par_parent);
        tmp_source_name_24 = par_parent;
        tmp_compexpr_left_10 = LOOKUP_ATTRIBUTE(tmp_source_name_24, const_str_plain_PBA_VERSION);
        if (tmp_compexpr_left_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 217;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_10 = const_int_pos_2;
        tmp_res = RICH_COMPARE_BOOL_GTE_OBJECT_INT(tmp_compexpr_left_10, tmp_compexpr_right_10);
        Py_DECREF(tmp_compexpr_left_10);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 217;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_4 = tmp_or_right_value_3;
        goto or_end_3;
        or_left_3:;
        tmp_condition_result_4 = tmp_or_left_value_3;
        or_end_3:;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_called_instance_15;
            PyObject *tmp_source_name_25;
            PyObject *tmp_call_result_10;
            CHECK_OBJECT(par_self);
            tmp_source_name_25 = par_self;
            tmp_called_instance_15 = LOOKUP_ATTRIBUTE(tmp_source_name_25, const_str_plain_passReadQ);
            if (tmp_called_instance_15 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 218;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 218;
            tmp_call_result_10 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_15, const_str_plain_set_sensitive, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

            Py_DECREF(tmp_called_instance_15);
            if (tmp_call_result_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 218;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_10);
        }
        branch_no_4:;
    }
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_compexpr_left_11;
        PyObject *tmp_compexpr_right_11;
        PyObject *tmp_source_name_26;
        CHECK_OBJECT(par_parent);
        tmp_source_name_26 = par_parent;
        tmp_compexpr_left_11 = LOOKUP_ATTRIBUTE(tmp_source_name_26, const_str_plain_VERSION);
        if (tmp_compexpr_left_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_11 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_INT(tmp_compexpr_left_11, tmp_compexpr_right_11);
        Py_DECREF(tmp_compexpr_left_11);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_5 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            PyObject *tmp_called_instance_16;
            PyObject *tmp_source_name_27;
            PyObject *tmp_call_result_11;
            CHECK_OBJECT(par_self);
            tmp_source_name_27 = par_self;
            tmp_called_instance_16 = LOOKUP_ATTRIBUTE(tmp_source_name_27, const_str_plain_save_box);
            if (tmp_called_instance_16 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 220;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 220;
            tmp_call_result_11 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_16, const_str_plain_set_sensitive, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

            Py_DECREF(tmp_called_instance_16);
            if (tmp_call_result_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 220;
                type_description_1 = "ooooooooNo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_11);
        }
        branch_no_5:;
    }
    {
        PyObject *tmp_called_instance_17;
        PyObject *tmp_call_result_12;
        PyObject *tmp_args_element_name_7;
        CHECK_OBJECT(par_self);
        tmp_called_instance_17 = par_self;
        CHECK_OBJECT(par_parent);
        tmp_args_element_name_7 = par_parent;
        frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 225;
        {
            PyObject *call_args[] = {tmp_args_element_name_7};
            tmp_call_result_12 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_17, const_str_plain_startSpin, call_args);
        }

        if (tmp_call_result_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 225;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_12);
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_28;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_source_name_29;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_tuple_element_1;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_threading);

        if (unlikely(tmp_mvar_value_4 == NULL)) {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_threading);
        }

        if (tmp_mvar_value_4 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 661 ], 38, 0);
            exception_tb = NULL;

            exception_lineno = 226;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_28 = tmp_mvar_value_4;
        tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_28, const_str_plain_Thread);
        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 226;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_runthread);

        if (unlikely(tmp_mvar_value_5 == NULL)) {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_runthread);
        }

        if (tmp_mvar_value_5 == NULL) {
            Py_DECREF(tmp_called_name_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 1304 ], 38, 0);
            exception_tb = NULL;

            exception_lineno = 226;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_29 = tmp_mvar_value_5;
        tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_source_name_29, const_str_plain_rt_queryAuth);
        if (tmp_dict_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_3);

            exception_lineno = 226;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = const_str_plain_target;
        tmp_kw_name_1 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1);
        Py_DECREF(tmp_dict_value_1);
        assert(!(tmp_res != 0));
        CHECK_OBJECT(par_self);
        tmp_tuple_element_1 = par_self;
        tmp_dict_value_2 = PyTuple_New(5);
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_dict_value_2, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_parent);
        tmp_tuple_element_1 = par_parent;
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_dict_value_2, 1, tmp_tuple_element_1);
        CHECK_OBJECT(var_index);
        tmp_tuple_element_1 = var_index;
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_dict_value_2, 2, tmp_tuple_element_1);
        CHECK_OBJECT(var_salt);
        tmp_tuple_element_1 = var_salt;
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_dict_value_2, 3, tmp_tuple_element_1);
        CHECK_OBJECT(var_user);
        tmp_tuple_element_1 = var_user;
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_dict_value_2, 4, tmp_tuple_element_1);
        tmp_dict_key_2 = const_str_plain_args;
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2);
        Py_DECREF(tmp_dict_value_2);
        assert(!(tmp_res != 0));
        frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 226;
        tmp_assign_source_6 = CALL_FUNCTION_WITH_KEYARGS(tmp_called_name_3, tmp_kw_name_1);
        Py_DECREF(tmp_called_name_3);
        Py_DECREF(tmp_kw_name_1);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 226;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        assert(var_t1 == NULL);
        var_t1 = tmp_assign_source_6;
    }
    {
        PyObject *tmp_called_instance_18;
        PyObject *tmp_call_result_13;
        CHECK_OBJECT(var_t1);
        tmp_called_instance_18 = var_t1;
        frame_4819b15a430890c766193c4b26ec24f6->m_frame.f_lineno = 227;
        tmp_call_result_13 = CALL_METHOD_NO_ARGS(tmp_called_instance_18, const_str_plain_start);
        if (tmp_call_result_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 227;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_13);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4819b15a430890c766193c4b26ec24f6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_4819b15a430890c766193c4b26ec24f6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4819b15a430890c766193c4b26ec24f6);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4819b15a430890c766193c4b26ec24f6, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_4819b15a430890c766193c4b26ec24f6->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4819b15a430890c766193c4b26ec24f6, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4819b15a430890c766193c4b26ec24f6,
        type_description_1,
        par_self,
        par_button,
        par_parent,
        var_pw_strip,
        var_index,
        var_t1,
        var_user,
        var_m_na,
        NULL,
        var_salt
    );


    // Release cached frame.
    if (frame_4819b15a430890c766193c4b26ec24f6 == cache_frame_4819b15a430890c766193c4b26ec24f6) {
        Py_DECREF(frame_4819b15a430890c766193c4b26ec24f6);
    }
    cache_frame_4819b15a430890c766193c4b26ec24f6 = NULL;

    assertFrameObject(frame_4819b15a430890c766193c4b26ec24f6);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_6_queryAuth);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_pw_strip);
    Py_DECREF(var_pw_strip);
    var_pw_strip = NULL;

    Py_XDECREF(var_index);
    var_index = NULL;

    Py_XDECREF(var_t1);
    var_t1 = NULL;

    Py_XDECREF(var_user);
    var_user = NULL;

    Py_XDECREF(var_m_na);
    var_m_na = NULL;

    Py_XDECREF(var_salt);
    var_salt = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_pw_strip);
    var_pw_strip = NULL;

    Py_XDECREF(var_index);
    var_index = NULL;

    Py_XDECREF(var_t1);
    var_t1 = NULL;

    Py_XDECREF(var_user);
    var_user = NULL;

    Py_XDECREF(var_m_na);
    var_m_na = NULL;

    Py_XDECREF(var_salt);
    var_salt = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_6_queryAuth);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_7_startSpin(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_parent = python_pars[1];
    PyObject *par_args = python_pars[2];
    struct Nuitka_FrameObject *frame_b6583bd5be2af69d1a53505c2c406838;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_b6583bd5be2af69d1a53505c2c406838 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME(cache_frame_b6583bd5be2af69d1a53505c2c406838, codeobj_b6583bd5be2af69d1a53505c2c406838, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_b6583bd5be2af69d1a53505c2c406838 = cache_frame_b6583bd5be2af69d1a53505c2c406838;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_b6583bd5be2af69d1a53505c2c406838);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_b6583bd5be2af69d1a53505c2c406838) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_spinQ);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b6583bd5be2af69d1a53505c2c406838->m_frame.f_lineno = 231;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_show);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_spinQ);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 232;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b6583bd5be2af69d1a53505c2c406838->m_frame.f_lineno = 232;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_start);
        Py_DECREF(tmp_called_instance_2);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 232;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b6583bd5be2af69d1a53505c2c406838);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b6583bd5be2af69d1a53505c2c406838);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b6583bd5be2af69d1a53505c2c406838, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_b6583bd5be2af69d1a53505c2c406838->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b6583bd5be2af69d1a53505c2c406838, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b6583bd5be2af69d1a53505c2c406838,
        type_description_1,
        par_self,
        par_parent,
        par_args
    );


    // Release cached frame.
    if (frame_b6583bd5be2af69d1a53505c2c406838 == cache_frame_b6583bd5be2af69d1a53505c2c406838) {
        Py_DECREF(frame_b6583bd5be2af69d1a53505c2c406838);
    }
    cache_frame_b6583bd5be2af69d1a53505c2c406838 = NULL;

    assertFrameObject(frame_b6583bd5be2af69d1a53505c2c406838);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_7_startSpin);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_8_stopSpin(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_parent = python_pars[1];
    PyObject *par_args = python_pars[2];
    struct Nuitka_FrameObject *frame_9d55278475ac7b5d71da18446ca17aab;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_9d55278475ac7b5d71da18446ca17aab = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME(cache_frame_9d55278475ac7b5d71da18446ca17aab, codeobj_9d55278475ac7b5d71da18446ca17aab, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_9d55278475ac7b5d71da18446ca17aab = cache_frame_9d55278475ac7b5d71da18446ca17aab;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9d55278475ac7b5d71da18446ca17aab);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9d55278475ac7b5d71da18446ca17aab) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_spinQ);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 235;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_9d55278475ac7b5d71da18446ca17aab->m_frame.f_lineno = 235;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_stop);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 235;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_spinQ);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 236;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_9d55278475ac7b5d71da18446ca17aab->m_frame.f_lineno = 236;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_hide);
        Py_DECREF(tmp_called_instance_2);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 236;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9d55278475ac7b5d71da18446ca17aab);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9d55278475ac7b5d71da18446ca17aab);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9d55278475ac7b5d71da18446ca17aab, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_9d55278475ac7b5d71da18446ca17aab->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9d55278475ac7b5d71da18446ca17aab, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9d55278475ac7b5d71da18446ca17aab,
        type_description_1,
        par_self,
        par_parent,
        par_args
    );


    // Release cached frame.
    if (frame_9d55278475ac7b5d71da18446ca17aab == cache_frame_9d55278475ac7b5d71da18446ca17aab) {
        Py_DECREF(frame_9d55278475ac7b5d71da18446ca17aab);
    }
    cache_frame_9d55278475ac7b5d71da18446ca17aab = NULL;

    assertFrameObject(frame_9d55278475ac7b5d71da18446ca17aab);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_8_stopSpin);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_9_saveToText(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_args = python_pars[1];
    PyObject *var_f = NULL;
    PyObject *var_chooser = NULL;
    PyObject *var_filename = NULL;
    PyObject *var_filter = NULL;
    PyObject *var_response = NULL;
    struct Nuitka_FrameObject *frame_33ab5e5c230c928ee325ae602a5d8313;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_33ab5e5c230c928ee325ae602a5d8313 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_33ab5e5c230c928ee325ae602a5d8313, codeobj_33ab5e5c230c928ee325ae602a5d8313, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_33ab5e5c230c928ee325ae602a5d8313 = cache_frame_33ab5e5c230c928ee325ae602a5d8313;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_33ab5e5c230c928ee325ae602a5d8313);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_33ab5e5c230c928ee325ae602a5d8313) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_verify);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_verify);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 236 ], 35, 0);
            exception_tb = NULL;

            exception_lineno = 239;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_licCheck);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 239;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_parent);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_parent);
        }

        if (tmp_mvar_value_2 == NULL) {
            Py_DECREF(tmp_called_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 1269 ], 35, 0);
            exception_tb = NULL;

            exception_lineno = 239;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_1 = tmp_mvar_value_2;
        frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 239;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_called_name_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 239;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_source_name_5;
        PyObject *tmp_mvar_value_6;
        PyObject *tmp_source_name_6;
        PyObject *tmp_mvar_value_7;
        PyObject *tmp_source_name_7;
        PyObject *tmp_mvar_value_8;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_3 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 240;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_3;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_FileChooserDialog);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 240;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_1 = Py_None;
        tmp_dict_key_1 = const_str_plain_title;
        tmp_kw_name_1 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_4 == NULL)) {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_4 == NULL) {
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_kw_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 240;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_4;
        tmp_dict_value_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_FILE_CHOOSER_ACTION_SAVE);
        if (tmp_dict_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_kw_name_1);

            exception_lineno = 240;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = const_str_plain_action;
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2);
        Py_DECREF(tmp_dict_value_2);
        assert(!(tmp_res != 0));
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_5 == NULL)) {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_5 == NULL) {
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_kw_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 240;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_5;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_STOCK_CANCEL);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_kw_name_1);

            exception_lineno = 240;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_3 = PyTuple_New(4);
        PyTuple_SET_ITEM(tmp_dict_value_3, 0, tmp_tuple_element_1);
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_6 == NULL)) {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_6 == NULL) {
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_kw_name_1);
            Py_DECREF(tmp_dict_value_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 240;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_5 = tmp_mvar_value_6;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_RESPONSE_CANCEL);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_kw_name_1);
            Py_DECREF(tmp_dict_value_3);

            exception_lineno = 240;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_dict_value_3, 1, tmp_tuple_element_1);
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_7 == NULL)) {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_7 == NULL) {
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_kw_name_1);
            Py_DECREF(tmp_dict_value_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 240;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_6 = tmp_mvar_value_7;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_STOCK_SAVE);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_kw_name_1);
            Py_DECREF(tmp_dict_value_3);

            exception_lineno = 240;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_dict_value_3, 2, tmp_tuple_element_1);
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_8 == NULL)) {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_8 == NULL) {
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_kw_name_1);
            Py_DECREF(tmp_dict_value_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 240;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_7 = tmp_mvar_value_8;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_RESPONSE_OK);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_kw_name_1);
            Py_DECREF(tmp_dict_value_3);

            exception_lineno = 240;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_dict_value_3, 3, tmp_tuple_element_1);
        tmp_dict_key_3 = const_str_plain_buttons;
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3);
        Py_DECREF(tmp_dict_value_3);
        assert(!(tmp_res != 0));
        frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 240;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_KEYARGS(tmp_called_name_2, tmp_kw_name_1);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_kw_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 240;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_chooser == NULL);
        var_chooser = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(var_chooser);
        tmp_called_instance_1 = var_chooser;
        frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 241;
        tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_set_do_overwrite_confirmation, &PyTuple_GET_ITEM(const_tuple_true_tuple, 0));

        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_mvar_value_9;
        tmp_mvar_value_9 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_9 == NULL)) {
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_9 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 243;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_2 = tmp_mvar_value_9;
        frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 243;
        tmp_assign_source_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_FileFilter);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 243;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_filter == NULL);
        var_filter = tmp_assign_source_2;
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT(var_filter);
        tmp_called_instance_3 = var_filter;
        frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 244;
        tmp_call_result_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_3, const_str_plain_set_name, &PyTuple_GET_ITEM(const_tuple_str_digest_ebe547e87ec1874e7daf52989a3eff90_tuple, 0));

        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_call_result_4;
        CHECK_OBJECT(var_filter);
        tmp_called_instance_4 = var_filter;
        frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 245;
        tmp_call_result_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_add_mime_type, &PyTuple_GET_ITEM(const_tuple_str_digest_9ef21afda882614b7db2bd2f0eca2fdd_tuple, 0));

        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    {
        PyObject *tmp_called_instance_5;
        PyObject *tmp_call_result_5;
        CHECK_OBJECT(var_filter);
        tmp_called_instance_5 = var_filter;
        frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 246;
        tmp_call_result_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_5, const_str_plain_add_pattern, &PyTuple_GET_ITEM(const_tuple_str_digest_b183ba1710e6bac4409cfe905cebb58d_tuple, 0));

        if (tmp_call_result_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 246;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_5);
    }
    {
        PyObject *tmp_called_instance_6;
        PyObject *tmp_call_result_6;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT(var_chooser);
        tmp_called_instance_6 = var_chooser;
        CHECK_OBJECT(var_filter);
        tmp_args_element_name_2 = var_filter;
        frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 247;
        {
            PyObject *call_args[] = {tmp_args_element_name_2};
            tmp_call_result_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_6, const_str_plain_add_filter, call_args);
        }

        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 247;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_6);
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_7;
        PyObject *tmp_mvar_value_10;
        tmp_mvar_value_10 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_10 == NULL)) {
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_10 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 249;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_7 = tmp_mvar_value_10;
        frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 249;
        tmp_assign_source_3 = CALL_METHOD_NO_ARGS(tmp_called_instance_7, const_str_plain_FileFilter);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_filter;
            assert(old != NULL);
            var_filter = tmp_assign_source_3;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_8;
        PyObject *tmp_call_result_7;
        CHECK_OBJECT(var_filter);
        tmp_called_instance_8 = var_filter;
        frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 250;
        tmp_call_result_7 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_8, const_str_plain_set_name, &PyTuple_GET_ITEM(const_tuple_str_digest_3083929b5fa45e6504468bcca4e3142a_tuple, 0));

        if (tmp_call_result_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 250;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_7);
    }
    {
        PyObject *tmp_called_instance_9;
        PyObject *tmp_call_result_8;
        CHECK_OBJECT(var_filter);
        tmp_called_instance_9 = var_filter;
        frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 251;
        tmp_call_result_8 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_9, const_str_plain_add_pattern, &PyTuple_GET_ITEM(const_tuple_str_chr_42_tuple, 0));

        if (tmp_call_result_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 251;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_8);
    }
    {
        PyObject *tmp_called_instance_10;
        PyObject *tmp_call_result_9;
        PyObject *tmp_args_element_name_3;
        CHECK_OBJECT(var_chooser);
        tmp_called_instance_10 = var_chooser;
        CHECK_OBJECT(var_filter);
        tmp_args_element_name_3 = var_filter;
        frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 252;
        {
            PyObject *call_args[] = {tmp_args_element_name_3};
            tmp_call_result_9 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_10, const_str_plain_add_filter, call_args);
        }

        if (tmp_call_result_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 252;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_9);
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_instance_11;
        CHECK_OBJECT(var_chooser);
        tmp_called_instance_11 = var_chooser;
        frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 254;
        tmp_assign_source_4 = CALL_METHOD_NO_ARGS(tmp_called_instance_11, const_str_plain_run);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_response == NULL);
        var_response = tmp_assign_source_4;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_8;
        PyObject *tmp_mvar_value_11;
        CHECK_OBJECT(var_response);
        tmp_compexpr_left_1 = var_response;
        tmp_mvar_value_11 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_11 == NULL)) {
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_11 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 255;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_8 = tmp_mvar_value_11;
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_RESPONSE_OK);
        if (tmp_compexpr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 255;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 255;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_called_instance_12;
            CHECK_OBJECT(var_chooser);
            tmp_called_instance_12 = var_chooser;
            frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 256;
            tmp_assign_source_5 = CALL_METHOD_NO_ARGS(tmp_called_instance_12, const_str_plain_get_filename);
            if (tmp_assign_source_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 256;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_filename == NULL);
            var_filename = tmp_assign_source_5;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_open_filename_1;
            PyObject *tmp_open_mode_1;
            CHECK_OBJECT(var_filename);
            tmp_open_filename_1 = var_filename;
            tmp_open_mode_1 = const_str_plain_w;
            tmp_assign_source_6 = BUILTIN_OPEN(tmp_open_filename_1, tmp_open_mode_1, NULL);
            if (tmp_assign_source_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 260;
                type_description_1 = "ooooooo";
                goto try_except_handler_2;
            }
            assert(var_f == NULL);
            var_f = tmp_assign_source_6;
        }
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_9;
            PyObject *tmp_call_result_10;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_source_name_10;
            CHECK_OBJECT(var_f);
            tmp_source_name_9 = var_f;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_write);
            if (tmp_called_name_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 261;
                type_description_1 = "ooooooo";
                goto try_except_handler_2;
            }
            CHECK_OBJECT(par_self);
            tmp_source_name_10 = par_self;
            tmp_args_element_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_queryWinText);
            if (tmp_args_element_name_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_3);

                exception_lineno = 261;
                type_description_1 = "ooooooo";
                goto try_except_handler_2;
            }
            frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 261;
            tmp_call_result_10 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_4);
            Py_DECREF(tmp_called_name_3);
            Py_DECREF(tmp_args_element_name_4);
            if (tmp_call_result_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 261;
                type_description_1 = "ooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF(tmp_call_result_10);
        }
        {
            PyObject *tmp_called_instance_13;
            PyObject *tmp_call_result_11;
            CHECK_OBJECT(var_f);
            tmp_called_instance_13 = var_f;
            frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 262;
            tmp_call_result_11 = CALL_METHOD_NO_ARGS(tmp_called_instance_13, const_str_plain_close);
            if (tmp_call_result_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 262;
                type_description_1 = "ooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF(tmp_call_result_11);
        }
        {
            PyObject *tmp_called_instance_14;
            PyObject *tmp_call_result_12;
            CHECK_OBJECT(var_chooser);
            tmp_called_instance_14 = var_chooser;
            frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 263;
            tmp_call_result_12 = CALL_METHOD_NO_ARGS(tmp_called_instance_14, const_str_plain_destroy);
            if (tmp_call_result_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 263;
                type_description_1 = "ooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF(tmp_call_result_12);
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        PRESERVE_FRAME_EXCEPTION(frame_33ab5e5c230c928ee325ae602a5d8313);
        if (exception_keeper_tb_1 == NULL) {
            exception_keeper_tb_1 = MAKE_TRACEBACK(frame_33ab5e5c230c928ee325ae602a5d8313, exception_keeper_lineno_1);
        } else if (exception_keeper_lineno_1 != 0) {
            exception_keeper_tb_1 = ADD_TRACEBACK(exception_keeper_tb_1, frame_33ab5e5c230c928ee325ae602a5d8313, exception_keeper_lineno_1);
        }

        NORMALIZE_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
        PUBLISH_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_2 = PyExc_IOError;
            tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_2, tmp_compexpr_right_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 264;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
                goto branch_yes_2;
            } else {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_called_instance_15;
                PyObject *tmp_call_result_13;
                CHECK_OBJECT(var_chooser);
                tmp_called_instance_15 = var_chooser;
                frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 265;
                tmp_call_result_13 = CALL_METHOD_NO_ARGS(tmp_called_instance_15, const_str_plain_destroy);
                if (tmp_call_result_13 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 265;
                    type_description_1 = "ooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_13);
            }
            {
                PyObject *tmp_called_instance_16;
                PyObject *tmp_call_result_14;
                CHECK_OBJECT(par_self);
                tmp_called_instance_16 = par_self;
                frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 266;
                tmp_call_result_14 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_16, const_str_plain_msg_err, &PyTuple_GET_ITEM(const_tuple_str_digest_ea27fd1abf24ba1001b39b13e5d301ce_tuple, 0));

                if (tmp_call_result_14 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 266;
                    type_description_1 = "ooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_14);
            }
            goto branch_end_2;
            branch_no_2:;
            tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            if (unlikely(tmp_result == false)) {
                exception_lineno = 259;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_33ab5e5c230c928ee325ae602a5d8313->m_frame) frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
            branch_end_2:;
        }
        goto try_end_1;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE(dialogs$$$function_9_saveToText);
        return NULL;
        // End of try:
        try_end_1:;
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_called_instance_17;
            PyObject *tmp_call_result_15;
            CHECK_OBJECT(var_chooser);
            tmp_called_instance_17 = var_chooser;
            frame_33ab5e5c230c928ee325ae602a5d8313->m_frame.f_lineno = 268;
            tmp_call_result_15 = CALL_METHOD_NO_ARGS(tmp_called_instance_17, const_str_plain_destroy);
            if (tmp_call_result_15 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 268;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_15);
        }
        branch_end_1:;
    }

#if 1
    RESTORE_FRAME_EXCEPTION(frame_33ab5e5c230c928ee325ae602a5d8313);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION(frame_33ab5e5c230c928ee325ae602a5d8313);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_33ab5e5c230c928ee325ae602a5d8313, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_33ab5e5c230c928ee325ae602a5d8313->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_33ab5e5c230c928ee325ae602a5d8313, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_33ab5e5c230c928ee325ae602a5d8313,
        type_description_1,
        par_self,
        par_args,
        var_f,
        var_chooser,
        var_filename,
        var_filter,
        var_response
    );


    // Release cached frame.
    if (frame_33ab5e5c230c928ee325ae602a5d8313 == cache_frame_33ab5e5c230c928ee325ae602a5d8313) {
        Py_DECREF(frame_33ab5e5c230c928ee325ae602a5d8313);
    }
    cache_frame_33ab5e5c230c928ee325ae602a5d8313 = NULL;

    assertFrameObject(frame_33ab5e5c230c928ee325ae602a5d8313);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_9_saveToText);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_f);
    var_f = NULL;

    CHECK_OBJECT((PyObject *)var_chooser);
    Py_DECREF(var_chooser);
    var_chooser = NULL;

    Py_XDECREF(var_filename);
    var_filename = NULL;

    CHECK_OBJECT((PyObject *)var_filter);
    Py_DECREF(var_filter);
    var_filter = NULL;

    CHECK_OBJECT((PyObject *)var_response);
    Py_DECREF(var_response);
    var_response = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_f);
    var_f = NULL;

    Py_XDECREF(var_chooser);
    var_chooser = NULL;

    Py_XDECREF(var_filename);
    var_filename = NULL;

    Py_XDECREF(var_filter);
    var_filter = NULL;

    Py_XDECREF(var_response);
    var_response = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_9_saveToText);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_10_msg_err(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_msg = python_pars[1];
    PyObject *var_res = NULL;
    PyObject *var_message = NULL;
    struct Nuitka_FrameObject *frame_1f970691038a87f4b74dd84c88e18063;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_1f970691038a87f4b74dd84c88e18063 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_1f970691038a87f4b74dd84c88e18063, codeobj_1f970691038a87f4b74dd84c88e18063, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_1f970691038a87f4b74dd84c88e18063 = cache_frame_1f970691038a87f4b74dd84c88e18063;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_1f970691038a87f4b74dd84c88e18063);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_1f970691038a87f4b74dd84c88e18063) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 271;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_MessageDialog);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_2 == NULL) {
            Py_DECREF(tmp_called_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 271;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_2;
        tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_MESSAGE_ERROR);
        if (tmp_dict_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 271;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = const_str_plain_type;
        tmp_kw_name_1 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1);
        Py_DECREF(tmp_dict_value_1);
        assert(!(tmp_res != 0));
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_3 == NULL) {
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_kw_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 271;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_3;
        tmp_dict_value_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_BUTTONS_OK);
        if (tmp_dict_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_kw_name_1);

            exception_lineno = 271;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = const_str_plain_buttons;
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2);
        Py_DECREF(tmp_dict_value_2);
        assert(!(tmp_res != 0));
        CHECK_OBJECT(par_self);
        tmp_dict_value_3 = par_self;
        tmp_dict_key_3 = const_str_plain_parent;
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3);
        assert(!(tmp_res != 0));
        frame_1f970691038a87f4b74dd84c88e18063->m_frame.f_lineno = 271;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_KEYARGS(tmp_called_name_1, tmp_kw_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_kw_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_message == NULL);
        var_message = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT(var_message);
        tmp_called_instance_1 = var_message;
        CHECK_OBJECT(par_msg);
        tmp_args_element_name_1 = par_msg;
        frame_1f970691038a87f4b74dd84c88e18063->m_frame.f_lineno = 272;
        {
            PyObject *call_args[] = {tmp_args_element_name_1};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_set_markup, call_args);
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 272;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT(var_message);
        tmp_called_instance_2 = var_message;
        frame_1f970691038a87f4b74dd84c88e18063->m_frame.f_lineno = 274;
        tmp_assign_source_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_run);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_res == NULL);
        var_res = tmp_assign_source_2;
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(var_message);
        tmp_called_instance_3 = var_message;
        frame_1f970691038a87f4b74dd84c88e18063->m_frame.f_lineno = 275;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_3, const_str_plain_destroy);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 275;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1f970691038a87f4b74dd84c88e18063);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1f970691038a87f4b74dd84c88e18063);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1f970691038a87f4b74dd84c88e18063, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_1f970691038a87f4b74dd84c88e18063->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1f970691038a87f4b74dd84c88e18063, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1f970691038a87f4b74dd84c88e18063,
        type_description_1,
        par_self,
        par_msg,
        var_res,
        var_message
    );


    // Release cached frame.
    if (frame_1f970691038a87f4b74dd84c88e18063 == cache_frame_1f970691038a87f4b74dd84c88e18063) {
        Py_DECREF(frame_1f970691038a87f4b74dd84c88e18063);
    }
    cache_frame_1f970691038a87f4b74dd84c88e18063 = NULL;

    assertFrameObject(frame_1f970691038a87f4b74dd84c88e18063);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_10_msg_err);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_res);
    Py_DECREF(var_res);
    var_res = NULL;

    CHECK_OBJECT((PyObject *)var_message);
    Py_DECREF(var_message);
    var_message = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_res);
    var_res = NULL;

    Py_XDECREF(var_message);
    var_message = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_10_msg_err);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_msg);
    Py_DECREF(par_msg);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_msg);
    Py_DECREF(par_msg);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_11_msg_ok(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_msg = python_pars[1];
    PyObject *var_res = NULL;
    PyObject *var_message = NULL;
    struct Nuitka_FrameObject *frame_78146796101c5ccb0cb445ee11501677;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_78146796101c5ccb0cb445ee11501677 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_78146796101c5ccb0cb445ee11501677, codeobj_78146796101c5ccb0cb445ee11501677, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_78146796101c5ccb0cb445ee11501677 = cache_frame_78146796101c5ccb0cb445ee11501677;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_78146796101c5ccb0cb445ee11501677);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_78146796101c5ccb0cb445ee11501677) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 278;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_MessageDialog);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 278;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_2 == NULL) {
            Py_DECREF(tmp_called_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 278;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_2;
        tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_MESSAGE_INFO);
        if (tmp_dict_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 278;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = const_str_plain_type;
        tmp_kw_name_1 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1);
        Py_DECREF(tmp_dict_value_1);
        assert(!(tmp_res != 0));
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_3 == NULL) {
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_kw_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 278;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_3;
        tmp_dict_value_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_BUTTONS_OK);
        if (tmp_dict_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_kw_name_1);

            exception_lineno = 278;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = const_str_plain_buttons;
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2);
        Py_DECREF(tmp_dict_value_2);
        assert(!(tmp_res != 0));
        CHECK_OBJECT(par_self);
        tmp_dict_value_3 = par_self;
        tmp_dict_key_3 = const_str_plain_parent;
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3);
        assert(!(tmp_res != 0));
        frame_78146796101c5ccb0cb445ee11501677->m_frame.f_lineno = 278;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_KEYARGS(tmp_called_name_1, tmp_kw_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_kw_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 278;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_message == NULL);
        var_message = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT(var_message);
        tmp_called_instance_1 = var_message;
        CHECK_OBJECT(par_msg);
        tmp_args_element_name_1 = par_msg;
        frame_78146796101c5ccb0cb445ee11501677->m_frame.f_lineno = 279;
        {
            PyObject *call_args[] = {tmp_args_element_name_1};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_set_markup, call_args);
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT(var_message);
        tmp_called_instance_2 = var_message;
        frame_78146796101c5ccb0cb445ee11501677->m_frame.f_lineno = 281;
        tmp_assign_source_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_run);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 281;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_res == NULL);
        var_res = tmp_assign_source_2;
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(var_message);
        tmp_called_instance_3 = var_message;
        frame_78146796101c5ccb0cb445ee11501677->m_frame.f_lineno = 282;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_3, const_str_plain_destroy);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 282;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_78146796101c5ccb0cb445ee11501677);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_78146796101c5ccb0cb445ee11501677);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_78146796101c5ccb0cb445ee11501677, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_78146796101c5ccb0cb445ee11501677->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_78146796101c5ccb0cb445ee11501677, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_78146796101c5ccb0cb445ee11501677,
        type_description_1,
        par_self,
        par_msg,
        var_res,
        var_message
    );


    // Release cached frame.
    if (frame_78146796101c5ccb0cb445ee11501677 == cache_frame_78146796101c5ccb0cb445ee11501677) {
        Py_DECREF(frame_78146796101c5ccb0cb445ee11501677);
    }
    cache_frame_78146796101c5ccb0cb445ee11501677 = NULL;

    assertFrameObject(frame_78146796101c5ccb0cb445ee11501677);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_11_msg_ok);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_res);
    Py_DECREF(var_res);
    var_res = NULL;

    CHECK_OBJECT((PyObject *)var_message);
    Py_DECREF(var_message);
    var_message = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_res);
    var_res = NULL;

    Py_XDECREF(var_message);
    var_message = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_11_msg_ok);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_msg);
    Py_DECREF(par_msg);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_msg);
    Py_DECREF(par_msg);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_12_query(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_button = python_pars[0];
    PyObject *par_parent = python_pars[1];
    PyObject *par_mode = python_pars[2];
    PyObject *var_tblsz_i = NULL;
    PyObject *var_nbr_Admins = NULL;
    PyObject *var_new_devname = NULL;
    PyObject *var_tblsz = NULL;
    PyObject *var_dl_len = NULL;
    PyObject *var_txt_33 = NULL;
    PyObject *var_nbr_Objects = NULL;
    PyObject *var_initialPIN = NULL;
    PyObject *var_list_d = NULL;
    PyObject *var_x_words = NULL;
    PyObject *var_txt = NULL;
    PyObject *var_txt11 = NULL;
    PyObject *var_index = NULL;
    PyObject *var_sts_MBRDone = NULL;
    PyObject *var_queryWin = NULL;
    PyObject *var_sts_Locked = NULL;
    PyObject *var_tt = NULL;
    nuitka_bool var_rescan_needed = NUITKA_BOOL_UNASSIGNED;
    PyObject *var_nbr_MaxTables = NULL;
    PyObject *var_sts_MBREnabled = NULL;
    PyObject *var_t = NULL;
    PyObject *var_comID_base = NULL;
    PyObject *var_nbr_Users = NULL;
    PyObject *var_singleUser = NULL;
    PyObject *var_admin_state = NULL;
    PyObject *var_locking_state = NULL;
    PyObject *var_present = NULL;
    PyObject *var_matched = NULL;
    PyObject *var_test_dev = NULL;
    PyObject *var_sts_MBRShadowNotSupported = NULL;
    PyObject *var_i = NULL;
    PyObject *var_m = NULL;
    PyObject *var_t3 = NULL;
    PyObject *var_txt_s = NULL;
    PyObject *var_queryTextList = NULL;
    PyObject *var_txtState = NULL;
    PyObject *var_entry = NULL;
    PyObject *var_txt1 = NULL;
    PyObject *var_txt2 = NULL;
    PyObject *var_sts_LockingEnabled = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_for_loop_5__for_iterator = NULL;
    PyObject *tmp_for_loop_5__iter_value = NULL;
    struct Nuitka_FrameObject *frame_ed44140aa8ea052c1de5d94d3a6d0d62;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    static struct Nuitka_FrameObject *cache_frame_ed44140aa8ea052c1de5d94d3a6d0d62 = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_ed44140aa8ea052c1de5d94d3a6d0d62, codeobj_ed44140aa8ea052c1de5d94d3a6d0d62, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(nuitka_bool)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_ed44140aa8ea052c1de5d94d3a6d0d62 = cache_frame_ed44140aa8ea052c1de5d94d3a6d0d62;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ed44140aa8ea052c1de5d94d3a6d0d62);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ed44140aa8ea052c1de5d94d3a6d0d62) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_verify);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_verify);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 236 ], 35, 0);
            exception_tb = NULL;

            exception_lineno = 286;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_parent);
        tmp_args_element_name_1 = par_parent;
        frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 286;
        {
            PyObject *call_args[] = {tmp_args_element_name_1};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_licCheck, call_args);
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = const_int_neg_1;
        assert(var_index == NULL);
        Py_INCREF(tmp_assign_source_1);
        var_index = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT(par_parent);
        tmp_source_name_1 = par_parent;
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_devs_list);
        if (tmp_len_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 288;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_left_1 = BUILTIN_LEN(tmp_len_arg_1);
        Py_DECREF(tmp_len_arg_1);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 288;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_INT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_called_instance_2;
            PyObject *tmp_source_name_2;
            CHECK_OBJECT(par_parent);
            tmp_source_name_2 = par_parent;
            tmp_called_instance_2 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_dev_select);
            if (tmp_called_instance_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 289;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 289;
            tmp_assign_source_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_get_active);
            Py_DECREF(tmp_called_instance_2);
            if (tmp_assign_source_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 289;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_index;
                assert(old != NULL);
                var_index = tmp_assign_source_2;
                Py_DECREF(old);
            }

        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT(par_parent);
            tmp_called_instance_3 = par_parent;
            frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 291;
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_3, const_str_plain_msg_err, &PyTuple_GET_ITEM(const_tuple_str_digest_ebd23d2bb4a34298b0d66a00001e1ca7_tuple, 0));

            if (tmp_call_result_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 291;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_2);
        }
        tmp_return_value = Py_None;
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
        branch_end_1:;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_parent);
        tmp_source_name_3 = par_parent;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_devs_list);
        if (tmp_subscribed_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 293;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_1 = var_index;
        tmp_assattr_name_1 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
        Py_DECREF(tmp_subscribed_name_1);
        if (tmp_assattr_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 293;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_parent);
        tmp_assattr_target_1 = par_parent;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_devname, tmp_assattr_name_1);
        Py_DECREF(tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 293;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_4;
        PyObject *tmp_source_name_5;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_source_name_6;
        PyObject *tmp_subscript_name_2;
        CHECK_OBJECT(par_parent);
        tmp_source_name_5 = par_parent;
        tmp_source_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_dev_vendor);
        if (tmp_source_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 295;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_set_text);
        Py_DECREF(tmp_source_name_4);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 295;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_parent);
        tmp_source_name_6 = par_parent;
        tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_vendor_list);
        if (tmp_subscribed_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 295;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_2 = var_index;
        tmp_args_element_name_2 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_2, tmp_subscript_name_2);
        Py_DECREF(tmp_subscribed_name_2);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 295;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 295;
        tmp_call_result_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_2);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 295;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_7;
        PyObject *tmp_source_name_8;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_source_name_9;
        PyObject *tmp_subscript_name_3;
        CHECK_OBJECT(par_parent);
        tmp_source_name_8 = par_parent;
        tmp_source_name_7 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_dev_sn);
        if (tmp_source_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_set_text);
        Py_DECREF(tmp_source_name_7);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_parent);
        tmp_source_name_9 = par_parent;
        tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_sn_list);
        if (tmp_subscribed_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 296;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_3 = var_index;
        tmp_args_element_name_3 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_3, tmp_subscript_name_3);
        Py_DECREF(tmp_subscribed_name_3);
        if (tmp_args_element_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 296;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 296;
        tmp_call_result_4 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_3);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_3);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_10;
        PyObject *tmp_source_name_11;
        PyObject *tmp_call_result_5;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_subscribed_name_4;
        PyObject *tmp_source_name_12;
        PyObject *tmp_subscript_name_4;
        CHECK_OBJECT(par_parent);
        tmp_source_name_11 = par_parent;
        tmp_source_name_10 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_dev_series);
        if (tmp_source_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 297;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_set_text);
        Py_DECREF(tmp_source_name_10);
        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 297;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_parent);
        tmp_source_name_12 = par_parent;
        tmp_subscribed_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_series_list);
        if (tmp_subscribed_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_3);

            exception_lineno = 297;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_4 = var_index;
        tmp_args_element_name_4 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_4, tmp_subscript_name_4);
        Py_DECREF(tmp_subscribed_name_4);
        if (tmp_args_element_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_3);

            exception_lineno = 297;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 297;
        tmp_call_result_5 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_4);
        Py_DECREF(tmp_called_name_3);
        Py_DECREF(tmp_args_element_name_4);
        if (tmp_call_result_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 297;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_5);
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_subscribed_name_5;
        PyObject *tmp_source_name_13;
        PyObject *tmp_subscript_name_5;
        CHECK_OBJECT(par_parent);
        tmp_source_name_13 = par_parent;
        tmp_subscribed_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain_msid_list);
        if (tmp_subscribed_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 298;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_5 = var_index;
        tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_5, tmp_subscript_name_5);
        Py_DECREF(tmp_subscribed_name_5);
        if (tmp_compexpr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 298;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = Py_None;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        Py_DECREF(tmp_compexpr_left_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 298;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_called_name_4;
            PyObject *tmp_source_name_14;
            PyObject *tmp_source_name_15;
            PyObject *tmp_call_result_6;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_subscribed_name_6;
            PyObject *tmp_source_name_16;
            PyObject *tmp_subscript_name_6;
            CHECK_OBJECT(par_parent);
            tmp_source_name_15 = par_parent;
            tmp_source_name_14 = LOOKUP_ATTRIBUTE(tmp_source_name_15, const_str_plain_dev_msid);
            if (tmp_source_name_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 299;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_14, const_str_plain_set_text);
            Py_DECREF(tmp_source_name_14);
            if (tmp_called_name_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 299;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_parent);
            tmp_source_name_16 = par_parent;
            tmp_subscribed_name_6 = LOOKUP_ATTRIBUTE(tmp_source_name_16, const_str_plain_msid_list);
            if (tmp_subscribed_name_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_4);

                exception_lineno = 299;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(var_index);
            tmp_subscript_name_6 = var_index;
            tmp_args_element_name_5 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_6, tmp_subscript_name_6);
            Py_DECREF(tmp_subscribed_name_6);
            if (tmp_args_element_name_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_4);

                exception_lineno = 299;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 299;
            tmp_call_result_6 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_4, tmp_args_element_name_5);
            Py_DECREF(tmp_called_name_4);
            Py_DECREF(tmp_args_element_name_5);
            if (tmp_call_result_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 299;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_6);
        }
        goto branch_end_2;
        branch_no_2:;
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_source_name_17;
            PyObject *tmp_call_result_7;
            CHECK_OBJECT(par_parent);
            tmp_source_name_17 = par_parent;
            tmp_called_instance_4 = LOOKUP_ATTRIBUTE(tmp_source_name_17, const_str_plain_dev_msid);
            if (tmp_called_instance_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 301;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 301;
            tmp_call_result_7 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_set_text, &PyTuple_GET_ITEM(const_tuple_str_digest_89447c318e6c708927dce4c990fa5405_tuple, 0));

            Py_DECREF(tmp_called_instance_4);
            if (tmp_call_result_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 301;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_7);
        }
        branch_end_2:;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_subscribed_name_7;
        PyObject *tmp_source_name_18;
        PyObject *tmp_subscript_name_7;
        CHECK_OBJECT(par_parent);
        tmp_source_name_18 = par_parent;
        tmp_subscribed_name_7 = LOOKUP_ATTRIBUTE(tmp_source_name_18, const_str_plain_pba_list);
        if (tmp_subscribed_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_7 = var_index;
        tmp_compexpr_left_3 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_7, tmp_subscript_name_7);
        Py_DECREF(tmp_subscribed_name_7);
        if (tmp_compexpr_left_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_3 = Py_None;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        Py_DECREF(tmp_compexpr_left_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_called_name_5;
            PyObject *tmp_source_name_19;
            PyObject *tmp_source_name_20;
            PyObject *tmp_call_result_8;
            PyObject *tmp_args_element_name_6;
            PyObject *tmp_subscribed_name_8;
            PyObject *tmp_source_name_21;
            PyObject *tmp_subscript_name_8;
            CHECK_OBJECT(par_parent);
            tmp_source_name_20 = par_parent;
            tmp_source_name_19 = LOOKUP_ATTRIBUTE(tmp_source_name_20, const_str_plain_dev_pbaVer);
            if (tmp_source_name_19 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 303;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_19, const_str_plain_set_text);
            Py_DECREF(tmp_source_name_19);
            if (tmp_called_name_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 303;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_parent);
            tmp_source_name_21 = par_parent;
            tmp_subscribed_name_8 = LOOKUP_ATTRIBUTE(tmp_source_name_21, const_str_plain_pba_list);
            if (tmp_subscribed_name_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_5);

                exception_lineno = 303;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(var_index);
            tmp_subscript_name_8 = var_index;
            tmp_args_element_name_6 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_8, tmp_subscript_name_8);
            Py_DECREF(tmp_subscribed_name_8);
            if (tmp_args_element_name_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_5);

                exception_lineno = 303;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 303;
            tmp_call_result_8 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_5, tmp_args_element_name_6);
            Py_DECREF(tmp_called_name_5);
            Py_DECREF(tmp_args_element_name_6);
            if (tmp_call_result_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 303;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_8);
        }
        goto branch_end_3;
        branch_no_3:;
        {
            PyObject *tmp_called_instance_5;
            PyObject *tmp_source_name_22;
            PyObject *tmp_call_result_9;
            CHECK_OBJECT(par_parent);
            tmp_source_name_22 = par_parent;
            tmp_called_instance_5 = LOOKUP_ATTRIBUTE(tmp_source_name_22, const_str_plain_dev_pbaVer);
            if (tmp_called_instance_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 305;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 305;
            tmp_call_result_9 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_5, const_str_plain_set_text, &PyTuple_GET_ITEM(const_tuple_str_digest_89447c318e6c708927dce4c990fa5405_tuple, 0));

            Py_DECREF(tmp_called_instance_5);
            if (tmp_call_result_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 305;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_9);
        }
        branch_end_3:;
    }
    {
        PyObject *tmp_called_name_6;
        PyObject *tmp_source_name_23;
        PyObject *tmp_source_name_24;
        PyObject *tmp_call_result_10;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_subscribed_name_9;
        PyObject *tmp_source_name_25;
        PyObject *tmp_subscript_name_9;
        CHECK_OBJECT(par_parent);
        tmp_source_name_24 = par_parent;
        tmp_source_name_23 = LOOKUP_ATTRIBUTE(tmp_source_name_24, const_str_plain_dev_opal_ver);
        if (tmp_source_name_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_6 = LOOKUP_ATTRIBUTE(tmp_source_name_23, const_str_plain_set_text);
        Py_DECREF(tmp_source_name_23);
        if (tmp_called_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_parent);
        tmp_source_name_25 = par_parent;
        tmp_subscribed_name_9 = LOOKUP_ATTRIBUTE(tmp_source_name_25, const_str_plain_opal_ver_list);
        if (tmp_subscribed_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_6);

            exception_lineno = 307;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_9 = var_index;
        tmp_args_element_name_7 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_9, tmp_subscript_name_9);
        Py_DECREF(tmp_subscribed_name_9);
        if (tmp_args_element_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_6);

            exception_lineno = 307;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 307;
        tmp_call_result_10 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_6, tmp_args_element_name_7);
        Py_DECREF(tmp_called_name_6);
        Py_DECREF(tmp_args_element_name_7);
        if (tmp_call_result_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_10);
    }
    {
        PyObject *tmp_called_name_7;
        PyObject *tmp_source_name_26;
        PyObject *tmp_source_name_27;
        PyObject *tmp_call_result_11;
        PyObject *tmp_args_element_name_8;
        PyObject *tmp_subscribed_name_10;
        PyObject *tmp_source_name_28;
        PyObject *tmp_subscript_name_10;
        CHECK_OBJECT(par_parent);
        tmp_source_name_27 = par_parent;
        tmp_source_name_26 = LOOKUP_ATTRIBUTE(tmp_source_name_27, const_str_plain_dev_status);
        if (tmp_source_name_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_7 = LOOKUP_ATTRIBUTE(tmp_source_name_26, const_str_plain_set_text);
        Py_DECREF(tmp_source_name_26);
        if (tmp_called_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_parent);
        tmp_source_name_28 = par_parent;
        tmp_subscribed_name_10 = LOOKUP_ATTRIBUTE(tmp_source_name_28, const_str_plain_lockstatus_list);
        if (tmp_subscribed_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_7);

            exception_lineno = 308;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_10 = var_index;
        tmp_args_element_name_8 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_10, tmp_subscript_name_10);
        Py_DECREF(tmp_subscribed_name_10);
        if (tmp_args_element_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_7);

            exception_lineno = 308;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 308;
        tmp_call_result_11 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_7, tmp_args_element_name_8);
        Py_DECREF(tmp_called_name_7);
        Py_DECREF(tmp_args_element_name_8);
        if (tmp_call_result_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_11);
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        PyObject *tmp_subscribed_name_11;
        PyObject *tmp_source_name_29;
        PyObject *tmp_subscript_name_11;
        CHECK_OBJECT(par_parent);
        tmp_source_name_29 = par_parent;
        tmp_subscribed_name_11 = LOOKUP_ATTRIBUTE(tmp_source_name_29, const_str_plain_setupstatus_list);
        if (tmp_subscribed_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 309;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_11 = var_index;
        tmp_compexpr_left_4 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_11, tmp_subscript_name_11);
        Py_DECREF(tmp_subscribed_name_11);
        if (tmp_compexpr_left_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 309;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_4 = Py_None;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT(tmp_compexpr_left_4, tmp_compexpr_right_4);
        Py_DECREF(tmp_compexpr_left_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 309;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_called_name_8;
            PyObject *tmp_source_name_30;
            PyObject *tmp_source_name_31;
            PyObject *tmp_call_result_12;
            PyObject *tmp_args_element_name_9;
            PyObject *tmp_subscribed_name_12;
            PyObject *tmp_source_name_32;
            PyObject *tmp_subscript_name_12;
            CHECK_OBJECT(par_parent);
            tmp_source_name_31 = par_parent;
            tmp_source_name_30 = LOOKUP_ATTRIBUTE(tmp_source_name_31, const_str_plain_dev_setup);
            if (tmp_source_name_30 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 310;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_called_name_8 = LOOKUP_ATTRIBUTE(tmp_source_name_30, const_str_plain_set_text);
            Py_DECREF(tmp_source_name_30);
            if (tmp_called_name_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 310;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_parent);
            tmp_source_name_32 = par_parent;
            tmp_subscribed_name_12 = LOOKUP_ATTRIBUTE(tmp_source_name_32, const_str_plain_setupstatus_list);
            if (tmp_subscribed_name_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_8);

                exception_lineno = 310;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(var_index);
            tmp_subscript_name_12 = var_index;
            tmp_args_element_name_9 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_12, tmp_subscript_name_12);
            Py_DECREF(tmp_subscribed_name_12);
            if (tmp_args_element_name_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_8);

                exception_lineno = 310;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 310;
            tmp_call_result_12 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_8, tmp_args_element_name_9);
            Py_DECREF(tmp_called_name_8);
            Py_DECREF(tmp_args_element_name_9);
            if (tmp_call_result_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 310;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_12);
        }
        goto branch_end_4;
        branch_no_4:;
        {
            PyObject *tmp_called_instance_6;
            PyObject *tmp_source_name_33;
            PyObject *tmp_call_result_13;
            CHECK_OBJECT(par_parent);
            tmp_source_name_33 = par_parent;
            tmp_called_instance_6 = LOOKUP_ATTRIBUTE(tmp_source_name_33, const_str_plain_dev_setup);
            if (tmp_called_instance_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 312;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 312;
            tmp_call_result_13 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_6, const_str_plain_set_text, &PyTuple_GET_ITEM(const_tuple_str_digest_89447c318e6c708927dce4c990fa5405_tuple, 0));

            Py_DECREF(tmp_called_instance_6);
            if (tmp_call_result_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 312;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_13);
        }
        branch_end_4:;
    }
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        PyObject *tmp_subscribed_name_13;
        PyObject *tmp_source_name_34;
        PyObject *tmp_subscript_name_13;
        CHECK_OBJECT(par_parent);
        tmp_source_name_34 = par_parent;
        tmp_subscribed_name_13 = LOOKUP_ATTRIBUTE(tmp_source_name_34, const_str_plain_setupuser_list);
        if (tmp_subscribed_name_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 313;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_13 = var_index;
        tmp_compexpr_left_5 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_13, tmp_subscript_name_13);
        Py_DECREF(tmp_subscribed_name_13);
        if (tmp_compexpr_left_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 313;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_5 = Py_None;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT(tmp_compexpr_left_5, tmp_compexpr_right_5);
        Py_DECREF(tmp_compexpr_left_5);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 313;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_5 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            PyObject *tmp_called_name_9;
            PyObject *tmp_source_name_35;
            PyObject *tmp_source_name_36;
            PyObject *tmp_call_result_14;
            PyObject *tmp_args_element_name_10;
            PyObject *tmp_subscribed_name_14;
            PyObject *tmp_source_name_37;
            PyObject *tmp_subscript_name_14;
            CHECK_OBJECT(par_parent);
            tmp_source_name_36 = par_parent;
            tmp_source_name_35 = LOOKUP_ATTRIBUTE(tmp_source_name_36, const_str_plain_dev_userSetup);
            if (tmp_source_name_35 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 314;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_called_name_9 = LOOKUP_ATTRIBUTE(tmp_source_name_35, const_str_plain_set_text);
            Py_DECREF(tmp_source_name_35);
            if (tmp_called_name_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 314;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_parent);
            tmp_source_name_37 = par_parent;
            tmp_subscribed_name_14 = LOOKUP_ATTRIBUTE(tmp_source_name_37, const_str_plain_setupuser_list);
            if (tmp_subscribed_name_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_9);

                exception_lineno = 314;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(var_index);
            tmp_subscript_name_14 = var_index;
            tmp_args_element_name_10 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_14, tmp_subscript_name_14);
            Py_DECREF(tmp_subscribed_name_14);
            if (tmp_args_element_name_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_9);

                exception_lineno = 314;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 314;
            tmp_call_result_14 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_9, tmp_args_element_name_10);
            Py_DECREF(tmp_called_name_9);
            Py_DECREF(tmp_args_element_name_10);
            if (tmp_call_result_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 314;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_14);
        }
        goto branch_end_5;
        branch_no_5:;
        {
            PyObject *tmp_called_instance_7;
            PyObject *tmp_source_name_38;
            PyObject *tmp_call_result_15;
            CHECK_OBJECT(par_parent);
            tmp_source_name_38 = par_parent;
            tmp_called_instance_7 = LOOKUP_ATTRIBUTE(tmp_source_name_38, const_str_plain_dev_userSetup);
            if (tmp_called_instance_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 316;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 316;
            tmp_call_result_15 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_7, const_str_plain_set_text, &PyTuple_GET_ITEM(const_tuple_str_digest_89447c318e6c708927dce4c990fa5405_tuple, 0));

            Py_DECREF(tmp_called_instance_7);
            if (tmp_call_result_15 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 316;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_15);
        }
        branch_end_5:;
    }
    {
        PyObject *tmp_called_name_10;
        PyObject *tmp_source_name_39;
        PyObject *tmp_source_name_40;
        PyObject *tmp_call_result_16;
        PyObject *tmp_args_element_name_11;
        PyObject *tmp_subscribed_name_15;
        PyObject *tmp_source_name_41;
        PyObject *tmp_subscript_name_15;
        CHECK_OBJECT(par_parent);
        tmp_source_name_40 = par_parent;
        tmp_source_name_39 = LOOKUP_ATTRIBUTE(tmp_source_name_40, const_str_plain_dev_enc);
        if (tmp_source_name_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 317;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_10 = LOOKUP_ATTRIBUTE(tmp_source_name_39, const_str_plain_set_text);
        Py_DECREF(tmp_source_name_39);
        if (tmp_called_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 317;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_parent);
        tmp_source_name_41 = par_parent;
        tmp_subscribed_name_15 = LOOKUP_ATTRIBUTE(tmp_source_name_41, const_str_plain_encsup_list);
        if (tmp_subscribed_name_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_10);

            exception_lineno = 317;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_15 = var_index;
        tmp_args_element_name_11 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_15, tmp_subscript_name_15);
        Py_DECREF(tmp_subscribed_name_15);
        if (tmp_args_element_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_10);

            exception_lineno = 317;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 317;
        tmp_call_result_16 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_10, tmp_args_element_name_11);
        Py_DECREF(tmp_called_name_10);
        Py_DECREF(tmp_args_element_name_11);
        if (tmp_call_result_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 317;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_16);
    }
    {
        PyObject *tmp_called_name_11;
        PyObject *tmp_source_name_42;
        PyObject *tmp_source_name_43;
        PyObject *tmp_call_result_17;
        PyObject *tmp_args_element_name_12;
        PyObject *tmp_subscribed_name_16;
        PyObject *tmp_source_name_44;
        PyObject *tmp_subscript_name_16;
        CHECK_OBJECT(par_parent);
        tmp_source_name_43 = par_parent;
        tmp_source_name_42 = LOOKUP_ATTRIBUTE(tmp_source_name_43, const_str_plain_dev_blockSID);
        if (tmp_source_name_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 318;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_11 = LOOKUP_ATTRIBUTE(tmp_source_name_42, const_str_plain_set_text);
        Py_DECREF(tmp_source_name_42);
        if (tmp_called_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 318;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_parent);
        tmp_source_name_44 = par_parent;
        tmp_subscribed_name_16 = LOOKUP_ATTRIBUTE(tmp_source_name_44, const_str_plain_blockSID_list);
        if (tmp_subscribed_name_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_11);

            exception_lineno = 318;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_16 = var_index;
        tmp_args_element_name_12 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_16, tmp_subscript_name_16);
        Py_DECREF(tmp_subscribed_name_16);
        if (tmp_args_element_name_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_11);

            exception_lineno = 318;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 318;
        tmp_call_result_17 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_11, tmp_args_element_name_12);
        Py_DECREF(tmp_called_name_11);
        Py_DECREF(tmp_args_element_name_12);
        if (tmp_call_result_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 318;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_17);
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = const_str_empty;
        assert(var_txt2 == NULL);
        Py_INCREF(tmp_assign_source_3);
        var_txt2 = tmp_assign_source_3;
    }
    {
        nuitka_bool tmp_condition_result_6;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        PyObject *tmp_compexpr_left_7;
        PyObject *tmp_compexpr_right_7;
        PyObject *tmp_source_name_45;
        CHECK_OBJECT(par_mode);
        tmp_compexpr_left_6 = par_mode;
        tmp_compexpr_right_6 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_6, tmp_compexpr_right_6);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 321;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_index);
        tmp_compexpr_left_7 = var_index;
        CHECK_OBJECT(par_parent);
        tmp_source_name_45 = par_parent;
        tmp_compexpr_right_7 = LOOKUP_ATTRIBUTE(tmp_source_name_45, const_str_plain_tcg_list);
        if (tmp_compexpr_right_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 321;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains(tmp_compexpr_right_7, tmp_compexpr_left_7);
        Py_DECREF(tmp_compexpr_right_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 321;
            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_6 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_6 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            nuitka_bool tmp_condition_result_7;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_source_name_46;
            CHECK_OBJECT(par_parent);
            tmp_source_name_46 = par_parent;
            tmp_operand_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_46, const_str_plain_scanning);
            if (tmp_operand_name_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 322;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
            Py_DECREF(tmp_operand_name_1);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 322;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_7 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
                goto branch_yes_7;
            } else {
                goto branch_no_7;
            }
            branch_yes_7:;
            {
                PyObject *tmp_called_instance_8;
                PyObject *tmp_mvar_value_2;
                PyObject *tmp_call_result_18;
                PyObject *tmp_args_element_name_13;
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_verify);

                if (unlikely(tmp_mvar_value_2 == NULL)) {
                    tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_verify);
                }

                if (tmp_mvar_value_2 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 236 ], 35, 0);
                    exception_tb = NULL;

                    exception_lineno = 323;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_8 = tmp_mvar_value_2;
                CHECK_OBJECT(par_parent);
                tmp_args_element_name_13 = par_parent;
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 323;
                {
                    PyObject *call_args[] = {tmp_args_element_name_13};
                    tmp_call_result_18 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_8, const_str_plain_licCheck, call_args);
                }

                if (tmp_call_result_18 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 323;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_18);
            }
            {
                PyObject *tmp_assign_source_4;
                tmp_assign_source_4 = Py_None;
                assert(var_new_devname == NULL);
                Py_INCREF(tmp_assign_source_4);
                var_new_devname = tmp_assign_source_4;
            }
            {
                nuitka_bool tmp_assign_source_5;
                tmp_assign_source_5 = NUITKA_BOOL_FALSE;
                var_rescan_needed = tmp_assign_source_5;
            }
            {
                PyObject *tmp_assign_source_6;
                PyObject *tmp_len_arg_2;
                PyObject *tmp_source_name_47;
                CHECK_OBJECT(par_parent);
                tmp_source_name_47 = par_parent;
                tmp_len_arg_2 = LOOKUP_ATTRIBUTE(tmp_source_name_47, const_str_plain_devs_list);
                if (tmp_len_arg_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 327;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_assign_source_6 = BUILTIN_LEN(tmp_len_arg_2);
                Py_DECREF(tmp_len_arg_2);
                if (tmp_assign_source_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 327;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert(var_dl_len == NULL);
                var_dl_len = tmp_assign_source_6;
            }
            {
                PyObject *tmp_assign_source_7;
                PyObject *tmp_iter_arg_1;
                PyObject *tmp_range_arg_1;
                CHECK_OBJECT(var_dl_len);
                tmp_range_arg_1 = var_dl_len;
                tmp_iter_arg_1 = BUILTIN_RANGE(tmp_range_arg_1);
                if (tmp_iter_arg_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 328;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_assign_source_7 = MAKE_ITERATOR(tmp_iter_arg_1);
                Py_DECREF(tmp_iter_arg_1);
                if (tmp_assign_source_7 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 328;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert(tmp_for_loop_1__for_iterator == NULL);
                tmp_for_loop_1__for_iterator = tmp_assign_source_7;
            }
            // Tried code:
            loop_start_1:;
            {
                PyObject *tmp_next_source_1;
                PyObject *tmp_assign_source_8;
                CHECK_OBJECT(tmp_for_loop_1__for_iterator);
                tmp_next_source_1 = tmp_for_loop_1__for_iterator;
                tmp_assign_source_8 = ITERATOR_NEXT(tmp_next_source_1);
                if (tmp_assign_source_8 == NULL) {
                    if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                        goto loop_end_1;
                    } else {

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        exception_lineno = 328;
                        goto try_except_handler_2;
                    }
                }

                {
                    PyObject *old = tmp_for_loop_1__iter_value;
                    tmp_for_loop_1__iter_value = tmp_assign_source_8;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_9;
                CHECK_OBJECT(tmp_for_loop_1__iter_value);
                tmp_assign_source_9 = tmp_for_loop_1__iter_value;
                {
                    PyObject *old = var_i;
                    var_i = tmp_assign_source_9;
                    Py_INCREF(var_i);
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_called_instance_9;
                PyObject *tmp_mvar_value_3;
                PyObject *tmp_call_result_19;
                PyObject *tmp_args_element_name_14;
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_runop);

                if (unlikely(tmp_mvar_value_3 == NULL)) {
                    tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_runop);
                }

                if (tmp_mvar_value_3 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 490 ], 34, 0);
                    exception_tb = NULL;

                    exception_lineno = 329;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto try_except_handler_2;
                }

                tmp_called_instance_9 = tmp_mvar_value_3;
                CHECK_OBJECT(var_i);
                tmp_args_element_name_14 = var_i;
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 329;
                {
                    PyObject *call_args[] = {tmp_args_element_name_14};
                    tmp_call_result_19 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_9, const_str_plain_prelock, call_args);
                }

                if (tmp_call_result_19 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 329;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF(tmp_call_result_19);
            }
            if (CONSIDER_THREADING() == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 328;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto try_except_handler_2;
            }
            goto loop_start_1;
            loop_end_1:;
            goto try_end_1;
            // Exception handler code:
            try_except_handler_2:;
            exception_keeper_type_1 = exception_type;
            exception_keeper_value_1 = exception_value;
            exception_keeper_tb_1 = exception_tb;
            exception_keeper_lineno_1 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF(tmp_for_loop_1__iter_value);
            tmp_for_loop_1__iter_value = NULL;

            CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
            Py_DECREF(tmp_for_loop_1__for_iterator);
            tmp_for_loop_1__for_iterator = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_1;
            exception_value = exception_keeper_value_1;
            exception_tb = exception_keeper_tb_1;
            exception_lineno = exception_keeper_lineno_1;

            goto frame_exception_exit_1;
            // End of try:
            try_end_1:;
            Py_XDECREF(tmp_for_loop_1__iter_value);
            tmp_for_loop_1__iter_value = NULL;

            CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
            Py_DECREF(tmp_for_loop_1__for_iterator);
            tmp_for_loop_1__for_iterator = NULL;

            {
                nuitka_bool tmp_condition_result_8;
                PyObject *tmp_subscribed_name_17;
                PyObject *tmp_source_name_48;
                PyObject *tmp_subscript_name_17;
                PyObject *tmp_subscript_result_1;
                int tmp_truth_name_1;
                CHECK_OBJECT(par_parent);
                tmp_source_name_48 = par_parent;
                tmp_subscribed_name_17 = LOOKUP_ATTRIBUTE(tmp_source_name_48, const_str_plain_tcg_usb_list);
                if (tmp_subscribed_name_17 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 330;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(var_index);
                tmp_subscript_name_17 = var_index;
                tmp_subscript_result_1 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_17, tmp_subscript_name_17);
                Py_DECREF(tmp_subscribed_name_17);
                if (tmp_subscript_result_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 330;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_truth_name_1 = CHECK_IF_TRUE(tmp_subscript_result_1);
                if (tmp_truth_name_1 == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_subscript_result_1);

                    exception_lineno = 330;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_8 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                Py_DECREF(tmp_subscript_result_1);
                if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_8;
                } else {
                    goto branch_no_8;
                }
                branch_yes_8:;
                {
                    PyObject *tmp_assign_source_10;
                    tmp_assign_source_10 = Py_False;
                    assert(var_matched == NULL);
                    Py_INCREF(tmp_assign_source_10);
                    var_matched = tmp_assign_source_10;
                }
                {
                    PyObject *tmp_assign_source_11;
                    tmp_assign_source_11 = Py_False;
                    assert(var_present == NULL);
                    Py_INCREF(tmp_assign_source_11);
                    var_present = tmp_assign_source_11;
                }
                {
                    PyObject *tmp_assign_source_12;
                    PyObject *tmp_called_instance_10;
                    PyObject *tmp_called_name_12;
                    PyObject *tmp_source_name_49;
                    PyObject *tmp_mvar_value_4;
                    PyObject *tmp_args_element_name_15;
                    PyObject *tmp_left_name_1;
                    PyObject *tmp_source_name_50;
                    PyObject *tmp_right_name_1;
                    tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

                    if (unlikely(tmp_mvar_value_4 == NULL)) {
                        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
                    }

                    if (tmp_mvar_value_4 == NULL) {

                        exception_type = PyExc_NameError;
                        Py_INCREF(exception_type);
                        exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
                        exception_tb = NULL;

                        exception_lineno = 333;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_source_name_49 = tmp_mvar_value_4;
                    tmp_called_name_12 = LOOKUP_ATTRIBUTE(tmp_source_name_49, const_str_plain_popen);
                    if (tmp_called_name_12 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 333;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    CHECK_OBJECT(par_parent);
                    tmp_source_name_50 = par_parent;
                    tmp_left_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_50, const_str_plain_prefix);
                    if (tmp_left_name_1 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_12);

                        exception_lineno = 333;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_right_name_1 = const_str_digest_500f14b62f4ffa958f482307aaaeaaa0;
                    tmp_args_element_name_15 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_1, tmp_right_name_1);
                    Py_DECREF(tmp_left_name_1);
                    if (tmp_args_element_name_15 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_12);

                        exception_lineno = 333;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 333;
                    tmp_called_instance_10 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_12, tmp_args_element_name_15);
                    Py_DECREF(tmp_called_name_12);
                    Py_DECREF(tmp_args_element_name_15);
                    if (tmp_called_instance_10 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 333;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 333;
                    tmp_assign_source_12 = CALL_METHOD_NO_ARGS(tmp_called_instance_10, const_str_plain_read);
                    Py_DECREF(tmp_called_instance_10);
                    if (tmp_assign_source_12 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 333;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    assert(var_txt_s == NULL);
                    var_txt_s = tmp_assign_source_12;
                }
                {
                    PyObject *tmp_assign_source_13;
                    PyObject *tmp_called_instance_11;
                    PyObject *tmp_mvar_value_5;
                    PyObject *tmp_args_element_name_16;
                    PyObject *tmp_args_element_name_17;
                    tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

                    if (unlikely(tmp_mvar_value_5 == NULL)) {
                        tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
                    }

                    if (tmp_mvar_value_5 == NULL) {

                        exception_type = PyExc_NameError;
                        Py_INCREF(exception_type);
                        exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
                        exception_tb = NULL;

                        exception_lineno = 335;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_called_instance_11 = tmp_mvar_value_5;
                    tmp_args_element_name_16 = const_str_digest_b4c2ecd5d1ca6193dd02c4ae2cc51f86;
                    CHECK_OBJECT(var_txt_s);
                    tmp_args_element_name_17 = var_txt_s;
                    frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 335;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_16, tmp_args_element_name_17};
                        tmp_assign_source_13 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_11, const_str_plain_findall, call_args);
                    }

                    if (tmp_assign_source_13 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 335;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    assert(var_list_d == NULL);
                    var_list_d = tmp_assign_source_13;
                }
                {
                    PyObject *tmp_assign_source_14;
                    PyObject *tmp_iter_arg_2;
                    CHECK_OBJECT(var_list_d);
                    tmp_iter_arg_2 = var_list_d;
                    tmp_assign_source_14 = MAKE_ITERATOR(tmp_iter_arg_2);
                    if (tmp_assign_source_14 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 336;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    assert(tmp_for_loop_2__for_iterator == NULL);
                    tmp_for_loop_2__for_iterator = tmp_assign_source_14;
                }
                // Tried code:
                loop_start_2:;
                {
                    PyObject *tmp_next_source_2;
                    PyObject *tmp_assign_source_15;
                    CHECK_OBJECT(tmp_for_loop_2__for_iterator);
                    tmp_next_source_2 = tmp_for_loop_2__for_iterator;
                    tmp_assign_source_15 = ITERATOR_NEXT(tmp_next_source_2);
                    if (tmp_assign_source_15 == NULL) {
                        if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                            goto loop_end_2;
                        } else {

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            exception_lineno = 336;
                            goto try_except_handler_3;
                        }
                    }

                    {
                        PyObject *old = tmp_for_loop_2__iter_value;
                        tmp_for_loop_2__iter_value = tmp_assign_source_15;
                        Py_XDECREF(old);
                    }

                }
                {
                    PyObject *tmp_assign_source_16;
                    CHECK_OBJECT(tmp_for_loop_2__iter_value);
                    tmp_assign_source_16 = tmp_for_loop_2__iter_value;
                    {
                        PyObject *old = var_entry;
                        var_entry = tmp_assign_source_16;
                        Py_INCREF(var_entry);
                        Py_XDECREF(old);
                    }

                }
                {
                    nuitka_bool tmp_condition_result_9;
                    int tmp_or_left_truth_1;
                    nuitka_bool tmp_or_left_value_1;
                    nuitka_bool tmp_or_right_value_1;
                    PyObject *tmp_operand_name_2;
                    PyObject *tmp_operand_name_3;
                    if (var_present == NULL) {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF(exception_type);
                        exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "present");
                        exception_tb = NULL;

                        exception_lineno = 338;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto try_except_handler_3;
                    }

                    tmp_operand_name_2 = var_present;
                    tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
                    if (tmp_res == -1) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 338;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto try_except_handler_3;
                    }
                    tmp_or_left_value_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
                    if (tmp_or_left_truth_1 == 1) {
                        goto or_left_1;
                    } else {
                        goto or_right_1;
                    }
                    or_right_1:;
                    if (var_matched == NULL) {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF(exception_type);
                        exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "matched");
                        exception_tb = NULL;

                        exception_lineno = 338;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto try_except_handler_3;
                    }

                    tmp_operand_name_3 = var_matched;
                    tmp_res = CHECK_IF_TRUE(tmp_operand_name_3);
                    if (tmp_res == -1) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 338;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto try_except_handler_3;
                    }
                    tmp_or_right_value_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    tmp_condition_result_9 = tmp_or_right_value_1;
                    goto or_end_1;
                    or_left_1:;
                    tmp_condition_result_9 = tmp_or_left_value_1;
                    or_end_1:;
                    if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
                        goto branch_yes_9;
                    } else {
                        goto branch_no_9;
                    }
                    branch_yes_9:;
                    {
                        PyObject *tmp_assign_source_17;
                        PyObject *tmp_subscribed_name_18;
                        PyObject *tmp_subscript_name_18;
                        CHECK_OBJECT(var_entry);
                        tmp_subscribed_name_18 = var_entry;
                        tmp_subscript_name_18 = const_int_0;
                        tmp_assign_source_17 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_18, tmp_subscript_name_18, 0);
                        if (tmp_assign_source_17 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 339;
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        {
                            PyObject *old = var_test_dev;
                            var_test_dev = tmp_assign_source_17;
                            Py_XDECREF(old);
                        }

                    }
                    {
                        nuitka_bool tmp_condition_result_10;
                        PyObject *tmp_compexpr_left_8;
                        PyObject *tmp_compexpr_right_8;
                        PyObject *tmp_source_name_51;
                        CHECK_OBJECT(par_parent);
                        tmp_source_name_51 = par_parent;
                        tmp_compexpr_left_8 = LOOKUP_ATTRIBUTE(tmp_source_name_51, const_str_plain_DEV_OS);
                        if (tmp_compexpr_left_8 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 340;
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        tmp_compexpr_right_8 = const_str_plain_Windows;
                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_8, tmp_compexpr_right_8);
                        Py_DECREF(tmp_compexpr_left_8);
                        if (tmp_res == -1) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 340;
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        tmp_condition_result_10 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
                            goto branch_yes_10;
                        } else {
                            goto branch_no_10;
                        }
                        branch_yes_10:;
                        {
                            PyObject *tmp_assign_source_18;
                            PyObject *tmp_left_name_2;
                            PyObject *tmp_right_name_2;
                            tmp_left_name_2 = const_str_digest_03b98ad4acc077de88fea75272d50cbe;
                            CHECK_OBJECT(var_test_dev);
                            tmp_right_name_2 = var_test_dev;
                            tmp_assign_source_18 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_2, tmp_right_name_2);
                            if (tmp_assign_source_18 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 341;
                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                goto try_except_handler_3;
                            }
                            {
                                PyObject *old = var_test_dev;
                                assert(old != NULL);
                                var_test_dev = tmp_assign_source_18;
                                Py_DECREF(old);
                            }

                        }
                        branch_no_10:;
                    }
                    {
                        nuitka_bool tmp_condition_result_11;
                        int tmp_and_left_truth_2;
                        nuitka_bool tmp_and_left_value_2;
                        nuitka_bool tmp_and_right_value_2;
                        PyObject *tmp_compexpr_left_9;
                        PyObject *tmp_compexpr_right_9;
                        PyObject *tmp_source_name_52;
                        int tmp_and_left_truth_3;
                        nuitka_bool tmp_and_left_value_3;
                        nuitka_bool tmp_and_right_value_3;
                        PyObject *tmp_compexpr_left_10;
                        PyObject *tmp_compexpr_right_10;
                        PyObject *tmp_subscribed_name_19;
                        PyObject *tmp_subscript_name_19;
                        PyObject *tmp_subscribed_name_20;
                        PyObject *tmp_source_name_53;
                        PyObject *tmp_subscript_name_20;
                        PyObject *tmp_compexpr_left_11;
                        PyObject *tmp_compexpr_right_11;
                        PyObject *tmp_subscribed_name_21;
                        PyObject *tmp_subscript_name_21;
                        PyObject *tmp_subscribed_name_22;
                        PyObject *tmp_source_name_54;
                        PyObject *tmp_subscript_name_22;
                        CHECK_OBJECT(var_test_dev);
                        tmp_compexpr_left_9 = var_test_dev;
                        CHECK_OBJECT(par_parent);
                        tmp_source_name_52 = par_parent;
                        tmp_compexpr_right_9 = LOOKUP_ATTRIBUTE(tmp_source_name_52, const_str_plain_devname);
                        if (tmp_compexpr_right_9 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 342;
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_9, tmp_compexpr_right_9);
                        Py_DECREF(tmp_compexpr_right_9);
                        if (tmp_res == -1) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 342;
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        tmp_and_left_value_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
                        if (tmp_and_left_truth_2 == 1) {
                            goto and_right_2;
                        } else {
                            goto and_left_2;
                        }
                        and_right_2:;
                        CHECK_OBJECT(var_entry);
                        tmp_subscribed_name_19 = var_entry;
                        tmp_subscript_name_19 = const_int_pos_1;
                        tmp_compexpr_left_10 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_19, tmp_subscript_name_19, 1);
                        if (tmp_compexpr_left_10 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 342;
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        CHECK_OBJECT(par_parent);
                        tmp_source_name_53 = par_parent;
                        tmp_subscribed_name_20 = LOOKUP_ATTRIBUTE(tmp_source_name_53, const_str_plain_vendor_list);
                        if (tmp_subscribed_name_20 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_compexpr_left_10);

                            exception_lineno = 342;
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        CHECK_OBJECT(var_index);
                        tmp_subscript_name_20 = var_index;
                        tmp_compexpr_right_10 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_20, tmp_subscript_name_20);
                        Py_DECREF(tmp_subscribed_name_20);
                        if (tmp_compexpr_right_10 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_compexpr_left_10);

                            exception_lineno = 342;
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_10, tmp_compexpr_right_10);
                        Py_DECREF(tmp_compexpr_left_10);
                        Py_DECREF(tmp_compexpr_right_10);
                        if (tmp_res == -1) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 342;
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        tmp_and_left_value_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        tmp_and_left_truth_3 = tmp_and_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
                        if (tmp_and_left_truth_3 == 1) {
                            goto and_right_3;
                        } else {
                            goto and_left_3;
                        }
                        and_right_3:;
                        CHECK_OBJECT(var_entry);
                        tmp_subscribed_name_21 = var_entry;
                        tmp_subscript_name_21 = const_int_pos_2;
                        tmp_compexpr_left_11 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_21, tmp_subscript_name_21, 2);
                        if (tmp_compexpr_left_11 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 342;
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        CHECK_OBJECT(par_parent);
                        tmp_source_name_54 = par_parent;
                        tmp_subscribed_name_22 = LOOKUP_ATTRIBUTE(tmp_source_name_54, const_str_plain_sn_list);
                        if (tmp_subscribed_name_22 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_compexpr_left_11);

                            exception_lineno = 342;
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        CHECK_OBJECT(var_index);
                        tmp_subscript_name_22 = var_index;
                        tmp_compexpr_right_11 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_22, tmp_subscript_name_22);
                        Py_DECREF(tmp_subscribed_name_22);
                        if (tmp_compexpr_right_11 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_compexpr_left_11);

                            exception_lineno = 342;
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_11, tmp_compexpr_right_11);
                        Py_DECREF(tmp_compexpr_left_11);
                        Py_DECREF(tmp_compexpr_right_11);
                        if (tmp_res == -1) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 342;
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        tmp_and_right_value_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        tmp_and_right_value_2 = tmp_and_right_value_3;
                        goto and_end_3;
                        and_left_3:;
                        tmp_and_right_value_2 = tmp_and_left_value_3;
                        and_end_3:;
                        tmp_condition_result_11 = tmp_and_right_value_2;
                        goto and_end_2;
                        and_left_2:;
                        tmp_condition_result_11 = tmp_and_left_value_2;
                        and_end_2:;
                        if (tmp_condition_result_11 == NUITKA_BOOL_TRUE) {
                            goto branch_yes_11;
                        } else {
                            goto branch_no_11;
                        }
                        branch_yes_11:;
                        {
                            PyObject *tmp_assign_source_19;
                            tmp_assign_source_19 = Py_True;
                            {
                                PyObject *old = var_present;
                                var_present = tmp_assign_source_19;
                                Py_INCREF(var_present);
                                Py_XDECREF(old);
                            }

                        }
                        {
                            PyObject *tmp_assign_source_20;
                            tmp_assign_source_20 = Py_True;
                            {
                                PyObject *old = var_matched;
                                var_matched = tmp_assign_source_20;
                                Py_INCREF(var_matched);
                                Py_XDECREF(old);
                            }

                        }
                        goto branch_end_11;
                        branch_no_11:;
                        {
                            nuitka_bool tmp_condition_result_12;
                            int tmp_and_left_truth_4;
                            nuitka_bool tmp_and_left_value_4;
                            nuitka_bool tmp_and_right_value_4;
                            PyObject *tmp_compexpr_left_12;
                            PyObject *tmp_compexpr_right_12;
                            PyObject *tmp_subscribed_name_23;
                            PyObject *tmp_subscript_name_23;
                            PyObject *tmp_subscribed_name_24;
                            PyObject *tmp_source_name_55;
                            PyObject *tmp_subscript_name_24;
                            PyObject *tmp_compexpr_left_13;
                            PyObject *tmp_compexpr_right_13;
                            PyObject *tmp_subscribed_name_25;
                            PyObject *tmp_subscript_name_25;
                            PyObject *tmp_subscribed_name_26;
                            PyObject *tmp_source_name_56;
                            PyObject *tmp_subscript_name_26;
                            CHECK_OBJECT(var_entry);
                            tmp_subscribed_name_23 = var_entry;
                            tmp_subscript_name_23 = const_int_pos_1;
                            tmp_compexpr_left_12 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_23, tmp_subscript_name_23, 1);
                            if (tmp_compexpr_left_12 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 345;
                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                goto try_except_handler_3;
                            }
                            CHECK_OBJECT(par_parent);
                            tmp_source_name_55 = par_parent;
                            tmp_subscribed_name_24 = LOOKUP_ATTRIBUTE(tmp_source_name_55, const_str_plain_vendor_list);
                            if (tmp_subscribed_name_24 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                Py_DECREF(tmp_compexpr_left_12);

                                exception_lineno = 345;
                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                goto try_except_handler_3;
                            }
                            CHECK_OBJECT(var_index);
                            tmp_subscript_name_24 = var_index;
                            tmp_compexpr_right_12 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_24, tmp_subscript_name_24);
                            Py_DECREF(tmp_subscribed_name_24);
                            if (tmp_compexpr_right_12 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                Py_DECREF(tmp_compexpr_left_12);

                                exception_lineno = 345;
                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                goto try_except_handler_3;
                            }
                            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_12, tmp_compexpr_right_12);
                            Py_DECREF(tmp_compexpr_left_12);
                            Py_DECREF(tmp_compexpr_right_12);
                            if (tmp_res == -1) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 345;
                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                goto try_except_handler_3;
                            }
                            tmp_and_left_value_4 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                            tmp_and_left_truth_4 = tmp_and_left_value_4 == NUITKA_BOOL_TRUE ? 1 : 0;
                            if (tmp_and_left_truth_4 == 1) {
                                goto and_right_4;
                            } else {
                                goto and_left_4;
                            }
                            and_right_4:;
                            CHECK_OBJECT(var_entry);
                            tmp_subscribed_name_25 = var_entry;
                            tmp_subscript_name_25 = const_int_pos_2;
                            tmp_compexpr_left_13 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_25, tmp_subscript_name_25, 2);
                            if (tmp_compexpr_left_13 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 345;
                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                goto try_except_handler_3;
                            }
                            CHECK_OBJECT(par_parent);
                            tmp_source_name_56 = par_parent;
                            tmp_subscribed_name_26 = LOOKUP_ATTRIBUTE(tmp_source_name_56, const_str_plain_sn_list);
                            if (tmp_subscribed_name_26 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                Py_DECREF(tmp_compexpr_left_13);

                                exception_lineno = 345;
                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                goto try_except_handler_3;
                            }
                            CHECK_OBJECT(var_index);
                            tmp_subscript_name_26 = var_index;
                            tmp_compexpr_right_13 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_26, tmp_subscript_name_26);
                            Py_DECREF(tmp_subscribed_name_26);
                            if (tmp_compexpr_right_13 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                                Py_DECREF(tmp_compexpr_left_13);

                                exception_lineno = 345;
                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                goto try_except_handler_3;
                            }
                            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_13, tmp_compexpr_right_13);
                            Py_DECREF(tmp_compexpr_left_13);
                            Py_DECREF(tmp_compexpr_right_13);
                            if (tmp_res == -1) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 345;
                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                goto try_except_handler_3;
                            }
                            tmp_and_right_value_4 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                            tmp_condition_result_12 = tmp_and_right_value_4;
                            goto and_end_4;
                            and_left_4:;
                            tmp_condition_result_12 = tmp_and_left_value_4;
                            and_end_4:;
                            if (tmp_condition_result_12 == NUITKA_BOOL_TRUE) {
                                goto branch_yes_12;
                            } else {
                                goto branch_no_12;
                            }
                            branch_yes_12:;
                            {
                                PyObject *tmp_assign_source_21;
                                tmp_assign_source_21 = Py_True;
                                {
                                    PyObject *old = var_present;
                                    var_present = tmp_assign_source_21;
                                    Py_INCREF(var_present);
                                    Py_XDECREF(old);
                                }

                            }
                            {
                                PyObject *tmp_assign_source_22;
                                CHECK_OBJECT(var_test_dev);
                                tmp_assign_source_22 = var_test_dev;
                                {
                                    PyObject *old = var_new_devname;
                                    var_new_devname = tmp_assign_source_22;
                                    Py_INCREF(var_new_devname);
                                    Py_XDECREF(old);
                                }

                            }
                            branch_no_12:;
                        }
                        branch_end_11:;
                    }
                    branch_no_9:;
                }
                if (CONSIDER_THREADING() == false) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 336;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto try_except_handler_3;
                }
                goto loop_start_2;
                loop_end_2:;
                goto try_end_2;
                // Exception handler code:
                try_except_handler_3:;
                exception_keeper_type_2 = exception_type;
                exception_keeper_value_2 = exception_value;
                exception_keeper_tb_2 = exception_tb;
                exception_keeper_lineno_2 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                Py_XDECREF(tmp_for_loop_2__iter_value);
                tmp_for_loop_2__iter_value = NULL;

                CHECK_OBJECT((PyObject *)tmp_for_loop_2__for_iterator);
                Py_DECREF(tmp_for_loop_2__for_iterator);
                tmp_for_loop_2__for_iterator = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_2;
                exception_value = exception_keeper_value_2;
                exception_tb = exception_keeper_tb_2;
                exception_lineno = exception_keeper_lineno_2;

                goto frame_exception_exit_1;
                // End of try:
                try_end_2:;
                Py_XDECREF(tmp_for_loop_2__iter_value);
                tmp_for_loop_2__iter_value = NULL;

                CHECK_OBJECT((PyObject *)tmp_for_loop_2__for_iterator);
                Py_DECREF(tmp_for_loop_2__for_iterator);
                tmp_for_loop_2__for_iterator = NULL;

                {
                    nuitka_bool tmp_condition_result_13;
                    int tmp_and_left_truth_5;
                    nuitka_bool tmp_and_left_value_5;
                    nuitka_bool tmp_and_right_value_5;
                    int tmp_truth_name_2;
                    PyObject *tmp_operand_name_4;
                    if (var_present == NULL) {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF(exception_type);
                        exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "present");
                        exception_tb = NULL;

                        exception_lineno = 348;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_truth_name_2 = CHECK_IF_TRUE(var_present);
                    if (tmp_truth_name_2 == -1) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 348;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_and_left_value_5 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    tmp_and_left_truth_5 = tmp_and_left_value_5 == NUITKA_BOOL_TRUE ? 1 : 0;
                    if (tmp_and_left_truth_5 == 1) {
                        goto and_right_5;
                    } else {
                        goto and_left_5;
                    }
                    and_right_5:;
                    if (var_matched == NULL) {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF(exception_type);
                        exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "matched");
                        exception_tb = NULL;

                        exception_lineno = 348;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_operand_name_4 = var_matched;
                    tmp_res = CHECK_IF_TRUE(tmp_operand_name_4);
                    if (tmp_res == -1) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 348;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_and_right_value_5 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    tmp_condition_result_13 = tmp_and_right_value_5;
                    goto and_end_5;
                    and_left_5:;
                    tmp_condition_result_13 = tmp_and_left_value_5;
                    and_end_5:;
                    if (tmp_condition_result_13 == NUITKA_BOOL_TRUE) {
                        goto branch_yes_13;
                    } else {
                        goto branch_no_13;
                    }
                    branch_yes_13:;
                    {
                        PyObject *tmp_assattr_name_2;
                        PyObject *tmp_assattr_target_2;
                        if (var_new_devname == NULL) {

                            exception_type = PyExc_UnboundLocalError;
                            Py_INCREF(exception_type);
                            exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "new_devname");
                            exception_tb = NULL;

                            exception_lineno = 349;
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_assattr_name_2 = var_new_devname;
                        CHECK_OBJECT(par_parent);
                        tmp_assattr_target_2 = par_parent;
                        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_devname, tmp_assattr_name_2);
                        if (tmp_result == false) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 349;
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                    }
                    branch_no_13:;
                }
                {
                    nuitka_bool tmp_condition_result_14;
                    int tmp_or_left_truth_2;
                    nuitka_bool tmp_or_left_value_2;
                    nuitka_bool tmp_or_right_value_2;
                    PyObject *tmp_operand_name_5;
                    PyObject *tmp_operand_name_6;
                    if (var_present == NULL) {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF(exception_type);
                        exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "present");
                        exception_tb = NULL;

                        exception_lineno = 350;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_operand_name_5 = var_present;
                    tmp_res = CHECK_IF_TRUE(tmp_operand_name_5);
                    if (tmp_res == -1) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 350;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_or_left_value_2 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    tmp_or_left_truth_2 = tmp_or_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
                    if (tmp_or_left_truth_2 == 1) {
                        goto or_left_2;
                    } else {
                        goto or_right_2;
                    }
                    or_right_2:;
                    if (var_matched == NULL) {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF(exception_type);
                        exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "matched");
                        exception_tb = NULL;

                        exception_lineno = 350;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_operand_name_6 = var_matched;
                    tmp_res = CHECK_IF_TRUE(tmp_operand_name_6);
                    if (tmp_res == -1) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 350;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_or_right_value_2 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    tmp_condition_result_14 = tmp_or_right_value_2;
                    goto or_end_2;
                    or_left_2:;
                    tmp_condition_result_14 = tmp_or_left_value_2;
                    or_end_2:;
                    if (tmp_condition_result_14 == NUITKA_BOOL_TRUE) {
                        goto branch_yes_14;
                    } else {
                        goto branch_no_14;
                    }
                    branch_yes_14:;
                    {
                        nuitka_bool tmp_assign_source_23;
                        tmp_assign_source_23 = NUITKA_BOOL_TRUE;
                        var_rescan_needed = tmp_assign_source_23;
                    }
                    branch_no_14:;
                }
                branch_no_8:;
            }
            {
                PyObject *tmp_assign_source_24;
                PyObject *tmp_called_instance_12;
                PyObject *tmp_called_name_13;
                PyObject *tmp_source_name_57;
                PyObject *tmp_mvar_value_6;
                PyObject *tmp_args_element_name_18;
                PyObject *tmp_left_name_3;
                PyObject *tmp_left_name_4;
                PyObject *tmp_source_name_58;
                PyObject *tmp_right_name_3;
                PyObject *tmp_right_name_4;
                PyObject *tmp_source_name_59;
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

                if (unlikely(tmp_mvar_value_6 == NULL)) {
                    tmp_mvar_value_6 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
                }

                if (tmp_mvar_value_6 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
                    exception_tb = NULL;

                    exception_lineno = 353;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_57 = tmp_mvar_value_6;
                tmp_called_name_13 = LOOKUP_ATTRIBUTE(tmp_source_name_57, const_str_plain_popen);
                if (tmp_called_name_13 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 353;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_parent);
                tmp_source_name_58 = par_parent;
                tmp_left_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_58, const_str_plain_prefix);
                if (tmp_left_name_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_13);

                    exception_lineno = 353;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_3 = const_str_digest_be268c849f1c37b6177304e3023d15bb;
                tmp_left_name_3 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_4, tmp_right_name_3);
                Py_DECREF(tmp_left_name_4);
                if (tmp_left_name_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_13);

                    exception_lineno = 353;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_parent);
                tmp_source_name_59 = par_parent;
                tmp_right_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_59, const_str_plain_devname);
                if (tmp_right_name_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_13);
                    Py_DECREF(tmp_left_name_3);

                    exception_lineno = 353;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_18 = BINARY_OPERATION_ADD_OBJECT_OBJECT(tmp_left_name_3, tmp_right_name_4);
                Py_DECREF(tmp_left_name_3);
                Py_DECREF(tmp_right_name_4);
                if (tmp_args_element_name_18 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_13);

                    exception_lineno = 353;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 353;
                tmp_called_instance_12 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_13, tmp_args_element_name_18);
                Py_DECREF(tmp_called_name_13);
                Py_DECREF(tmp_args_element_name_18);
                if (tmp_called_instance_12 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 353;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 353;
                tmp_assign_source_24 = CALL_METHOD_NO_ARGS(tmp_called_instance_12, const_str_plain_read);
                Py_DECREF(tmp_called_instance_12);
                if (tmp_assign_source_24 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 353;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert(var_txt == NULL);
                var_txt = tmp_assign_source_24;
            }
            {
                PyObject *tmp_assign_source_25;
                PyObject *tmp_list_element_1;
                PyObject *tmp_left_name_5;
                PyObject *tmp_left_name_6;
                PyObject *tmp_right_name_5;
                PyObject *tmp_source_name_60;
                PyObject *tmp_right_name_6;
                tmp_left_name_6 = const_str_digest_6fea0baf31175ee82bc02d0851e51237;
                CHECK_OBJECT(par_parent);
                tmp_source_name_60 = par_parent;
                tmp_right_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_60, const_str_plain_devname);
                if (tmp_right_name_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 355;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_5 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_6, tmp_right_name_5);
                Py_DECREF(tmp_right_name_5);
                if (tmp_left_name_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 355;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_6 = const_str_newline;
                tmp_list_element_1 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_5, tmp_right_name_6);
                Py_DECREF(tmp_left_name_5);
                if (tmp_list_element_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 355;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_assign_source_25 = PyList_New(1);
                PyList_SET_ITEM(tmp_assign_source_25, 0, tmp_list_element_1);
                assert(var_queryTextList == NULL);
                var_queryTextList = tmp_assign_source_25;
            }
            {
                PyObject *tmp_called_instance_13;
                PyObject *tmp_call_result_20;
                CHECK_OBJECT(var_queryTextList);
                tmp_called_instance_13 = var_queryTextList;
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 362;
                tmp_call_result_20 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_13, const_str_plain_append, &PyTuple_GET_ITEM(const_tuple_str_digest_07dc242546883a69906026f99873ffbe_tuple, 0));

                if (tmp_call_result_20 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 362;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_20);
            }
            {
                PyObject *tmp_called_name_14;
                PyObject *tmp_source_name_61;
                PyObject *tmp_call_result_21;
                PyObject *tmp_args_element_name_19;
                PyObject *tmp_left_name_7;
                PyObject *tmp_left_name_8;
                PyObject *tmp_right_name_7;
                PyObject *tmp_called_instance_14;
                PyObject *tmp_source_name_62;
                PyObject *tmp_right_name_8;
                CHECK_OBJECT(var_queryTextList);
                tmp_source_name_61 = var_queryTextList;
                tmp_called_name_14 = LOOKUP_ATTRIBUTE(tmp_source_name_61, const_str_plain_append);
                if (tmp_called_name_14 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 364;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_8 = const_str_digest_a51def470837013d7f981c2dccf54a1a;
                CHECK_OBJECT(par_parent);
                tmp_source_name_62 = par_parent;
                tmp_called_instance_14 = LOOKUP_ATTRIBUTE(tmp_source_name_62, const_str_plain_dev_vendor);
                if (tmp_called_instance_14 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_14);

                    exception_lineno = 364;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 364;
                tmp_right_name_7 = CALL_METHOD_NO_ARGS(tmp_called_instance_14, const_str_plain_get_text);
                Py_DECREF(tmp_called_instance_14);
                if (tmp_right_name_7 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_14);

                    exception_lineno = 364;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_7 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_8, tmp_right_name_7);
                Py_DECREF(tmp_right_name_7);
                if (tmp_left_name_7 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_14);

                    exception_lineno = 364;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_8 = const_str_newline;
                tmp_args_element_name_19 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_7, tmp_right_name_8);
                Py_DECREF(tmp_left_name_7);
                if (tmp_args_element_name_19 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_14);

                    exception_lineno = 364;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 364;
                tmp_call_result_21 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_14, tmp_args_element_name_19);
                Py_DECREF(tmp_called_name_14);
                Py_DECREF(tmp_args_element_name_19);
                if (tmp_call_result_21 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 364;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_21);
            }
            {
                PyObject *tmp_called_name_15;
                PyObject *tmp_source_name_63;
                PyObject *tmp_call_result_22;
                PyObject *tmp_args_element_name_20;
                PyObject *tmp_left_name_9;
                PyObject *tmp_left_name_10;
                PyObject *tmp_right_name_9;
                PyObject *tmp_called_instance_15;
                PyObject *tmp_source_name_64;
                PyObject *tmp_right_name_10;
                CHECK_OBJECT(var_queryTextList);
                tmp_source_name_63 = var_queryTextList;
                tmp_called_name_15 = LOOKUP_ATTRIBUTE(tmp_source_name_63, const_str_plain_append);
                if (tmp_called_name_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 365;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_10 = const_str_digest_59d1f4a47a49dcdffdedaaf47e61a6ce;
                CHECK_OBJECT(par_parent);
                tmp_source_name_64 = par_parent;
                tmp_called_instance_15 = LOOKUP_ATTRIBUTE(tmp_source_name_64, const_str_plain_dev_sn);
                if (tmp_called_instance_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_15);

                    exception_lineno = 365;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 365;
                tmp_right_name_9 = CALL_METHOD_NO_ARGS(tmp_called_instance_15, const_str_plain_get_text);
                Py_DECREF(tmp_called_instance_15);
                if (tmp_right_name_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_15);

                    exception_lineno = 365;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_9 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_10, tmp_right_name_9);
                Py_DECREF(tmp_right_name_9);
                if (tmp_left_name_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_15);

                    exception_lineno = 365;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_10 = const_str_newline;
                tmp_args_element_name_20 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_9, tmp_right_name_10);
                Py_DECREF(tmp_left_name_9);
                if (tmp_args_element_name_20 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_15);

                    exception_lineno = 365;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 365;
                tmp_call_result_22 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_15, tmp_args_element_name_20);
                Py_DECREF(tmp_called_name_15);
                Py_DECREF(tmp_args_element_name_20);
                if (tmp_call_result_22 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 365;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_22);
            }
            {
                PyObject *tmp_called_name_16;
                PyObject *tmp_source_name_65;
                PyObject *tmp_call_result_23;
                PyObject *tmp_args_element_name_21;
                PyObject *tmp_left_name_11;
                PyObject *tmp_left_name_12;
                PyObject *tmp_right_name_11;
                PyObject *tmp_called_instance_16;
                PyObject *tmp_source_name_66;
                PyObject *tmp_right_name_12;
                CHECK_OBJECT(var_queryTextList);
                tmp_source_name_65 = var_queryTextList;
                tmp_called_name_16 = LOOKUP_ATTRIBUTE(tmp_source_name_65, const_str_plain_append);
                if (tmp_called_name_16 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 366;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_12 = const_str_digest_e02922279d2c1410aed5cd1ced9cecdb;
                CHECK_OBJECT(par_parent);
                tmp_source_name_66 = par_parent;
                tmp_called_instance_16 = LOOKUP_ATTRIBUTE(tmp_source_name_66, const_str_plain_dev_opal_ver);
                if (tmp_called_instance_16 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_16);

                    exception_lineno = 366;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 366;
                tmp_right_name_11 = CALL_METHOD_NO_ARGS(tmp_called_instance_16, const_str_plain_get_text);
                Py_DECREF(tmp_called_instance_16);
                if (tmp_right_name_11 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_16);

                    exception_lineno = 366;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_11 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_12, tmp_right_name_11);
                Py_DECREF(tmp_right_name_11);
                if (tmp_left_name_11 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_16);

                    exception_lineno = 366;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_12 = const_str_newline;
                tmp_args_element_name_21 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_11, tmp_right_name_12);
                Py_DECREF(tmp_left_name_11);
                if (tmp_args_element_name_21 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_16);

                    exception_lineno = 366;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 366;
                tmp_call_result_23 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_16, tmp_args_element_name_21);
                Py_DECREF(tmp_called_name_16);
                Py_DECREF(tmp_args_element_name_21);
                if (tmp_call_result_23 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 366;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_23);
            }
            {
                PyObject *tmp_called_name_17;
                PyObject *tmp_source_name_67;
                PyObject *tmp_call_result_24;
                PyObject *tmp_args_element_name_22;
                PyObject *tmp_left_name_13;
                PyObject *tmp_left_name_14;
                PyObject *tmp_right_name_13;
                PyObject *tmp_called_instance_17;
                PyObject *tmp_source_name_68;
                PyObject *tmp_right_name_14;
                CHECK_OBJECT(var_queryTextList);
                tmp_source_name_67 = var_queryTextList;
                tmp_called_name_17 = LOOKUP_ATTRIBUTE(tmp_source_name_67, const_str_plain_append);
                if (tmp_called_name_17 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 367;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_14 = const_str_digest_95d5e771057426593bbb37b17c6dbf84;
                CHECK_OBJECT(par_parent);
                tmp_source_name_68 = par_parent;
                tmp_called_instance_17 = LOOKUP_ATTRIBUTE(tmp_source_name_68, const_str_plain_dev_msid);
                if (tmp_called_instance_17 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_17);

                    exception_lineno = 367;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 367;
                tmp_right_name_13 = CALL_METHOD_NO_ARGS(tmp_called_instance_17, const_str_plain_get_text);
                Py_DECREF(tmp_called_instance_17);
                if (tmp_right_name_13 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_17);

                    exception_lineno = 367;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_13 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_14, tmp_right_name_13);
                Py_DECREF(tmp_right_name_13);
                if (tmp_left_name_13 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_17);

                    exception_lineno = 367;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_14 = const_str_newline;
                tmp_args_element_name_22 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_13, tmp_right_name_14);
                Py_DECREF(tmp_left_name_13);
                if (tmp_args_element_name_22 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_17);

                    exception_lineno = 367;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 367;
                tmp_call_result_24 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_17, tmp_args_element_name_22);
                Py_DECREF(tmp_called_name_17);
                Py_DECREF(tmp_args_element_name_22);
                if (tmp_call_result_24 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 367;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_24);
            }
            {
                PyObject *tmp_assign_source_26;
                PyObject *tmp_called_instance_18;
                PyObject *tmp_called_name_18;
                PyObject *tmp_source_name_69;
                PyObject *tmp_mvar_value_7;
                PyObject *tmp_args_element_name_23;
                PyObject *tmp_left_name_15;
                PyObject *tmp_left_name_16;
                PyObject *tmp_source_name_70;
                PyObject *tmp_right_name_15;
                PyObject *tmp_right_name_16;
                PyObject *tmp_source_name_71;
                tmp_mvar_value_7 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

                if (unlikely(tmp_mvar_value_7 == NULL)) {
                    tmp_mvar_value_7 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
                }

                if (tmp_mvar_value_7 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
                    exception_tb = NULL;

                    exception_lineno = 369;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_69 = tmp_mvar_value_7;
                tmp_called_name_18 = LOOKUP_ATTRIBUTE(tmp_source_name_69, const_str_plain_popen);
                if (tmp_called_name_18 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 369;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_parent);
                tmp_source_name_70 = par_parent;
                tmp_left_name_16 = LOOKUP_ATTRIBUTE(tmp_source_name_70, const_str_plain_prefix);
                if (tmp_left_name_16 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_18);

                    exception_lineno = 369;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_15 = const_str_digest_dcaee1180da43b85258ccdaded50e8d8;
                tmp_left_name_15 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_16, tmp_right_name_15);
                Py_DECREF(tmp_left_name_16);
                if (tmp_left_name_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_18);

                    exception_lineno = 369;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_parent);
                tmp_source_name_71 = par_parent;
                tmp_right_name_16 = LOOKUP_ATTRIBUTE(tmp_source_name_71, const_str_plain_devname);
                if (tmp_right_name_16 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_18);
                    Py_DECREF(tmp_left_name_15);

                    exception_lineno = 369;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_23 = BINARY_OPERATION_ADD_OBJECT_OBJECT(tmp_left_name_15, tmp_right_name_16);
                Py_DECREF(tmp_left_name_15);
                Py_DECREF(tmp_right_name_16);
                if (tmp_args_element_name_23 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_18);

                    exception_lineno = 369;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 369;
                tmp_called_instance_18 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_18, tmp_args_element_name_23);
                Py_DECREF(tmp_called_name_18);
                Py_DECREF(tmp_args_element_name_23);
                if (tmp_called_instance_18 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 369;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 369;
                tmp_assign_source_26 = CALL_METHOD_NO_ARGS(tmp_called_instance_18, const_str_plain_read);
                Py_DECREF(tmp_called_instance_18);
                if (tmp_assign_source_26 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 369;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert(var_txtState == NULL);
                var_txtState = tmp_assign_source_26;
            }
            {
                PyObject *tmp_assign_source_27;
                PyObject *tmp_iter_arg_3;
                PyObject *tmp_range_arg_2;
                CHECK_OBJECT(var_dl_len);
                tmp_range_arg_2 = var_dl_len;
                tmp_iter_arg_3 = BUILTIN_RANGE(tmp_range_arg_2);
                if (tmp_iter_arg_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 370;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_assign_source_27 = MAKE_ITERATOR(tmp_iter_arg_3);
                Py_DECREF(tmp_iter_arg_3);
                if (tmp_assign_source_27 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 370;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert(tmp_for_loop_3__for_iterator == NULL);
                tmp_for_loop_3__for_iterator = tmp_assign_source_27;
            }
            // Tried code:
            loop_start_3:;
            {
                PyObject *tmp_next_source_3;
                PyObject *tmp_assign_source_28;
                CHECK_OBJECT(tmp_for_loop_3__for_iterator);
                tmp_next_source_3 = tmp_for_loop_3__for_iterator;
                tmp_assign_source_28 = ITERATOR_NEXT(tmp_next_source_3);
                if (tmp_assign_source_28 == NULL) {
                    if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                        goto loop_end_3;
                    } else {

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        exception_lineno = 370;
                        goto try_except_handler_4;
                    }
                }

                {
                    PyObject *old = tmp_for_loop_3__iter_value;
                    tmp_for_loop_3__iter_value = tmp_assign_source_28;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_29;
                CHECK_OBJECT(tmp_for_loop_3__iter_value);
                tmp_assign_source_29 = tmp_for_loop_3__iter_value;
                {
                    PyObject *old = var_i;
                    var_i = tmp_assign_source_29;
                    Py_INCREF(var_i);
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_called_instance_19;
                PyObject *tmp_mvar_value_8;
                PyObject *tmp_call_result_25;
                PyObject *tmp_args_element_name_24;
                tmp_mvar_value_8 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_runop);

                if (unlikely(tmp_mvar_value_8 == NULL)) {
                    tmp_mvar_value_8 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_runop);
                }

                if (tmp_mvar_value_8 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 490 ], 34, 0);
                    exception_tb = NULL;

                    exception_lineno = 371;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto try_except_handler_4;
                }

                tmp_called_instance_19 = tmp_mvar_value_8;
                CHECK_OBJECT(var_i);
                tmp_args_element_name_24 = var_i;
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 371;
                {
                    PyObject *call_args[] = {tmp_args_element_name_24};
                    tmp_call_result_25 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_19, const_str_plain_postlock, call_args);
                }

                if (tmp_call_result_25 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 371;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto try_except_handler_4;
                }
                Py_DECREF(tmp_call_result_25);
            }
            if (CONSIDER_THREADING() == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 370;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto try_except_handler_4;
            }
            goto loop_start_3;
            loop_end_3:;
            goto try_end_3;
            // Exception handler code:
            try_except_handler_4:;
            exception_keeper_type_3 = exception_type;
            exception_keeper_value_3 = exception_value;
            exception_keeper_tb_3 = exception_tb;
            exception_keeper_lineno_3 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF(tmp_for_loop_3__iter_value);
            tmp_for_loop_3__iter_value = NULL;

            CHECK_OBJECT((PyObject *)tmp_for_loop_3__for_iterator);
            Py_DECREF(tmp_for_loop_3__for_iterator);
            tmp_for_loop_3__for_iterator = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_3;
            exception_value = exception_keeper_value_3;
            exception_tb = exception_keeper_tb_3;
            exception_lineno = exception_keeper_lineno_3;

            goto frame_exception_exit_1;
            // End of try:
            try_end_3:;
            Py_XDECREF(tmp_for_loop_3__iter_value);
            tmp_for_loop_3__iter_value = NULL;

            CHECK_OBJECT((PyObject *)tmp_for_loop_3__for_iterator);
            Py_DECREF(tmp_for_loop_3__for_iterator);
            tmp_for_loop_3__for_iterator = NULL;

            {
                PyObject *tmp_assign_source_30;
                PyObject *tmp_called_instance_20;
                PyObject *tmp_mvar_value_9;
                PyObject *tmp_args_element_name_25;
                PyObject *tmp_args_element_name_26;
                tmp_mvar_value_9 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

                if (unlikely(tmp_mvar_value_9 == NULL)) {
                    tmp_mvar_value_9 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
                }

                if (tmp_mvar_value_9 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
                    exception_tb = NULL;

                    exception_lineno = 373;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_20 = tmp_mvar_value_9;
                tmp_args_element_name_25 = const_str_digest_495cc6fe47e97cc717d1226c09de9126;
                CHECK_OBJECT(var_txtState);
                tmp_args_element_name_26 = var_txtState;
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 373;
                {
                    PyObject *call_args[] = {tmp_args_element_name_25, tmp_args_element_name_26};
                    tmp_assign_source_30 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_20, const_str_plain_search, call_args);
                }

                if (tmp_assign_source_30 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 373;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert(var_m == NULL);
                var_m = tmp_assign_source_30;
            }
            {
                nuitka_bool tmp_condition_result_15;
                int tmp_truth_name_3;
                CHECK_OBJECT(var_m);
                tmp_truth_name_3 = CHECK_IF_TRUE(var_m);
                if (tmp_truth_name_3 == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 374;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_15 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_15 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_15;
                } else {
                    goto branch_no_15;
                }
                branch_yes_15:;
                {
                    PyObject *tmp_assign_source_31;
                    PyObject *tmp_called_instance_21;
                    CHECK_OBJECT(var_m);
                    tmp_called_instance_21 = var_m;
                    frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 375;
                    tmp_assign_source_31 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_21, const_str_plain_group, &PyTuple_GET_ITEM(const_tuple_int_pos_1_tuple, 0));

                    if (tmp_assign_source_31 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 375;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    assert(var_admin_state == NULL);
                    var_admin_state = tmp_assign_source_31;
                }
                {
                    PyObject *tmp_assign_source_32;
                    PyObject *tmp_called_instance_22;
                    CHECK_OBJECT(var_m);
                    tmp_called_instance_22 = var_m;
                    frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 376;
                    tmp_assign_source_32 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_22, const_str_plain_group, &PyTuple_GET_ITEM(const_tuple_int_pos_2_tuple, 0));

                    if (tmp_assign_source_32 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 376;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    assert(var_locking_state == NULL);
                    var_locking_state = tmp_assign_source_32;
                }
                {
                    PyObject *tmp_called_name_19;
                    PyObject *tmp_source_name_72;
                    PyObject *tmp_call_result_26;
                    PyObject *tmp_args_element_name_27;
                    PyObject *tmp_left_name_17;
                    PyObject *tmp_left_name_18;
                    PyObject *tmp_left_name_19;
                    PyObject *tmp_left_name_20;
                    PyObject *tmp_right_name_17;
                    PyObject *tmp_right_name_18;
                    PyObject *tmp_right_name_19;
                    PyObject *tmp_right_name_20;
                    CHECK_OBJECT(var_queryTextList);
                    tmp_source_name_72 = var_queryTextList;
                    tmp_called_name_19 = LOOKUP_ATTRIBUTE(tmp_source_name_72, const_str_plain_append);
                    if (tmp_called_name_19 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 378;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_left_name_20 = const_str_digest_a48fb3cccdf20edefeb9532e6dd80a5f;
                    CHECK_OBJECT(var_admin_state);
                    tmp_right_name_17 = var_admin_state;
                    tmp_left_name_19 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_20, tmp_right_name_17);
                    if (tmp_left_name_19 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_19);

                        exception_lineno = 378;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_right_name_18 = const_str_digest_9f764a78a338a7c43469b8b3dd335859;
                    tmp_left_name_18 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_19, tmp_right_name_18);
                    Py_DECREF(tmp_left_name_19);
                    if (tmp_left_name_18 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_19);

                        exception_lineno = 378;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    CHECK_OBJECT(var_locking_state);
                    tmp_right_name_19 = var_locking_state;
                    tmp_left_name_17 = BINARY_OPERATION_ADD_OBJECT_OBJECT(tmp_left_name_18, tmp_right_name_19);
                    Py_DECREF(tmp_left_name_18);
                    if (tmp_left_name_17 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_19);

                        exception_lineno = 378;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_right_name_20 = const_str_digest_10be36161b689e46fcd9ecb36151f3bf;
                    tmp_args_element_name_27 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_17, tmp_right_name_20);
                    Py_DECREF(tmp_left_name_17);
                    if (tmp_args_element_name_27 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_19);

                        exception_lineno = 378;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 378;
                    tmp_call_result_26 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_19, tmp_args_element_name_27);
                    Py_DECREF(tmp_called_name_19);
                    Py_DECREF(tmp_args_element_name_27);
                    if (tmp_call_result_26 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 378;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF(tmp_call_result_26);
                }
                branch_no_15:;
            }
            {
                PyObject *tmp_assign_source_33;
                tmp_assign_source_33 = LIST_COPY(const_list_025210018ed00a12cbd44c6743181f29_list);
                assert(var_t == NULL);
                var_t = tmp_assign_source_33;
            }
            {
                PyObject *tmp_assign_source_34;
                PyObject *tmp_iter_arg_4;
                CHECK_OBJECT(var_t);
                tmp_iter_arg_4 = var_t;
                tmp_assign_source_34 = MAKE_ITERATOR(tmp_iter_arg_4);
                if (tmp_assign_source_34 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 388;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert(tmp_for_loop_4__for_iterator == NULL);
                tmp_for_loop_4__for_iterator = tmp_assign_source_34;
            }
            // Tried code:
            loop_start_4:;
            {
                PyObject *tmp_next_source_4;
                PyObject *tmp_assign_source_35;
                CHECK_OBJECT(tmp_for_loop_4__for_iterator);
                tmp_next_source_4 = tmp_for_loop_4__for_iterator;
                tmp_assign_source_35 = ITERATOR_NEXT(tmp_next_source_4);
                if (tmp_assign_source_35 == NULL) {
                    if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                        goto loop_end_4;
                    } else {

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        exception_lineno = 388;
                        goto try_except_handler_5;
                    }
                }

                {
                    PyObject *old = tmp_for_loop_4__iter_value;
                    tmp_for_loop_4__iter_value = tmp_assign_source_35;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_36;
                CHECK_OBJECT(tmp_for_loop_4__iter_value);
                tmp_assign_source_36 = tmp_for_loop_4__iter_value;
                {
                    PyObject *old = var_txt11;
                    var_txt11 = tmp_assign_source_36;
                    Py_INCREF(var_txt11);
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_37;
                PyObject *tmp_called_instance_23;
                PyObject *tmp_mvar_value_10;
                PyObject *tmp_args_element_name_28;
                PyObject *tmp_args_element_name_29;
                tmp_mvar_value_10 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

                if (unlikely(tmp_mvar_value_10 == NULL)) {
                    tmp_mvar_value_10 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
                }

                if (tmp_mvar_value_10 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
                    exception_tb = NULL;

                    exception_lineno = 389;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto try_except_handler_5;
                }

                tmp_called_instance_23 = tmp_mvar_value_10;
                CHECK_OBJECT(var_txt11);
                tmp_args_element_name_28 = var_txt11;
                CHECK_OBJECT(var_txt);
                tmp_args_element_name_29 = var_txt;
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 389;
                {
                    PyObject *call_args[] = {tmp_args_element_name_28, tmp_args_element_name_29};
                    tmp_assign_source_37 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_23, const_str_plain_search, call_args);
                }

                if (tmp_assign_source_37 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 389;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto try_except_handler_5;
                }
                {
                    PyObject *old = var_m;
                    assert(old != NULL);
                    var_m = tmp_assign_source_37;
                    Py_DECREF(old);
                }

            }
            {
                nuitka_bool tmp_condition_result_16;
                int tmp_truth_name_4;
                CHECK_OBJECT(var_m);
                tmp_truth_name_4 = CHECK_IF_TRUE(var_m);
                if (tmp_truth_name_4 == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 390;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto try_except_handler_5;
                }
                tmp_condition_result_16 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_16 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_16;
                } else {
                    goto branch_no_16;
                }
                branch_yes_16:;
                {
                    PyObject *tmp_assign_source_38;
                    PyObject *tmp_called_instance_24;
                    CHECK_OBJECT(var_m);
                    tmp_called_instance_24 = var_m;
                    frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 391;
                    tmp_assign_source_38 = CALL_METHOD_NO_ARGS(tmp_called_instance_24, const_str_plain_group);
                    if (tmp_assign_source_38 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 391;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto try_except_handler_5;
                    }
                    {
                        PyObject *old = var_txt1;
                        var_txt1 = tmp_assign_source_38;
                        Py_XDECREF(old);
                    }

                }
                {
                    PyObject *tmp_assign_source_39;
                    PyObject *tmp_called_instance_25;
                    CHECK_OBJECT(var_txt1);
                    tmp_called_instance_25 = var_txt1;
                    frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 392;
                    tmp_assign_source_39 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_25, const_str_plain_replace, &PyTuple_GET_ITEM(const_tuple_str_digest_c9fbfcc6a8dbf7ddb4d25424175de5f6_str_empty_tuple, 0));

                    if (tmp_assign_source_39 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 392;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto try_except_handler_5;
                    }
                    {
                        PyObject *old = var_txt11;
                        assert(old != NULL);
                        var_txt11 = tmp_assign_source_39;
                        Py_DECREF(old);
                    }

                }
                {
                    PyObject *tmp_assign_source_40;
                    CHECK_OBJECT(var_txt11);
                    tmp_assign_source_40 = var_txt11;
                    {
                        PyObject *old = var_txt1;
                        assert(old != NULL);
                        var_txt1 = tmp_assign_source_40;
                        Py_INCREF(var_txt1);
                        Py_DECREF(old);
                    }

                }
                {
                    PyObject *tmp_assign_source_41;
                    PyObject *tmp_called_instance_26;
                    CHECK_OBJECT(var_txt1);
                    tmp_called_instance_26 = var_txt1;
                    frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 394;
                    tmp_assign_source_41 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_26, const_str_plain_replace, &PyTuple_GET_ITEM(const_tuple_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77_str_newline_tuple, 0));

                    if (tmp_assign_source_41 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 394;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto try_except_handler_5;
                    }
                    {
                        PyObject *old = var_txt11;
                        assert(old != NULL);
                        var_txt11 = tmp_assign_source_41;
                        Py_DECREF(old);
                    }

                }
                {
                    PyObject *tmp_assign_source_42;
                    PyObject *tmp_left_name_21;
                    PyObject *tmp_left_name_22;
                    PyObject *tmp_right_name_21;
                    PyObject *tmp_right_name_22;
                    if (var_txt2 == NULL) {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF(exception_type);
                        exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "txt2");
                        exception_tb = NULL;

                        exception_lineno = 395;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto try_except_handler_5;
                    }

                    tmp_left_name_22 = var_txt2;
                    CHECK_OBJECT(var_txt11);
                    tmp_right_name_21 = var_txt11;
                    tmp_left_name_21 = BINARY_OPERATION_ADD_OBJECT_OBJECT(tmp_left_name_22, tmp_right_name_21);
                    if (tmp_left_name_21 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 395;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto try_except_handler_5;
                    }
                    tmp_right_name_22 = const_str_newline;
                    tmp_assign_source_42 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_21, tmp_right_name_22);
                    Py_DECREF(tmp_left_name_21);
                    if (tmp_assign_source_42 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 395;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto try_except_handler_5;
                    }
                    {
                        PyObject *old = var_txt2;
                        var_txt2 = tmp_assign_source_42;
                        Py_XDECREF(old);
                    }

                }
                branch_no_16:;
            }
            if (CONSIDER_THREADING() == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 388;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto try_except_handler_5;
            }
            goto loop_start_4;
            loop_end_4:;
            goto try_end_4;
            // Exception handler code:
            try_except_handler_5:;
            exception_keeper_type_4 = exception_type;
            exception_keeper_value_4 = exception_value;
            exception_keeper_tb_4 = exception_tb;
            exception_keeper_lineno_4 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF(tmp_for_loop_4__iter_value);
            tmp_for_loop_4__iter_value = NULL;

            CHECK_OBJECT((PyObject *)tmp_for_loop_4__for_iterator);
            Py_DECREF(tmp_for_loop_4__for_iterator);
            tmp_for_loop_4__for_iterator = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_4;
            exception_value = exception_keeper_value_4;
            exception_tb = exception_keeper_tb_4;
            exception_lineno = exception_keeper_lineno_4;

            goto frame_exception_exit_1;
            // End of try:
            try_end_4:;
            Py_XDECREF(tmp_for_loop_4__iter_value);
            tmp_for_loop_4__iter_value = NULL;

            CHECK_OBJECT((PyObject *)tmp_for_loop_4__for_iterator);
            Py_DECREF(tmp_for_loop_4__for_iterator);
            tmp_for_loop_4__for_iterator = NULL;

            {
                PyObject *tmp_assign_source_43;
                PyObject *tmp_left_name_23;
                PyObject *tmp_left_name_24;
                PyObject *tmp_left_name_25;
                PyObject *tmp_left_name_26;
                PyObject *tmp_source_name_73;
                PyObject *tmp_right_name_23;
                PyObject *tmp_right_name_24;
                PyObject *tmp_called_instance_27;
                PyObject *tmp_source_name_74;
                PyObject *tmp_right_name_25;
                PyObject *tmp_right_name_26;
                CHECK_OBJECT(par_parent);
                tmp_source_name_73 = par_parent;
                tmp_left_name_26 = LOOKUP_ATTRIBUTE(tmp_source_name_73, const_str_plain_devname);
                if (tmp_left_name_26 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 396;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_23 = const_str_space;
                tmp_left_name_25 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_26, tmp_right_name_23);
                Py_DECREF(tmp_left_name_26);
                if (tmp_left_name_25 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 396;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_parent);
                tmp_source_name_74 = par_parent;
                tmp_called_instance_27 = LOOKUP_ATTRIBUTE(tmp_source_name_74, const_str_plain_dev_vendor);
                if (tmp_called_instance_27 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_left_name_25);

                    exception_lineno = 396;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 396;
                tmp_right_name_24 = CALL_METHOD_NO_ARGS(tmp_called_instance_27, const_str_plain_get_text);
                Py_DECREF(tmp_called_instance_27);
                if (tmp_right_name_24 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_left_name_25);

                    exception_lineno = 396;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_24 = BINARY_OPERATION_ADD_OBJECT_OBJECT(tmp_left_name_25, tmp_right_name_24);
                Py_DECREF(tmp_left_name_25);
                Py_DECREF(tmp_right_name_24);
                if (tmp_left_name_24 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 396;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_25 = const_str_newline;
                tmp_left_name_23 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_24, tmp_right_name_25);
                Py_DECREF(tmp_left_name_24);
                if (tmp_left_name_23 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 396;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                if (var_txt2 == NULL) {
                    Py_DECREF(tmp_left_name_23);
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "txt2");
                    exception_tb = NULL;

                    exception_lineno = 396;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_right_name_26 = var_txt2;
                tmp_assign_source_43 = BINARY_OPERATION_ADD_OBJECT_OBJECT(tmp_left_name_23, tmp_right_name_26);
                Py_DECREF(tmp_left_name_23);
                if (tmp_assign_source_43 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 396;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_txt2;
                    var_txt2 = tmp_assign_source_43;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_44;
                tmp_assign_source_44 = LIST_COPY(const_list_82ec7edd2cad4ac6a8bbc4eb110269c1_list);
                assert(var_tt == NULL);
                var_tt = tmp_assign_source_44;
            }
            {
                PyObject *tmp_assign_source_45;
                tmp_assign_source_45 = const_str_empty;
                assert(var_sts_Locked == NULL);
                Py_INCREF(tmp_assign_source_45);
                var_sts_Locked = tmp_assign_source_45;
            }
            {
                PyObject *tmp_assign_source_46;
                tmp_assign_source_46 = const_str_empty;
                assert(var_sts_LockingEnabled == NULL);
                Py_INCREF(tmp_assign_source_46);
                var_sts_LockingEnabled = tmp_assign_source_46;
            }
            {
                PyObject *tmp_assign_source_47;
                tmp_assign_source_47 = const_str_plain_N;
                assert(var_sts_MBRShadowNotSupported == NULL);
                Py_INCREF(tmp_assign_source_47);
                var_sts_MBRShadowNotSupported = tmp_assign_source_47;
            }
            {
                PyObject *tmp_assign_source_48;
                tmp_assign_source_48 = const_str_empty;
                assert(var_sts_MBRDone == NULL);
                Py_INCREF(tmp_assign_source_48);
                var_sts_MBRDone = tmp_assign_source_48;
            }
            {
                PyObject *tmp_assign_source_49;
                tmp_assign_source_49 = const_str_empty;
                assert(var_sts_MBREnabled == NULL);
                Py_INCREF(tmp_assign_source_49);
                var_sts_MBREnabled = tmp_assign_source_49;
            }
            {
                PyObject *tmp_assign_source_50;
                tmp_assign_source_50 = const_str_empty;
                assert(var_tblsz == NULL);
                Py_INCREF(tmp_assign_source_50);
                var_tblsz = tmp_assign_source_50;
            }
            {
                PyObject *tmp_assign_source_51;
                tmp_assign_source_51 = const_str_empty;
                assert(var_nbr_MaxTables == NULL);
                Py_INCREF(tmp_assign_source_51);
                var_nbr_MaxTables = tmp_assign_source_51;
            }
            {
                PyObject *tmp_assign_source_52;
                tmp_assign_source_52 = const_str_empty;
                assert(var_nbr_Admins == NULL);
                Py_INCREF(tmp_assign_source_52);
                var_nbr_Admins = tmp_assign_source_52;
            }
            {
                PyObject *tmp_assign_source_53;
                tmp_assign_source_53 = const_str_empty;
                assert(var_nbr_Users == NULL);
                Py_INCREF(tmp_assign_source_53);
                var_nbr_Users = tmp_assign_source_53;
            }
            {
                PyObject *tmp_assign_source_54;
                tmp_assign_source_54 = const_str_empty;
                assert(var_singleUser == NULL);
                Py_INCREF(tmp_assign_source_54);
                var_singleUser = tmp_assign_source_54;
            }
            {
                PyObject *tmp_assign_source_55;
                tmp_assign_source_55 = const_str_empty;
                assert(var_comID_base == NULL);
                Py_INCREF(tmp_assign_source_55);
                var_comID_base = tmp_assign_source_55;
            }
            {
                PyObject *tmp_assign_source_56;
                tmp_assign_source_56 = const_str_empty;
                assert(var_initialPIN == NULL);
                Py_INCREF(tmp_assign_source_56);
                var_initialPIN = tmp_assign_source_56;
            }
            {
                PyObject *tmp_assign_source_57;
                tmp_assign_source_57 = const_str_empty;
                assert(var_nbr_Objects == NULL);
                Py_INCREF(tmp_assign_source_57);
                var_nbr_Objects = tmp_assign_source_57;
            }
            {
                PyObject *tmp_assign_source_58;
                PyObject *tmp_iter_arg_5;
                CHECK_OBJECT(var_tt);
                tmp_iter_arg_5 = var_tt;
                tmp_assign_source_58 = MAKE_ITERATOR(tmp_iter_arg_5);
                if (tmp_assign_source_58 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 425;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert(tmp_for_loop_5__for_iterator == NULL);
                tmp_for_loop_5__for_iterator = tmp_assign_source_58;
            }
            // Tried code:
            loop_start_5:;
            {
                PyObject *tmp_next_source_5;
                PyObject *tmp_assign_source_59;
                CHECK_OBJECT(tmp_for_loop_5__for_iterator);
                tmp_next_source_5 = tmp_for_loop_5__for_iterator;
                tmp_assign_source_59 = ITERATOR_NEXT(tmp_next_source_5);
                if (tmp_assign_source_59 == NULL) {
                    if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                        goto loop_end_5;
                    } else {

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        exception_lineno = 425;
                        goto try_except_handler_6;
                    }
                }

                {
                    PyObject *old = tmp_for_loop_5__iter_value;
                    tmp_for_loop_5__iter_value = tmp_assign_source_59;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_60;
                CHECK_OBJECT(tmp_for_loop_5__iter_value);
                tmp_assign_source_60 = tmp_for_loop_5__iter_value;
                {
                    PyObject *old = var_txt_33;
                    var_txt_33 = tmp_assign_source_60;
                    Py_INCREF(var_txt_33);
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_61;
                PyObject *tmp_called_instance_28;
                PyObject *tmp_mvar_value_11;
                PyObject *tmp_args_element_name_30;
                PyObject *tmp_args_element_name_31;
                tmp_mvar_value_11 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

                if (unlikely(tmp_mvar_value_11 == NULL)) {
                    tmp_mvar_value_11 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
                }

                if (tmp_mvar_value_11 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
                    exception_tb = NULL;

                    exception_lineno = 426;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto try_except_handler_6;
                }

                tmp_called_instance_28 = tmp_mvar_value_11;
                CHECK_OBJECT(var_txt_33);
                tmp_args_element_name_30 = var_txt_33;
                CHECK_OBJECT(var_txt2);
                tmp_args_element_name_31 = var_txt2;
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 426;
                {
                    PyObject *call_args[] = {tmp_args_element_name_30, tmp_args_element_name_31};
                    tmp_assign_source_61 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_28, const_str_plain_search, call_args);
                }

                if (tmp_assign_source_61 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 426;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto try_except_handler_6;
                }
                {
                    PyObject *old = var_m;
                    assert(old != NULL);
                    var_m = tmp_assign_source_61;
                    Py_DECREF(old);
                }

            }
            {
                nuitka_bool tmp_condition_result_17;
                int tmp_truth_name_5;
                CHECK_OBJECT(var_m);
                tmp_truth_name_5 = CHECK_IF_TRUE(var_m);
                if (tmp_truth_name_5 == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 427;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto try_except_handler_6;
                }
                tmp_condition_result_17 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_17 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_17;
                } else {
                    goto branch_no_17;
                }
                branch_yes_17:;
                {
                    PyObject *tmp_assign_source_62;
                    PyObject *tmp_called_instance_29;
                    CHECK_OBJECT(var_m);
                    tmp_called_instance_29 = var_m;
                    frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 428;
                    tmp_assign_source_62 = CALL_METHOD_NO_ARGS(tmp_called_instance_29, const_str_plain_group);
                    if (tmp_assign_source_62 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 428;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto try_except_handler_6;
                    }
                    {
                        PyObject *old = var_t3;
                        var_t3 = tmp_assign_source_62;
                        Py_XDECREF(old);
                    }

                }
                {
                    PyObject *tmp_assign_source_63;
                    PyObject *tmp_called_instance_30;
                    CHECK_OBJECT(var_t3);
                    tmp_called_instance_30 = var_t3;
                    frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 429;
                    tmp_assign_source_63 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_30, const_str_plain_split, &PyTuple_GET_ITEM(const_tuple_str_digest_fad16014b804349bb65b09a2311b1ac7_int_pos_1_tuple, 0));

                    if (tmp_assign_source_63 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 429;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto try_except_handler_6;
                    }
                    {
                        PyObject *old = var_x_words;
                        var_x_words = tmp_assign_source_63;
                        Py_XDECREF(old);
                    }

                }
                {
                    nuitka_bool tmp_condition_result_18;
                    PyObject *tmp_compexpr_left_14;
                    PyObject *tmp_compexpr_right_14;
                    PyObject *tmp_subscribed_name_27;
                    PyObject *tmp_subscript_name_27;
                    CHECK_OBJECT(var_x_words);
                    tmp_subscribed_name_27 = var_x_words;
                    tmp_subscript_name_27 = const_int_0;
                    tmp_compexpr_left_14 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_27, tmp_subscript_name_27, 0);
                    if (tmp_compexpr_left_14 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 430;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto try_except_handler_6;
                    }
                    tmp_compexpr_right_14 = const_str_plain_Locked;
                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_14, tmp_compexpr_right_14);
                    Py_DECREF(tmp_compexpr_left_14);
                    if (tmp_res == -1) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 430;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto try_except_handler_6;
                    }
                    tmp_condition_result_18 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if (tmp_condition_result_18 == NUITKA_BOOL_TRUE) {
                        goto branch_yes_18;
                    } else {
                        goto branch_no_18;
                    }
                    branch_yes_18:;
                    {
                        PyObject *tmp_assign_source_64;
                        PyObject *tmp_subscribed_name_28;
                        PyObject *tmp_subscript_name_28;
                        CHECK_OBJECT(var_x_words);
                        tmp_subscribed_name_28 = var_x_words;
                        tmp_subscript_name_28 = const_int_pos_1;
                        tmp_assign_source_64 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_28, tmp_subscript_name_28, 1);
                        if (tmp_assign_source_64 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 431;
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            goto try_except_handler_6;
                        }
                        {
                            PyObject *old = var_sts_Locked;
                            var_sts_Locked = tmp_assign_source_64;
                            Py_XDECREF(old);
                        }

                    }
                    goto branch_end_18;
                    branch_no_18:;
                    {
                        nuitka_bool tmp_condition_result_19;
                        PyObject *tmp_compexpr_left_15;
                        PyObject *tmp_compexpr_right_15;
                        PyObject *tmp_subscribed_name_29;
                        PyObject *tmp_subscript_name_29;
                        CHECK_OBJECT(var_x_words);
                        tmp_subscribed_name_29 = var_x_words;
                        tmp_subscript_name_29 = const_int_0;
                        tmp_compexpr_left_15 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_29, tmp_subscript_name_29, 0);
                        if (tmp_compexpr_left_15 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 432;
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            goto try_except_handler_6;
                        }
                        tmp_compexpr_right_15 = const_str_plain_LockingEnabled;
                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_15, tmp_compexpr_right_15);
                        Py_DECREF(tmp_compexpr_left_15);
                        if (tmp_res == -1) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 432;
                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                            goto try_except_handler_6;
                        }
                        tmp_condition_result_19 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if (tmp_condition_result_19 == NUITKA_BOOL_TRUE) {
                            goto branch_yes_19;
                        } else {
                            goto branch_no_19;
                        }
                        branch_yes_19:;
                        {
                            PyObject *tmp_assign_source_65;
                            PyObject *tmp_subscribed_name_30;
                            PyObject *tmp_subscript_name_30;
                            CHECK_OBJECT(var_x_words);
                            tmp_subscribed_name_30 = var_x_words;
                            tmp_subscript_name_30 = const_int_pos_1;
                            tmp_assign_source_65 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_30, tmp_subscript_name_30, 1);
                            if (tmp_assign_source_65 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 433;
                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                goto try_except_handler_6;
                            }
                            {
                                PyObject *old = var_sts_LockingEnabled;
                                var_sts_LockingEnabled = tmp_assign_source_65;
                                Py_XDECREF(old);
                            }

                        }
                        goto branch_end_19;
                        branch_no_19:;
                        {
                            nuitka_bool tmp_condition_result_20;
                            PyObject *tmp_compexpr_left_16;
                            PyObject *tmp_compexpr_right_16;
                            PyObject *tmp_subscribed_name_31;
                            PyObject *tmp_subscript_name_31;
                            CHECK_OBJECT(var_x_words);
                            tmp_subscribed_name_31 = var_x_words;
                            tmp_subscript_name_31 = const_int_0;
                            tmp_compexpr_left_16 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_31, tmp_subscript_name_31, 0);
                            if (tmp_compexpr_left_16 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 434;
                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                goto try_except_handler_6;
                            }
                            tmp_compexpr_right_16 = const_str_digest_431b1724ba76745b0f5a6a2402052b0c;
                            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_16, tmp_compexpr_right_16);
                            Py_DECREF(tmp_compexpr_left_16);
                            if (tmp_res == -1) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 434;
                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                goto try_except_handler_6;
                            }
                            tmp_condition_result_20 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                            if (tmp_condition_result_20 == NUITKA_BOOL_TRUE) {
                                goto branch_yes_20;
                            } else {
                                goto branch_no_20;
                            }
                            branch_yes_20:;
                            {
                                PyObject *tmp_assign_source_66;
                                PyObject *tmp_subscribed_name_32;
                                PyObject *tmp_subscript_name_32;
                                CHECK_OBJECT(var_x_words);
                                tmp_subscribed_name_32 = var_x_words;
                                tmp_subscript_name_32 = const_int_pos_1;
                                tmp_assign_source_66 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_32, tmp_subscript_name_32, 1);
                                if (tmp_assign_source_66 == NULL) {
                                    assert(ERROR_OCCURRED());

                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                    exception_lineno = 435;
                                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                    goto try_except_handler_6;
                                }
                                {
                                    PyObject *old = var_sts_MBRShadowNotSupported;
                                    var_sts_MBRShadowNotSupported = tmp_assign_source_66;
                                    Py_XDECREF(old);
                                }

                            }
                            goto branch_end_20;
                            branch_no_20:;
                            {
                                nuitka_bool tmp_condition_result_21;
                                PyObject *tmp_compexpr_left_17;
                                PyObject *tmp_compexpr_right_17;
                                PyObject *tmp_subscribed_name_33;
                                PyObject *tmp_subscript_name_33;
                                CHECK_OBJECT(var_x_words);
                                tmp_subscribed_name_33 = var_x_words;
                                tmp_subscript_name_33 = const_int_0;
                                tmp_compexpr_left_17 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_33, tmp_subscript_name_33, 0);
                                if (tmp_compexpr_left_17 == NULL) {
                                    assert(ERROR_OCCURRED());

                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                    exception_lineno = 436;
                                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                    goto try_except_handler_6;
                                }
                                tmp_compexpr_right_17 = const_str_plain_MBRDone;
                                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_17, tmp_compexpr_right_17);
                                Py_DECREF(tmp_compexpr_left_17);
                                if (tmp_res == -1) {
                                    assert(ERROR_OCCURRED());

                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                    exception_lineno = 436;
                                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                    goto try_except_handler_6;
                                }
                                tmp_condition_result_21 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                if (tmp_condition_result_21 == NUITKA_BOOL_TRUE) {
                                    goto branch_yes_21;
                                } else {
                                    goto branch_no_21;
                                }
                                branch_yes_21:;
                                {
                                    PyObject *tmp_assign_source_67;
                                    PyObject *tmp_subscribed_name_34;
                                    PyObject *tmp_subscript_name_34;
                                    CHECK_OBJECT(var_x_words);
                                    tmp_subscribed_name_34 = var_x_words;
                                    tmp_subscript_name_34 = const_int_pos_1;
                                    tmp_assign_source_67 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_34, tmp_subscript_name_34, 1);
                                    if (tmp_assign_source_67 == NULL) {
                                        assert(ERROR_OCCURRED());

                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                        exception_lineno = 437;
                                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                        goto try_except_handler_6;
                                    }
                                    {
                                        PyObject *old = var_sts_MBRDone;
                                        var_sts_MBRDone = tmp_assign_source_67;
                                        Py_XDECREF(old);
                                    }

                                }
                                goto branch_end_21;
                                branch_no_21:;
                                {
                                    nuitka_bool tmp_condition_result_22;
                                    PyObject *tmp_compexpr_left_18;
                                    PyObject *tmp_compexpr_right_18;
                                    PyObject *tmp_subscribed_name_35;
                                    PyObject *tmp_subscript_name_35;
                                    CHECK_OBJECT(var_x_words);
                                    tmp_subscribed_name_35 = var_x_words;
                                    tmp_subscript_name_35 = const_int_0;
                                    tmp_compexpr_left_18 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_35, tmp_subscript_name_35, 0);
                                    if (tmp_compexpr_left_18 == NULL) {
                                        assert(ERROR_OCCURRED());

                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                        exception_lineno = 438;
                                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                        goto try_except_handler_6;
                                    }
                                    tmp_compexpr_right_18 = const_str_plain_MBREnabled;
                                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_18, tmp_compexpr_right_18);
                                    Py_DECREF(tmp_compexpr_left_18);
                                    if (tmp_res == -1) {
                                        assert(ERROR_OCCURRED());

                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                        exception_lineno = 438;
                                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                        goto try_except_handler_6;
                                    }
                                    tmp_condition_result_22 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                    if (tmp_condition_result_22 == NUITKA_BOOL_TRUE) {
                                        goto branch_yes_22;
                                    } else {
                                        goto branch_no_22;
                                    }
                                    branch_yes_22:;
                                    {
                                        PyObject *tmp_assign_source_68;
                                        PyObject *tmp_subscribed_name_36;
                                        PyObject *tmp_subscript_name_36;
                                        CHECK_OBJECT(var_x_words);
                                        tmp_subscribed_name_36 = var_x_words;
                                        tmp_subscript_name_36 = const_int_pos_1;
                                        tmp_assign_source_68 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_36, tmp_subscript_name_36, 1);
                                        if (tmp_assign_source_68 == NULL) {
                                            assert(ERROR_OCCURRED());

                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                            exception_lineno = 439;
                                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                            goto try_except_handler_6;
                                        }
                                        {
                                            PyObject *old = var_sts_MBREnabled;
                                            var_sts_MBREnabled = tmp_assign_source_68;
                                            Py_XDECREF(old);
                                        }

                                    }
                                    goto branch_end_22;
                                    branch_no_22:;
                                    {
                                        nuitka_bool tmp_condition_result_23;
                                        PyObject *tmp_compexpr_left_19;
                                        PyObject *tmp_compexpr_right_19;
                                        PyObject *tmp_subscribed_name_37;
                                        PyObject *tmp_subscript_name_37;
                                        CHECK_OBJECT(var_x_words);
                                        tmp_subscribed_name_37 = var_x_words;
                                        tmp_subscript_name_37 = const_int_0;
                                        tmp_compexpr_left_19 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_37, tmp_subscript_name_37, 0);
                                        if (tmp_compexpr_left_19 == NULL) {
                                            assert(ERROR_OCCURRED());

                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                            exception_lineno = 440;
                                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                            goto try_except_handler_6;
                                        }
                                        tmp_compexpr_right_19 = const_str_digest_d78a499173e6f4625d883f0cec40a565;
                                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_19, tmp_compexpr_right_19);
                                        Py_DECREF(tmp_compexpr_left_19);
                                        if (tmp_res == -1) {
                                            assert(ERROR_OCCURRED());

                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                            exception_lineno = 440;
                                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                            goto try_except_handler_6;
                                        }
                                        tmp_condition_result_23 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                        if (tmp_condition_result_23 == NUITKA_BOOL_TRUE) {
                                            goto branch_yes_23;
                                        } else {
                                            goto branch_no_23;
                                        }
                                        branch_yes_23:;
                                        {
                                            PyObject *tmp_assign_source_69;
                                            PyObject *tmp_value_name_1;
                                            PyObject *tmp_subscribed_name_38;
                                            PyObject *tmp_subscript_name_38;
                                            PyObject *tmp_base_name_1;
                                            CHECK_OBJECT(var_x_words);
                                            tmp_subscribed_name_38 = var_x_words;
                                            tmp_subscript_name_38 = const_int_pos_1;
                                            tmp_value_name_1 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_38, tmp_subscript_name_38, 1);
                                            if (tmp_value_name_1 == NULL) {
                                                assert(ERROR_OCCURRED());

                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                exception_lineno = 441;
                                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                goto try_except_handler_6;
                                            }
                                            tmp_base_name_1 = const_int_pos_10;
                                            tmp_assign_source_69 = BUILTIN_INT2(tmp_value_name_1, tmp_base_name_1);
                                            Py_DECREF(tmp_value_name_1);
                                            if (tmp_assign_source_69 == NULL) {
                                                assert(ERROR_OCCURRED());

                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                exception_lineno = 441;
                                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                goto try_except_handler_6;
                                            }
                                            {
                                                PyObject *old = var_tblsz_i;
                                                var_tblsz_i = tmp_assign_source_69;
                                                Py_XDECREF(old);
                                            }

                                        }
                                        {
                                            PyObject *tmp_assign_source_70;
                                            PyObject *tmp_left_name_27;
                                            PyObject *tmp_str_arg_1;
                                            PyObject *tmp_left_name_28;
                                            PyObject *tmp_right_name_27;
                                            PyObject *tmp_right_name_28;
                                            CHECK_OBJECT(var_tblsz_i);
                                            tmp_left_name_28 = var_tblsz_i;
                                            tmp_right_name_27 = const_int_pos_1000000;
                                            tmp_str_arg_1 = BINARY_OPERATION_OLDDIV_OBJECT_INT(tmp_left_name_28, tmp_right_name_27);
                                            if (tmp_str_arg_1 == NULL) {
                                                assert(ERROR_OCCURRED());

                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                exception_lineno = 442;
                                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                goto try_except_handler_6;
                                            }
                                            tmp_left_name_27 = PyObject_Str(tmp_str_arg_1);
                                            Py_DECREF(tmp_str_arg_1);
                                            if (tmp_left_name_27 == NULL) {
                                                assert(ERROR_OCCURRED());

                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                exception_lineno = 442;
                                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                goto try_except_handler_6;
                                            }
                                            tmp_right_name_28 = const_str_plain_MB;
                                            tmp_assign_source_70 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_27, tmp_right_name_28);
                                            Py_DECREF(tmp_left_name_27);
                                            if (tmp_assign_source_70 == NULL) {
                                                assert(ERROR_OCCURRED());

                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                exception_lineno = 442;
                                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                goto try_except_handler_6;
                                            }
                                            {
                                                PyObject *old = var_tblsz;
                                                var_tblsz = tmp_assign_source_70;
                                                Py_XDECREF(old);
                                            }

                                        }
                                        goto branch_end_23;
                                        branch_no_23:;
                                        {
                                            nuitka_bool tmp_condition_result_24;
                                            PyObject *tmp_compexpr_left_20;
                                            PyObject *tmp_compexpr_right_20;
                                            PyObject *tmp_subscribed_name_39;
                                            PyObject *tmp_subscript_name_39;
                                            CHECK_OBJECT(var_x_words);
                                            tmp_subscribed_name_39 = var_x_words;
                                            tmp_subscript_name_39 = const_int_0;
                                            tmp_compexpr_left_20 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_39, tmp_subscript_name_39, 0);
                                            if (tmp_compexpr_left_20 == NULL) {
                                                assert(ERROR_OCCURRED());

                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                exception_lineno = 443;
                                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                goto try_except_handler_6;
                                            }
                                            tmp_compexpr_right_20 = const_str_digest_b340fadac88da0fc43dfd50d901ef829;
                                            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_20, tmp_compexpr_right_20);
                                            Py_DECREF(tmp_compexpr_left_20);
                                            if (tmp_res == -1) {
                                                assert(ERROR_OCCURRED());

                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                exception_lineno = 443;
                                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                goto try_except_handler_6;
                                            }
                                            tmp_condition_result_24 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                            if (tmp_condition_result_24 == NUITKA_BOOL_TRUE) {
                                                goto branch_yes_24;
                                            } else {
                                                goto branch_no_24;
                                            }
                                            branch_yes_24:;
                                            {
                                                PyObject *tmp_assign_source_71;
                                                PyObject *tmp_subscribed_name_40;
                                                PyObject *tmp_subscript_name_40;
                                                CHECK_OBJECT(var_x_words);
                                                tmp_subscribed_name_40 = var_x_words;
                                                tmp_subscript_name_40 = const_int_pos_1;
                                                tmp_assign_source_71 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_40, tmp_subscript_name_40, 1);
                                                if (tmp_assign_source_71 == NULL) {
                                                    assert(ERROR_OCCURRED());

                                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                    exception_lineno = 444;
                                                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                    goto try_except_handler_6;
                                                }
                                                {
                                                    PyObject *old = var_nbr_MaxTables;
                                                    var_nbr_MaxTables = tmp_assign_source_71;
                                                    Py_XDECREF(old);
                                                }

                                            }
                                            goto branch_end_24;
                                            branch_no_24:;
                                            {
                                                nuitka_bool tmp_condition_result_25;
                                                PyObject *tmp_compexpr_left_21;
                                                PyObject *tmp_compexpr_right_21;
                                                PyObject *tmp_subscribed_name_41;
                                                PyObject *tmp_subscript_name_41;
                                                CHECK_OBJECT(var_x_words);
                                                tmp_subscribed_name_41 = var_x_words;
                                                tmp_subscript_name_41 = const_int_0;
                                                tmp_compexpr_left_21 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_41, tmp_subscript_name_41, 0);
                                                if (tmp_compexpr_left_21 == NULL) {
                                                    assert(ERROR_OCCURRED());

                                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                    exception_lineno = 445;
                                                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                    goto try_except_handler_6;
                                                }
                                                tmp_compexpr_right_21 = const_str_plain_Objects;
                                                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_21, tmp_compexpr_right_21);
                                                Py_DECREF(tmp_compexpr_left_21);
                                                if (tmp_res == -1) {
                                                    assert(ERROR_OCCURRED());

                                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                    exception_lineno = 445;
                                                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                    goto try_except_handler_6;
                                                }
                                                tmp_condition_result_25 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                if (tmp_condition_result_25 == NUITKA_BOOL_TRUE) {
                                                    goto branch_yes_25;
                                                } else {
                                                    goto branch_no_25;
                                                }
                                                branch_yes_25:;
                                                {
                                                    PyObject *tmp_assign_source_72;
                                                    PyObject *tmp_subscribed_name_42;
                                                    PyObject *tmp_subscript_name_42;
                                                    CHECK_OBJECT(var_x_words);
                                                    tmp_subscribed_name_42 = var_x_words;
                                                    tmp_subscript_name_42 = const_int_pos_1;
                                                    tmp_assign_source_72 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_42, tmp_subscript_name_42, 1);
                                                    if (tmp_assign_source_72 == NULL) {
                                                        assert(ERROR_OCCURRED());

                                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                        exception_lineno = 446;
                                                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                        goto try_except_handler_6;
                                                    }
                                                    {
                                                        PyObject *old = var_nbr_Objects;
                                                        var_nbr_Objects = tmp_assign_source_72;
                                                        Py_XDECREF(old);
                                                    }

                                                }
                                                goto branch_end_25;
                                                branch_no_25:;
                                                {
                                                    nuitka_bool tmp_condition_result_26;
                                                    PyObject *tmp_compexpr_left_22;
                                                    PyObject *tmp_compexpr_right_22;
                                                    PyObject *tmp_subscribed_name_43;
                                                    PyObject *tmp_subscript_name_43;
                                                    CHECK_OBJECT(var_x_words);
                                                    tmp_subscribed_name_43 = var_x_words;
                                                    tmp_subscript_name_43 = const_int_0;
                                                    tmp_compexpr_left_22 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_43, tmp_subscript_name_43, 0);
                                                    if (tmp_compexpr_left_22 == NULL) {
                                                        assert(ERROR_OCCURRED());

                                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                        exception_lineno = 447;
                                                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                        goto try_except_handler_6;
                                                    }
                                                    tmp_compexpr_right_22 = const_str_plain_Admins;
                                                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_22, tmp_compexpr_right_22);
                                                    Py_DECREF(tmp_compexpr_left_22);
                                                    if (tmp_res == -1) {
                                                        assert(ERROR_OCCURRED());

                                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                        exception_lineno = 447;
                                                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                        goto try_except_handler_6;
                                                    }
                                                    tmp_condition_result_26 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                    if (tmp_condition_result_26 == NUITKA_BOOL_TRUE) {
                                                        goto branch_yes_26;
                                                    } else {
                                                        goto branch_no_26;
                                                    }
                                                    branch_yes_26:;
                                                    {
                                                        PyObject *tmp_assign_source_73;
                                                        PyObject *tmp_subscribed_name_44;
                                                        PyObject *tmp_subscript_name_44;
                                                        CHECK_OBJECT(var_x_words);
                                                        tmp_subscribed_name_44 = var_x_words;
                                                        tmp_subscript_name_44 = const_int_pos_1;
                                                        tmp_assign_source_73 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_44, tmp_subscript_name_44, 1);
                                                        if (tmp_assign_source_73 == NULL) {
                                                            assert(ERROR_OCCURRED());

                                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                            exception_lineno = 448;
                                                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                            goto try_except_handler_6;
                                                        }
                                                        {
                                                            PyObject *old = var_nbr_Admins;
                                                            var_nbr_Admins = tmp_assign_source_73;
                                                            Py_XDECREF(old);
                                                        }

                                                    }
                                                    goto branch_end_26;
                                                    branch_no_26:;
                                                    {
                                                        nuitka_bool tmp_condition_result_27;
                                                        PyObject *tmp_compexpr_left_23;
                                                        PyObject *tmp_compexpr_right_23;
                                                        PyObject *tmp_subscribed_name_45;
                                                        PyObject *tmp_subscript_name_45;
                                                        CHECK_OBJECT(var_x_words);
                                                        tmp_subscribed_name_45 = var_x_words;
                                                        tmp_subscript_name_45 = const_int_0;
                                                        tmp_compexpr_left_23 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_45, tmp_subscript_name_45, 0);
                                                        if (tmp_compexpr_left_23 == NULL) {
                                                            assert(ERROR_OCCURRED());

                                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                            exception_lineno = 449;
                                                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                            goto try_except_handler_6;
                                                        }
                                                        tmp_compexpr_right_23 = const_str_plain_Users;
                                                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_23, tmp_compexpr_right_23);
                                                        Py_DECREF(tmp_compexpr_left_23);
                                                        if (tmp_res == -1) {
                                                            assert(ERROR_OCCURRED());

                                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                            exception_lineno = 449;
                                                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                            goto try_except_handler_6;
                                                        }
                                                        tmp_condition_result_27 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                        if (tmp_condition_result_27 == NUITKA_BOOL_TRUE) {
                                                            goto branch_yes_27;
                                                        } else {
                                                            goto branch_no_27;
                                                        }
                                                        branch_yes_27:;
                                                        {
                                                            PyObject *tmp_assign_source_74;
                                                            PyObject *tmp_subscribed_name_46;
                                                            PyObject *tmp_subscript_name_46;
                                                            CHECK_OBJECT(var_x_words);
                                                            tmp_subscribed_name_46 = var_x_words;
                                                            tmp_subscript_name_46 = const_int_pos_1;
                                                            tmp_assign_source_74 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_46, tmp_subscript_name_46, 1);
                                                            if (tmp_assign_source_74 == NULL) {
                                                                assert(ERROR_OCCURRED());

                                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                                exception_lineno = 450;
                                                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                                goto try_except_handler_6;
                                                            }
                                                            {
                                                                PyObject *old = var_nbr_Users;
                                                                var_nbr_Users = tmp_assign_source_74;
                                                                Py_XDECREF(old);
                                                            }

                                                        }
                                                        goto branch_end_27;
                                                        branch_no_27:;
                                                        {
                                                            nuitka_bool tmp_condition_result_28;
                                                            PyObject *tmp_compexpr_left_24;
                                                            PyObject *tmp_compexpr_right_24;
                                                            PyObject *tmp_subscribed_name_47;
                                                            PyObject *tmp_subscript_name_47;
                                                            CHECK_OBJECT(var_x_words);
                                                            tmp_subscribed_name_47 = var_x_words;
                                                            tmp_subscript_name_47 = const_int_0;
                                                            tmp_compexpr_left_24 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_47, tmp_subscript_name_47, 0);
                                                            if (tmp_compexpr_left_24 == NULL) {
                                                                assert(ERROR_OCCURRED());

                                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                                exception_lineno = 451;
                                                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                                goto try_except_handler_6;
                                                            }
                                                            tmp_compexpr_right_24 = const_str_plain_Policy;
                                                            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_24, tmp_compexpr_right_24);
                                                            Py_DECREF(tmp_compexpr_left_24);
                                                            if (tmp_res == -1) {
                                                                assert(ERROR_OCCURRED());

                                                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                                exception_lineno = 451;
                                                                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                                goto try_except_handler_6;
                                                            }
                                                            tmp_condition_result_28 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                            if (tmp_condition_result_28 == NUITKA_BOOL_TRUE) {
                                                                goto branch_yes_28;
                                                            } else {
                                                                goto branch_no_28;
                                                            }
                                                            branch_yes_28:;
                                                            {
                                                                PyObject *tmp_assign_source_75;
                                                                PyObject *tmp_subscribed_name_48;
                                                                PyObject *tmp_subscript_name_48;
                                                                CHECK_OBJECT(var_x_words);
                                                                tmp_subscribed_name_48 = var_x_words;
                                                                tmp_subscript_name_48 = const_int_pos_1;
                                                                tmp_assign_source_75 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_48, tmp_subscript_name_48, 1);
                                                                if (tmp_assign_source_75 == NULL) {
                                                                    assert(ERROR_OCCURRED());

                                                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                                    exception_lineno = 452;
                                                                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                                    goto try_except_handler_6;
                                                                }
                                                                {
                                                                    PyObject *old = var_singleUser;
                                                                    var_singleUser = tmp_assign_source_75;
                                                                    Py_XDECREF(old);
                                                                }

                                                            }
                                                            goto branch_end_28;
                                                            branch_no_28:;
                                                            {
                                                                nuitka_bool tmp_condition_result_29;
                                                                PyObject *tmp_compexpr_left_25;
                                                                PyObject *tmp_compexpr_right_25;
                                                                PyObject *tmp_subscribed_name_49;
                                                                PyObject *tmp_subscript_name_49;
                                                                CHECK_OBJECT(var_x_words);
                                                                tmp_subscribed_name_49 = var_x_words;
                                                                tmp_subscript_name_49 = const_int_0;
                                                                tmp_compexpr_left_25 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_49, tmp_subscript_name_49, 0);
                                                                if (tmp_compexpr_left_25 == NULL) {
                                                                    assert(ERROR_OCCURRED());

                                                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                                    exception_lineno = 453;
                                                                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                                    goto try_except_handler_6;
                                                                }
                                                                tmp_compexpr_right_25 = const_str_digest_68ab33c88ed807c9f9cce195c9f7ba52;
                                                                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_25, tmp_compexpr_right_25);
                                                                Py_DECREF(tmp_compexpr_left_25);
                                                                if (tmp_res == -1) {
                                                                    assert(ERROR_OCCURRED());

                                                                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                                    exception_lineno = 453;
                                                                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                                    goto try_except_handler_6;
                                                                }
                                                                tmp_condition_result_29 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                if (tmp_condition_result_29 == NUITKA_BOOL_TRUE) {
                                                                    goto branch_yes_29;
                                                                } else {
                                                                    goto branch_no_29;
                                                                }
                                                                branch_yes_29:;
                                                                {
                                                                    PyObject *tmp_assign_source_76;
                                                                    PyObject *tmp_subscribed_name_50;
                                                                    PyObject *tmp_subscript_name_50;
                                                                    CHECK_OBJECT(var_x_words);
                                                                    tmp_subscribed_name_50 = var_x_words;
                                                                    tmp_subscript_name_50 = const_int_pos_1;
                                                                    tmp_assign_source_76 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_50, tmp_subscript_name_50, 1);
                                                                    if (tmp_assign_source_76 == NULL) {
                                                                        assert(ERROR_OCCURRED());

                                                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                                        exception_lineno = 454;
                                                                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                                        goto try_except_handler_6;
                                                                    }
                                                                    {
                                                                        PyObject *old = var_comID_base;
                                                                        var_comID_base = tmp_assign_source_76;
                                                                        Py_XDECREF(old);
                                                                    }

                                                                }
                                                                goto branch_end_29;
                                                                branch_no_29:;
                                                                {
                                                                    nuitka_bool tmp_condition_result_30;
                                                                    PyObject *tmp_compexpr_left_26;
                                                                    PyObject *tmp_compexpr_right_26;
                                                                    PyObject *tmp_subscribed_name_51;
                                                                    PyObject *tmp_subscript_name_51;
                                                                    CHECK_OBJECT(var_x_words);
                                                                    tmp_subscribed_name_51 = var_x_words;
                                                                    tmp_subscript_name_51 = const_int_0;
                                                                    tmp_compexpr_left_26 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_51, tmp_subscript_name_51, 0);
                                                                    if (tmp_compexpr_left_26 == NULL) {
                                                                        assert(ERROR_OCCURRED());

                                                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                                        exception_lineno = 455;
                                                                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                                        goto try_except_handler_6;
                                                                    }
                                                                    tmp_compexpr_right_26 = const_str_digest_dd3ea41d2ee44affb56e308a5ece0994;
                                                                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_26, tmp_compexpr_right_26);
                                                                    Py_DECREF(tmp_compexpr_left_26);
                                                                    if (tmp_res == -1) {
                                                                        assert(ERROR_OCCURRED());

                                                                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                                        exception_lineno = 455;
                                                                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                                        goto try_except_handler_6;
                                                                    }
                                                                    tmp_condition_result_30 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                    if (tmp_condition_result_30 == NUITKA_BOOL_TRUE) {
                                                                        goto branch_yes_30;
                                                                    } else {
                                                                        goto branch_no_30;
                                                                    }
                                                                    branch_yes_30:;
                                                                    {
                                                                        PyObject *tmp_assign_source_77;
                                                                        PyObject *tmp_subscribed_name_52;
                                                                        PyObject *tmp_subscript_name_52;
                                                                        CHECK_OBJECT(var_x_words);
                                                                        tmp_subscribed_name_52 = var_x_words;
                                                                        tmp_subscript_name_52 = const_int_pos_1;
                                                                        tmp_assign_source_77 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_52, tmp_subscript_name_52, 1);
                                                                        if (tmp_assign_source_77 == NULL) {
                                                                            assert(ERROR_OCCURRED());

                                                                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                                                            exception_lineno = 456;
                                                                            type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                                                                            goto try_except_handler_6;
                                                                        }
                                                                        {
                                                                            PyObject *old = var_initialPIN;
                                                                            var_initialPIN = tmp_assign_source_77;
                                                                            Py_XDECREF(old);
                                                                        }

                                                                    }
                                                                    branch_no_30:;
                                                                }
                                                                branch_end_29:;
                                                            }
                                                            branch_end_28:;
                                                        }
                                                        branch_end_27:;
                                                    }
                                                    branch_end_26:;
                                                }
                                                branch_end_25:;
                                            }
                                            branch_end_24:;
                                        }
                                        branch_end_23:;
                                    }
                                    branch_end_22:;
                                }
                                branch_end_21:;
                            }
                            branch_end_20:;
                        }
                        branch_end_19:;
                    }
                    branch_end_18:;
                }
                branch_no_17:;
            }
            if (CONSIDER_THREADING() == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 425;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto try_except_handler_6;
            }
            goto loop_start_5;
            loop_end_5:;
            goto try_end_5;
            // Exception handler code:
            try_except_handler_6:;
            exception_keeper_type_5 = exception_type;
            exception_keeper_value_5 = exception_value;
            exception_keeper_tb_5 = exception_tb;
            exception_keeper_lineno_5 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF(tmp_for_loop_5__iter_value);
            tmp_for_loop_5__iter_value = NULL;

            CHECK_OBJECT((PyObject *)tmp_for_loop_5__for_iterator);
            Py_DECREF(tmp_for_loop_5__for_iterator);
            tmp_for_loop_5__for_iterator = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_5;
            exception_value = exception_keeper_value_5;
            exception_tb = exception_keeper_tb_5;
            exception_lineno = exception_keeper_lineno_5;

            goto frame_exception_exit_1;
            // End of try:
            try_end_5:;
            Py_XDECREF(tmp_for_loop_5__iter_value);
            tmp_for_loop_5__iter_value = NULL;

            CHECK_OBJECT((PyObject *)tmp_for_loop_5__for_iterator);
            Py_DECREF(tmp_for_loop_5__for_iterator);
            tmp_for_loop_5__for_iterator = NULL;

            {
                nuitka_bool tmp_condition_result_31;
                PyObject *tmp_compexpr_left_27;
                PyObject *tmp_compexpr_right_27;
                if (var_singleUser == NULL) {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "singleUser");
                    exception_tb = NULL;

                    exception_lineno = 457;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_compexpr_left_27 = var_singleUser;
                tmp_compexpr_right_27 = const_str_empty;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_27, tmp_compexpr_right_27);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 457;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_31 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_31 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_31;
                } else {
                    goto branch_no_31;
                }
                branch_yes_31:;
                {
                    PyObject *tmp_assign_source_78;
                    tmp_assign_source_78 = const_str_plain_N;
                    {
                        PyObject *old = var_singleUser;
                        var_singleUser = tmp_assign_source_78;
                        Py_INCREF(var_singleUser);
                        Py_XDECREF(old);
                    }

                }
                {
                    PyObject *tmp_assign_source_79;
                    tmp_assign_source_79 = const_str_digest_f9aa9f1d756280254529dbc306087548;
                    {
                        PyObject *old = var_nbr_Objects;
                        var_nbr_Objects = tmp_assign_source_79;
                        Py_INCREF(var_nbr_Objects);
                        Py_XDECREF(old);
                    }

                }
                branch_no_31:;
            }
            {
                PyObject *tmp_called_name_20;
                PyObject *tmp_source_name_75;
                PyObject *tmp_call_result_27;
                PyObject *tmp_args_element_name_32;
                PyObject *tmp_left_name_29;
                PyObject *tmp_left_name_30;
                PyObject *tmp_right_name_29;
                PyObject *tmp_right_name_30;
                CHECK_OBJECT(var_queryTextList);
                tmp_source_name_75 = var_queryTextList;
                tmp_called_name_20 = LOOKUP_ATTRIBUTE(tmp_source_name_75, const_str_plain_append);
                if (tmp_called_name_20 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 460;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_30 = const_str_digest_bc031868e3ea3180f3e8ef75b396a482;
                if (var_sts_Locked == NULL) {
                    Py_DECREF(tmp_called_name_20);
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "sts_Locked");
                    exception_tb = NULL;

                    exception_lineno = 460;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_right_name_29 = var_sts_Locked;
                tmp_left_name_29 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_30, tmp_right_name_29);
                if (tmp_left_name_29 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_20);

                    exception_lineno = 460;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_30 = const_str_newline;
                tmp_args_element_name_32 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_29, tmp_right_name_30);
                Py_DECREF(tmp_left_name_29);
                if (tmp_args_element_name_32 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_20);

                    exception_lineno = 460;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 460;
                tmp_call_result_27 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_20, tmp_args_element_name_32);
                Py_DECREF(tmp_called_name_20);
                Py_DECREF(tmp_args_element_name_32);
                if (tmp_call_result_27 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 460;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_27);
            }
            {
                PyObject *tmp_called_name_21;
                PyObject *tmp_source_name_76;
                PyObject *tmp_call_result_28;
                PyObject *tmp_args_element_name_33;
                PyObject *tmp_left_name_31;
                PyObject *tmp_left_name_32;
                PyObject *tmp_right_name_31;
                PyObject *tmp_right_name_32;
                CHECK_OBJECT(var_queryTextList);
                tmp_source_name_76 = var_queryTextList;
                tmp_called_name_21 = LOOKUP_ATTRIBUTE(tmp_source_name_76, const_str_plain_append);
                if (tmp_called_name_21 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 461;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_32 = const_str_digest_ec7f14d6f87a9402f91132429af0c8c5;
                if (var_sts_LockingEnabled == NULL) {
                    Py_DECREF(tmp_called_name_21);
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "sts_LockingEnabled");
                    exception_tb = NULL;

                    exception_lineno = 461;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_right_name_31 = var_sts_LockingEnabled;
                tmp_left_name_31 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_32, tmp_right_name_31);
                if (tmp_left_name_31 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_21);

                    exception_lineno = 461;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_32 = const_str_newline;
                tmp_args_element_name_33 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_31, tmp_right_name_32);
                Py_DECREF(tmp_left_name_31);
                if (tmp_args_element_name_33 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_21);

                    exception_lineno = 461;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 461;
                tmp_call_result_28 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_21, tmp_args_element_name_33);
                Py_DECREF(tmp_called_name_21);
                Py_DECREF(tmp_args_element_name_33);
                if (tmp_call_result_28 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 461;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_28);
            }
            {
                PyObject *tmp_called_name_22;
                PyObject *tmp_source_name_77;
                PyObject *tmp_call_result_29;
                PyObject *tmp_args_element_name_34;
                PyObject *tmp_left_name_33;
                PyObject *tmp_left_name_34;
                PyObject *tmp_right_name_33;
                PyObject *tmp_right_name_34;
                CHECK_OBJECT(var_queryTextList);
                tmp_source_name_77 = var_queryTextList;
                tmp_called_name_22 = LOOKUP_ATTRIBUTE(tmp_source_name_77, const_str_plain_append);
                if (tmp_called_name_22 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 462;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_34 = const_str_digest_a036ff953132b6466dcdd8be6f790a59;
                if (var_sts_MBRShadowNotSupported == NULL) {
                    Py_DECREF(tmp_called_name_22);
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "sts_MBRShadowNotSupported");
                    exception_tb = NULL;

                    exception_lineno = 462;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_right_name_33 = var_sts_MBRShadowNotSupported;
                tmp_left_name_33 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_34, tmp_right_name_33);
                if (tmp_left_name_33 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_22);

                    exception_lineno = 462;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_34 = const_str_newline;
                tmp_args_element_name_34 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_33, tmp_right_name_34);
                Py_DECREF(tmp_left_name_33);
                if (tmp_args_element_name_34 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_22);

                    exception_lineno = 462;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 462;
                tmp_call_result_29 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_22, tmp_args_element_name_34);
                Py_DECREF(tmp_called_name_22);
                Py_DECREF(tmp_args_element_name_34);
                if (tmp_call_result_29 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 462;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_29);
            }
            {
                PyObject *tmp_called_name_23;
                PyObject *tmp_source_name_78;
                PyObject *tmp_call_result_30;
                PyObject *tmp_args_element_name_35;
                PyObject *tmp_left_name_35;
                PyObject *tmp_left_name_36;
                PyObject *tmp_right_name_35;
                PyObject *tmp_right_name_36;
                CHECK_OBJECT(var_queryTextList);
                tmp_source_name_78 = var_queryTextList;
                tmp_called_name_23 = LOOKUP_ATTRIBUTE(tmp_source_name_78, const_str_plain_append);
                if (tmp_called_name_23 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 463;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_36 = const_str_digest_ca6ee9ff3fe103ce252238d53ea68bfa;
                if (var_sts_MBREnabled == NULL) {
                    Py_DECREF(tmp_called_name_23);
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "sts_MBREnabled");
                    exception_tb = NULL;

                    exception_lineno = 463;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_right_name_35 = var_sts_MBREnabled;
                tmp_left_name_35 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_36, tmp_right_name_35);
                if (tmp_left_name_35 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_23);

                    exception_lineno = 463;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_36 = const_str_newline;
                tmp_args_element_name_35 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_35, tmp_right_name_36);
                Py_DECREF(tmp_left_name_35);
                if (tmp_args_element_name_35 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_23);

                    exception_lineno = 463;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 463;
                tmp_call_result_30 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_23, tmp_args_element_name_35);
                Py_DECREF(tmp_called_name_23);
                Py_DECREF(tmp_args_element_name_35);
                if (tmp_call_result_30 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 463;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_30);
            }
            {
                PyObject *tmp_called_name_24;
                PyObject *tmp_source_name_79;
                PyObject *tmp_call_result_31;
                PyObject *tmp_args_element_name_36;
                PyObject *tmp_left_name_37;
                PyObject *tmp_left_name_38;
                PyObject *tmp_right_name_37;
                PyObject *tmp_right_name_38;
                CHECK_OBJECT(var_queryTextList);
                tmp_source_name_79 = var_queryTextList;
                tmp_called_name_24 = LOOKUP_ATTRIBUTE(tmp_source_name_79, const_str_plain_append);
                if (tmp_called_name_24 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 464;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_38 = const_str_digest_3490b26e2c07b56165328e2d9172f15a;
                if (var_sts_MBRDone == NULL) {
                    Py_DECREF(tmp_called_name_24);
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "sts_MBRDone");
                    exception_tb = NULL;

                    exception_lineno = 464;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_right_name_37 = var_sts_MBRDone;
                tmp_left_name_37 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_38, tmp_right_name_37);
                if (tmp_left_name_37 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_24);

                    exception_lineno = 464;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_38 = const_str_digest_f8d3ecaf41cb3d8a0f6e94493e4e05fc;
                tmp_args_element_name_36 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_37, tmp_right_name_38);
                Py_DECREF(tmp_left_name_37);
                if (tmp_args_element_name_36 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_24);

                    exception_lineno = 464;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 464;
                tmp_call_result_31 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_24, tmp_args_element_name_36);
                Py_DECREF(tmp_called_name_24);
                Py_DECREF(tmp_args_element_name_36);
                if (tmp_call_result_31 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 464;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_31);
            }
            {
                PyObject *tmp_called_name_25;
                PyObject *tmp_source_name_80;
                PyObject *tmp_call_result_32;
                PyObject *tmp_args_element_name_37;
                PyObject *tmp_left_name_39;
                PyObject *tmp_left_name_40;
                PyObject *tmp_right_name_39;
                PyObject *tmp_right_name_40;
                CHECK_OBJECT(var_queryTextList);
                tmp_source_name_80 = var_queryTextList;
                tmp_called_name_25 = LOOKUP_ATTRIBUTE(tmp_source_name_80, const_str_plain_append);
                if (tmp_called_name_25 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 465;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_40 = const_str_digest_55f129d84beb41e93fee633aa27581ed;
                if (var_singleUser == NULL) {
                    Py_DECREF(tmp_called_name_25);
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "singleUser");
                    exception_tb = NULL;

                    exception_lineno = 465;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_right_name_39 = var_singleUser;
                tmp_left_name_39 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_40, tmp_right_name_39);
                if (tmp_left_name_39 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_25);

                    exception_lineno = 465;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_40 = const_str_newline;
                tmp_args_element_name_37 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_39, tmp_right_name_40);
                Py_DECREF(tmp_left_name_39);
                if (tmp_args_element_name_37 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_25);

                    exception_lineno = 465;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 465;
                tmp_call_result_32 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_25, tmp_args_element_name_37);
                Py_DECREF(tmp_called_name_25);
                Py_DECREF(tmp_args_element_name_37);
                if (tmp_call_result_32 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 465;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_32);
            }
            {
                PyObject *tmp_called_name_26;
                PyObject *tmp_source_name_81;
                PyObject *tmp_call_result_33;
                PyObject *tmp_args_element_name_38;
                PyObject *tmp_left_name_41;
                PyObject *tmp_left_name_42;
                PyObject *tmp_right_name_41;
                PyObject *tmp_right_name_42;
                CHECK_OBJECT(var_queryTextList);
                tmp_source_name_81 = var_queryTextList;
                tmp_called_name_26 = LOOKUP_ATTRIBUTE(tmp_source_name_81, const_str_plain_append);
                if (tmp_called_name_26 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 466;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_42 = const_str_digest_56909ab61570685ab870054d5154f2f6;
                if (var_nbr_Objects == NULL) {
                    Py_DECREF(tmp_called_name_26);
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "nbr_Objects");
                    exception_tb = NULL;

                    exception_lineno = 466;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_right_name_41 = var_nbr_Objects;
                tmp_left_name_41 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_42, tmp_right_name_41);
                if (tmp_left_name_41 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_26);

                    exception_lineno = 466;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_42 = const_str_digest_ad53835ae241a2eb325b6652c22d7ec7;
                tmp_args_element_name_38 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_41, tmp_right_name_42);
                Py_DECREF(tmp_left_name_41);
                if (tmp_args_element_name_38 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_26);

                    exception_lineno = 466;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 466;
                tmp_call_result_33 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_26, tmp_args_element_name_38);
                Py_DECREF(tmp_called_name_26);
                Py_DECREF(tmp_args_element_name_38);
                if (tmp_call_result_33 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 466;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_33);
            }
            {
                PyObject *tmp_called_name_27;
                PyObject *tmp_source_name_82;
                PyObject *tmp_call_result_34;
                PyObject *tmp_args_element_name_39;
                PyObject *tmp_left_name_43;
                PyObject *tmp_left_name_44;
                PyObject *tmp_right_name_43;
                PyObject *tmp_right_name_44;
                CHECK_OBJECT(var_queryTextList);
                tmp_source_name_82 = var_queryTextList;
                tmp_called_name_27 = LOOKUP_ATTRIBUTE(tmp_source_name_82, const_str_plain_append);
                if (tmp_called_name_27 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 467;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_44 = const_str_digest_737123fd8bb9015bd7e3debea2571fd9;
                if (var_tblsz == NULL) {
                    Py_DECREF(tmp_called_name_27);
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "tblsz");
                    exception_tb = NULL;

                    exception_lineno = 467;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_right_name_43 = var_tblsz;
                tmp_left_name_43 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_44, tmp_right_name_43);
                if (tmp_left_name_43 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_27);

                    exception_lineno = 467;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_44 = const_str_newline;
                tmp_args_element_name_39 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_43, tmp_right_name_44);
                Py_DECREF(tmp_left_name_43);
                if (tmp_args_element_name_39 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_27);

                    exception_lineno = 467;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 467;
                tmp_call_result_34 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_27, tmp_args_element_name_39);
                Py_DECREF(tmp_called_name_27);
                Py_DECREF(tmp_args_element_name_39);
                if (tmp_call_result_34 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 467;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_34);
            }
            {
                PyObject *tmp_called_name_28;
                PyObject *tmp_source_name_83;
                PyObject *tmp_call_result_35;
                PyObject *tmp_args_element_name_40;
                PyObject *tmp_left_name_45;
                PyObject *tmp_left_name_46;
                PyObject *tmp_right_name_45;
                PyObject *tmp_right_name_46;
                CHECK_OBJECT(var_queryTextList);
                tmp_source_name_83 = var_queryTextList;
                tmp_called_name_28 = LOOKUP_ATTRIBUTE(tmp_source_name_83, const_str_plain_append);
                if (tmp_called_name_28 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 468;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_46 = const_str_digest_fa4210e8e44cbe0e2aa4079faf6cd0bf;
                if (var_nbr_MaxTables == NULL) {
                    Py_DECREF(tmp_called_name_28);
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "nbr_MaxTables");
                    exception_tb = NULL;

                    exception_lineno = 468;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_right_name_45 = var_nbr_MaxTables;
                tmp_left_name_45 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_46, tmp_right_name_45);
                if (tmp_left_name_45 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_28);

                    exception_lineno = 468;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_46 = const_str_digest_c888f0388b2896f3fb56f9d36c5abce0;
                tmp_args_element_name_40 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_45, tmp_right_name_46);
                Py_DECREF(tmp_left_name_45);
                if (tmp_args_element_name_40 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_28);

                    exception_lineno = 468;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 468;
                tmp_call_result_35 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_28, tmp_args_element_name_40);
                Py_DECREF(tmp_called_name_28);
                Py_DECREF(tmp_args_element_name_40);
                if (tmp_call_result_35 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 468;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_35);
            }
            {
                PyObject *tmp_called_name_29;
                PyObject *tmp_source_name_84;
                PyObject *tmp_call_result_36;
                PyObject *tmp_args_element_name_41;
                PyObject *tmp_left_name_47;
                PyObject *tmp_left_name_48;
                PyObject *tmp_right_name_47;
                PyObject *tmp_right_name_48;
                CHECK_OBJECT(var_queryTextList);
                tmp_source_name_84 = var_queryTextList;
                tmp_called_name_29 = LOOKUP_ATTRIBUTE(tmp_source_name_84, const_str_plain_append);
                if (tmp_called_name_29 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 469;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_48 = const_str_digest_124212c711a59cd480738702446f790e;
                if (var_nbr_Admins == NULL) {
                    Py_DECREF(tmp_called_name_29);
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "nbr_Admins");
                    exception_tb = NULL;

                    exception_lineno = 469;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_right_name_47 = var_nbr_Admins;
                tmp_left_name_47 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_48, tmp_right_name_47);
                if (tmp_left_name_47 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_29);

                    exception_lineno = 469;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_48 = const_str_newline;
                tmp_args_element_name_41 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_47, tmp_right_name_48);
                Py_DECREF(tmp_left_name_47);
                if (tmp_args_element_name_41 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_29);

                    exception_lineno = 469;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 469;
                tmp_call_result_36 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_29, tmp_args_element_name_41);
                Py_DECREF(tmp_called_name_29);
                Py_DECREF(tmp_args_element_name_41);
                if (tmp_call_result_36 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 469;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_36);
            }
            {
                PyObject *tmp_called_name_30;
                PyObject *tmp_source_name_85;
                PyObject *tmp_call_result_37;
                PyObject *tmp_args_element_name_42;
                PyObject *tmp_left_name_49;
                PyObject *tmp_left_name_50;
                PyObject *tmp_right_name_49;
                PyObject *tmp_right_name_50;
                CHECK_OBJECT(var_queryTextList);
                tmp_source_name_85 = var_queryTextList;
                tmp_called_name_30 = LOOKUP_ATTRIBUTE(tmp_source_name_85, const_str_plain_append);
                if (tmp_called_name_30 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 470;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_50 = const_str_digest_2d5a8e8391575c4e14e6dc6db8c07f2f;
                if (var_nbr_Users == NULL) {
                    Py_DECREF(tmp_called_name_30);
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "nbr_Users");
                    exception_tb = NULL;

                    exception_lineno = 470;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_right_name_49 = var_nbr_Users;
                tmp_left_name_49 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_50, tmp_right_name_49);
                if (tmp_left_name_49 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_30);

                    exception_lineno = 470;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_50 = const_str_newline;
                tmp_args_element_name_42 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_49, tmp_right_name_50);
                Py_DECREF(tmp_left_name_49);
                if (tmp_args_element_name_42 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_30);

                    exception_lineno = 470;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 470;
                tmp_call_result_37 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_30, tmp_args_element_name_42);
                Py_DECREF(tmp_called_name_30);
                Py_DECREF(tmp_args_element_name_42);
                if (tmp_call_result_37 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 470;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_37);
            }
            {
                PyObject *tmp_called_name_31;
                PyObject *tmp_source_name_86;
                PyObject *tmp_call_result_38;
                PyObject *tmp_args_element_name_43;
                PyObject *tmp_left_name_51;
                PyObject *tmp_left_name_52;
                PyObject *tmp_right_name_51;
                PyObject *tmp_right_name_52;
                CHECK_OBJECT(var_queryTextList);
                tmp_source_name_86 = var_queryTextList;
                tmp_called_name_31 = LOOKUP_ATTRIBUTE(tmp_source_name_86, const_str_plain_append);
                if (tmp_called_name_31 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 471;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_52 = const_str_digest_10536f1422f60e0736bdf6db76e4a534;
                if (var_comID_base == NULL) {
                    Py_DECREF(tmp_called_name_31);
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "comID_base");
                    exception_tb = NULL;

                    exception_lineno = 471;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_right_name_51 = var_comID_base;
                tmp_left_name_51 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_52, tmp_right_name_51);
                if (tmp_left_name_51 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_31);

                    exception_lineno = 471;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_52 = const_str_newline;
                tmp_args_element_name_43 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_51, tmp_right_name_52);
                Py_DECREF(tmp_left_name_51);
                if (tmp_args_element_name_43 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_31);

                    exception_lineno = 471;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 471;
                tmp_call_result_38 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_31, tmp_args_element_name_43);
                Py_DECREF(tmp_called_name_31);
                Py_DECREF(tmp_args_element_name_43);
                if (tmp_call_result_38 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 471;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_38);
            }
            {
                PyObject *tmp_called_name_32;
                PyObject *tmp_source_name_87;
                PyObject *tmp_call_result_39;
                PyObject *tmp_args_element_name_44;
                PyObject *tmp_left_name_53;
                PyObject *tmp_left_name_54;
                PyObject *tmp_right_name_53;
                PyObject *tmp_right_name_54;
                CHECK_OBJECT(var_queryTextList);
                tmp_source_name_87 = var_queryTextList;
                tmp_called_name_32 = LOOKUP_ATTRIBUTE(tmp_source_name_87, const_str_plain_append);
                if (tmp_called_name_32 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 472;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_54 = const_str_digest_e72492ba4d6547da2ae167e08a32821c;
                if (var_initialPIN == NULL) {
                    Py_DECREF(tmp_called_name_32);
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "initialPIN");
                    exception_tb = NULL;

                    exception_lineno = 472;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_right_name_53 = var_initialPIN;
                tmp_left_name_53 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_54, tmp_right_name_53);
                if (tmp_left_name_53 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_32);

                    exception_lineno = 472;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_54 = const_str_newline;
                tmp_args_element_name_44 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_53, tmp_right_name_54);
                Py_DECREF(tmp_left_name_53);
                if (tmp_args_element_name_44 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_32);

                    exception_lineno = 472;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 472;
                tmp_call_result_39 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_32, tmp_args_element_name_44);
                Py_DECREF(tmp_called_name_32);
                Py_DECREF(tmp_args_element_name_44);
                if (tmp_call_result_39 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 472;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_39);
            }
            {
                PyObject *tmp_assign_source_80;
                PyObject *tmp_called_name_33;
                PyObject *tmp_mvar_value_12;
                PyObject *tmp_args_element_name_45;
                PyObject *tmp_args_element_name_46;
                tmp_mvar_value_12 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_QueryDialog);

                if (unlikely(tmp_mvar_value_12 == NULL)) {
                    tmp_mvar_value_12 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_QueryDialog);
                }

                if (tmp_mvar_value_12 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 1342 ], 40, 0);
                    exception_tb = NULL;

                    exception_lineno = 475;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_33 = tmp_mvar_value_12;
                CHECK_OBJECT(par_parent);
                tmp_args_element_name_45 = par_parent;
                CHECK_OBJECT(var_queryTextList);
                tmp_args_element_name_46 = var_queryTextList;
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 475;
                {
                    PyObject *call_args[] = {tmp_args_element_name_45, tmp_args_element_name_46};
                    tmp_assign_source_80 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_33, call_args);
                }

                if (tmp_assign_source_80 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 475;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert(var_queryWin == NULL);
                var_queryWin = tmp_assign_source_80;
            }
            {
                nuitka_bool tmp_condition_result_32;
                if (var_rescan_needed == NUITKA_BOOL_UNASSIGNED) {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "rescan_needed");
                    exception_tb = NULL;

                    exception_lineno = 480;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_condition_result_32 = var_rescan_needed;
                if (tmp_condition_result_32 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_32;
                } else {
                    goto branch_no_32;
                }
                branch_yes_32:;
                {
                    PyObject *tmp_called_instance_31;
                    PyObject *tmp_call_result_40;
                    CHECK_OBJECT(par_parent);
                    tmp_called_instance_31 = par_parent;
                    frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 481;
                    tmp_call_result_40 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_31, const_str_plain_msg_ok, &PyTuple_GET_ITEM(const_tuple_str_digest_ae3b8b33bbb4f0816fc34e114de2f069_tuple, 0));

                    if (tmp_call_result_40 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 481;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF(tmp_call_result_40);
                }
                {
                    PyObject *tmp_called_instance_32;
                    PyObject *tmp_mvar_value_13;
                    PyObject *tmp_call_result_41;
                    PyObject *tmp_args_element_name_47;
                    PyObject *tmp_args_element_name_48;
                    PyObject *tmp_args_element_name_49;
                    tmp_mvar_value_13 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_runscan);

                    if (unlikely(tmp_mvar_value_13 == NULL)) {
                        tmp_mvar_value_13 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_runscan);
                    }

                    if (tmp_mvar_value_13 == NULL) {

                        exception_type = PyExc_NameError;
                        Py_INCREF(exception_type);
                        exception_value = UNSTREAM_STRING(&constant_bin[ 454 ], 36, 0);
                        exception_tb = NULL;

                        exception_lineno = 482;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_called_instance_32 = tmp_mvar_value_13;
                    tmp_args_element_name_47 = Py_None;
                    CHECK_OBJECT(par_parent);
                    tmp_args_element_name_48 = par_parent;
                    tmp_args_element_name_49 = Py_True;
                    frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 482;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_47, tmp_args_element_name_48, tmp_args_element_name_49};
                        tmp_call_result_41 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_32, const_str_plain_run_scan, call_args);
                    }

                    if (tmp_call_result_41 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 482;
                        type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF(tmp_call_result_41);
                }
                branch_no_32:;
            }
            goto branch_end_7;
            branch_no_7:;
            {
                PyObject *tmp_assattr_name_3;
                PyObject *tmp_assattr_target_3;
                tmp_assattr_name_3 = Py_False;
                CHECK_OBJECT(par_parent);
                tmp_assattr_target_3 = par_parent;
                tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, const_str_plain_scanning, tmp_assattr_name_3);
                if (tmp_result == false) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 486;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
            }
            branch_end_7:;
        }
        goto branch_end_6;
        branch_no_6:;
        {
            nuitka_bool tmp_condition_result_33;
            PyObject *tmp_compexpr_left_28;
            PyObject *tmp_compexpr_right_28;
            CHECK_OBJECT(par_mode);
            tmp_compexpr_left_28 = par_mode;
            tmp_compexpr_right_28 = const_int_0;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_28, tmp_compexpr_right_28);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 487;
                type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_33 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_33 == NUITKA_BOOL_TRUE) {
                goto branch_yes_33;
            } else {
                goto branch_no_33;
            }
            branch_yes_33:;
            {
                PyObject *tmp_called_instance_33;
                PyObject *tmp_call_result_42;
                CHECK_OBJECT(par_parent);
                tmp_called_instance_33 = par_parent;
                frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame.f_lineno = 488;
                tmp_call_result_42 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_33, const_str_plain_msg_err, &PyTuple_GET_ITEM(const_tuple_str_digest_b8faea6f4cc3bf2fcc226045f4bd32d1_tuple, 0));

                if (tmp_call_result_42 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 488;
                    type_description_1 = "oooooooooooooooooooNobooooooNoooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_42);
            }
            branch_no_33:;
        }
        branch_end_6:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ed44140aa8ea052c1de5d94d3a6d0d62);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_ed44140aa8ea052c1de5d94d3a6d0d62);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ed44140aa8ea052c1de5d94d3a6d0d62);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ed44140aa8ea052c1de5d94d3a6d0d62, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_ed44140aa8ea052c1de5d94d3a6d0d62->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ed44140aa8ea052c1de5d94d3a6d0d62, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ed44140aa8ea052c1de5d94d3a6d0d62,
        type_description_1,
        par_button,
        par_parent,
        par_mode,
        var_tblsz_i,
        var_nbr_Admins,
        var_new_devname,
        var_tblsz,
        var_dl_len,
        var_txt_33,
        var_nbr_Objects,
        var_initialPIN,
        var_list_d,
        var_x_words,
        var_txt,
        var_txt11,
        var_index,
        var_sts_MBRDone,
        var_queryWin,
        var_sts_Locked,
        NULL,
        var_tt,
        (int)var_rescan_needed,
        var_nbr_MaxTables,
        var_sts_MBREnabled,
        var_t,
        var_comID_base,
        var_nbr_Users,
        var_singleUser,
        NULL,
        var_admin_state,
        var_locking_state,
        var_present,
        var_matched,
        var_test_dev,
        var_sts_MBRShadowNotSupported,
        var_i,
        var_m,
        var_t3,
        var_txt_s,
        var_queryTextList,
        var_txtState,
        var_entry,
        var_txt1,
        var_txt2,
        var_sts_LockingEnabled
    );


    // Release cached frame.
    if (frame_ed44140aa8ea052c1de5d94d3a6d0d62 == cache_frame_ed44140aa8ea052c1de5d94d3a6d0d62) {
        Py_DECREF(frame_ed44140aa8ea052c1de5d94d3a6d0d62);
    }
    cache_frame_ed44140aa8ea052c1de5d94d3a6d0d62 = NULL;

    assertFrameObject(frame_ed44140aa8ea052c1de5d94d3a6d0d62);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_12_query);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_tblsz_i);
    var_tblsz_i = NULL;

    Py_XDECREF(var_nbr_Admins);
    var_nbr_Admins = NULL;

    Py_XDECREF(var_new_devname);
    var_new_devname = NULL;

    Py_XDECREF(var_tblsz);
    var_tblsz = NULL;

    Py_XDECREF(var_dl_len);
    var_dl_len = NULL;

    Py_XDECREF(var_txt_33);
    var_txt_33 = NULL;

    Py_XDECREF(var_nbr_Objects);
    var_nbr_Objects = NULL;

    Py_XDECREF(var_initialPIN);
    var_initialPIN = NULL;

    Py_XDECREF(var_list_d);
    var_list_d = NULL;

    Py_XDECREF(var_x_words);
    var_x_words = NULL;

    Py_XDECREF(var_txt);
    var_txt = NULL;

    Py_XDECREF(var_txt11);
    var_txt11 = NULL;

    Py_XDECREF(var_index);
    var_index = NULL;

    Py_XDECREF(var_sts_MBRDone);
    var_sts_MBRDone = NULL;

    Py_XDECREF(var_queryWin);
    var_queryWin = NULL;

    Py_XDECREF(var_sts_Locked);
    var_sts_Locked = NULL;

    Py_XDECREF(var_tt);
    var_tt = NULL;

    Py_XDECREF(var_nbr_MaxTables);
    var_nbr_MaxTables = NULL;

    Py_XDECREF(var_sts_MBREnabled);
    var_sts_MBREnabled = NULL;

    Py_XDECREF(var_t);
    var_t = NULL;

    Py_XDECREF(var_comID_base);
    var_comID_base = NULL;

    Py_XDECREF(var_nbr_Users);
    var_nbr_Users = NULL;

    Py_XDECREF(var_singleUser);
    var_singleUser = NULL;

    Py_XDECREF(var_admin_state);
    var_admin_state = NULL;

    Py_XDECREF(var_locking_state);
    var_locking_state = NULL;

    Py_XDECREF(var_present);
    var_present = NULL;

    Py_XDECREF(var_matched);
    var_matched = NULL;

    Py_XDECREF(var_test_dev);
    var_test_dev = NULL;

    Py_XDECREF(var_sts_MBRShadowNotSupported);
    var_sts_MBRShadowNotSupported = NULL;

    Py_XDECREF(var_i);
    var_i = NULL;

    Py_XDECREF(var_m);
    var_m = NULL;

    Py_XDECREF(var_t3);
    var_t3 = NULL;

    Py_XDECREF(var_txt_s);
    var_txt_s = NULL;

    Py_XDECREF(var_queryTextList);
    var_queryTextList = NULL;

    Py_XDECREF(var_txtState);
    var_txtState = NULL;

    Py_XDECREF(var_entry);
    var_entry = NULL;

    Py_XDECREF(var_txt1);
    var_txt1 = NULL;

    Py_XDECREF(var_txt2);
    var_txt2 = NULL;

    Py_XDECREF(var_sts_LockingEnabled);
    var_sts_LockingEnabled = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_tblsz_i);
    var_tblsz_i = NULL;

    Py_XDECREF(var_nbr_Admins);
    var_nbr_Admins = NULL;

    Py_XDECREF(var_new_devname);
    var_new_devname = NULL;

    Py_XDECREF(var_tblsz);
    var_tblsz = NULL;

    Py_XDECREF(var_dl_len);
    var_dl_len = NULL;

    Py_XDECREF(var_txt_33);
    var_txt_33 = NULL;

    Py_XDECREF(var_nbr_Objects);
    var_nbr_Objects = NULL;

    Py_XDECREF(var_initialPIN);
    var_initialPIN = NULL;

    Py_XDECREF(var_list_d);
    var_list_d = NULL;

    Py_XDECREF(var_x_words);
    var_x_words = NULL;

    Py_XDECREF(var_txt);
    var_txt = NULL;

    Py_XDECREF(var_txt11);
    var_txt11 = NULL;

    Py_XDECREF(var_index);
    var_index = NULL;

    Py_XDECREF(var_sts_MBRDone);
    var_sts_MBRDone = NULL;

    Py_XDECREF(var_queryWin);
    var_queryWin = NULL;

    Py_XDECREF(var_sts_Locked);
    var_sts_Locked = NULL;

    Py_XDECREF(var_tt);
    var_tt = NULL;

    Py_XDECREF(var_nbr_MaxTables);
    var_nbr_MaxTables = NULL;

    Py_XDECREF(var_sts_MBREnabled);
    var_sts_MBREnabled = NULL;

    Py_XDECREF(var_t);
    var_t = NULL;

    Py_XDECREF(var_comID_base);
    var_comID_base = NULL;

    Py_XDECREF(var_nbr_Users);
    var_nbr_Users = NULL;

    Py_XDECREF(var_singleUser);
    var_singleUser = NULL;

    Py_XDECREF(var_admin_state);
    var_admin_state = NULL;

    Py_XDECREF(var_locking_state);
    var_locking_state = NULL;

    Py_XDECREF(var_present);
    var_present = NULL;

    Py_XDECREF(var_matched);
    var_matched = NULL;

    Py_XDECREF(var_test_dev);
    var_test_dev = NULL;

    Py_XDECREF(var_sts_MBRShadowNotSupported);
    var_sts_MBRShadowNotSupported = NULL;

    Py_XDECREF(var_i);
    var_i = NULL;

    Py_XDECREF(var_m);
    var_m = NULL;

    Py_XDECREF(var_t3);
    var_t3 = NULL;

    Py_XDECREF(var_txt_s);
    var_txt_s = NULL;

    Py_XDECREF(var_queryTextList);
    var_queryTextList = NULL;

    Py_XDECREF(var_txtState);
    var_txtState = NULL;

    Py_XDECREF(var_entry);
    var_entry = NULL;

    Py_XDECREF(var_txt1);
    var_txt1 = NULL;

    Py_XDECREF(var_txt2);
    var_txt2 = NULL;

    Py_XDECREF(var_sts_LockingEnabled);
    var_sts_LockingEnabled = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_12_query);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);
    CHECK_OBJECT(par_mode);
    Py_DECREF(par_mode);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);
    CHECK_OBJECT(par_mode);
    Py_DECREF(par_mode);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_13___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_parent = python_pars[1];
    PyObject *par_a = python_pars[2];
    PyObject *var_eventID = NULL;
    PyObject *var_filter_box = NULL;
    PyObject *var_eventLevel = NULL;
    PyObject *var_halign = NULL;
    PyObject *var_i = NULL;
    PyObject *var_cell = NULL;
    PyObject *var_m = NULL;
    PyObject *var_logList = NULL;
    PyObject *var_dateTime = NULL;
    PyObject *var_vbox = NULL;
    PyObject *var_col = NULL;
    PyObject *var_eventDes = NULL;
    PyObject *var_scrolledWin = NULL;
    PyObject *var_treeView = NULL;
    PyObject *var_numEntries = NULL;
    PyObject *var_columns = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    struct Nuitka_FrameObject *frame_f472c0e13a0220a9ef62e77ea0093a01;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_f472c0e13a0220a9ef62e77ea0093a01 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = LIST_COPY(const_list_24d8dacd321300c55e438dfef03bb9c5_list);
        assert(var_columns == NULL);
        var_columns = tmp_assign_source_1;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_f472c0e13a0220a9ef62e77ea0093a01, codeobj_f472c0e13a0220a9ef62e77ea0093a01, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_f472c0e13a0220a9ef62e77ea0093a01 = cache_frame_f472c0e13a0220a9ef62e77ea0093a01;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_f472c0e13a0220a9ef62e77ea0093a01);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_f472c0e13a0220a9ef62e77ea0093a01) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_name_1 = PyList_New(0);
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_auditEntries, tmp_assattr_name_1);
        Py_DECREF(tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 538;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_name_2 = PyList_New(0);
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_errorEntries, tmp_assattr_name_2);
        Py_DECREF(tmp_assattr_name_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 539;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_name_3 = PyList_New(0);
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, const_str_plain_warnerrEntries, tmp_assattr_name_3);
        Py_DECREF(tmp_assattr_name_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 540;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_3;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 542;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_1;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_Dialog);
        if (tmp_source_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 542;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain___init__);
        Py_DECREF(tmp_source_name_1);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 542;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_args_element_name_1 = par_self;
        tmp_args_element_name_2 = const_str_digest_49b0685310235116230cb4e1af6222be;
        CHECK_OBJECT(par_parent);
        tmp_args_element_name_3 = par_parent;
        tmp_args_element_name_4 = const_int_0;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_2 == NULL) {
            Py_DECREF(tmp_called_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 542;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_2;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_STOCK_CLOSE);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 542;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_5 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_args_element_name_5, 0, tmp_tuple_element_1);
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_3 == NULL) {
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_5);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 542;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_3;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_RESPONSE_CLOSE);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_5);

            exception_lineno = 542;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_args_element_name_5, 1, tmp_tuple_element_1);
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 542;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS5(tmp_called_name_1, call_args);
        }

        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_5);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 542;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 543;
        tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_set_border_width, &PyTuple_GET_ITEM(const_tuple_int_pos_10_tuple, 0));

        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 543;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT(par_self);
        tmp_called_instance_2 = par_self;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 544;
        tmp_call_result_3 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_2, const_str_plain_set_default_size, &PyTuple_GET_ITEM(const_tuple_int_pos_500_int_pos_500_tuple, 0));

        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 544;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_5;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_call_result_4;
        int tmp_truth_name_1;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

        if (unlikely(tmp_mvar_value_4 == NULL)) {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
        }

        if (tmp_mvar_value_4 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
            exception_tb = NULL;

            exception_lineno = 546;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_5 = tmp_mvar_value_4;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_path);
        if (tmp_called_instance_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 546;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 546;
        tmp_call_result_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_3, const_str_plain_isfile, &PyTuple_GET_ITEM(const_tuple_str_digest_5cf6c02bf201b8ae03ca790b05911675_tuple, 0));

        Py_DECREF(tmp_called_instance_3);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 546;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_4);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_4);

            exception_lineno = 546;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_call_result_4);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_call_result_5;
            CHECK_OBJECT(par_self);
            tmp_called_instance_4 = par_self;
            frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 547;
            tmp_call_result_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_set_icon_from_file, &PyTuple_GET_ITEM(const_tuple_str_digest_5cf6c02bf201b8ae03ca790b05911675_tuple, 0));

            if (tmp_call_result_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 547;
                type_description_1 = "ooooooooooooNooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_5);
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_5;
        CHECK_OBJECT(par_self);
        tmp_called_instance_5 = par_self;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 548;
        tmp_assign_source_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_5, const_str_plain_get_content_area);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 548;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_vbox == NULL);
        var_vbox = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_called_instance_6;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_assattr_target_4;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_5 == NULL)) {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_5 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 550;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_6 = tmp_mvar_value_5;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 550;
        tmp_assattr_name_4 = CALL_METHOD_WITH_ARGS4(tmp_called_instance_6, const_str_plain_ListStore, &PyTuple_GET_ITEM(const_tuple_type_str_type_str_type_int_type_str_tuple, 0));

        if (tmp_assattr_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 550;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, const_str_plain_listStore, tmp_assattr_name_4);
        Py_DECREF(tmp_assattr_name_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 550;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_int_arg_1;
        PyObject *tmp_called_instance_7;
        CHECK_OBJECT(par_a);
        tmp_called_instance_7 = par_a;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 552;
        tmp_int_arg_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_7, const_str_plain_group, &PyTuple_GET_ITEM(const_tuple_int_pos_1_tuple, 0));

        if (tmp_int_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 552;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_3 = PyNumber_Int(tmp_int_arg_1);
        Py_DECREF(tmp_int_arg_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 552;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_numEntries == NULL);
        var_numEntries = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_instance_8;
        PyObject *tmp_called_instance_9;
        CHECK_OBJECT(par_a);
        tmp_called_instance_9 = par_a;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 553;
        tmp_called_instance_8 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_9, const_str_plain_group, &PyTuple_GET_ITEM(const_tuple_int_pos_2_tuple, 0));

        if (tmp_called_instance_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 553;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 553;
        tmp_assign_source_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_8, const_str_plain_split, &PyTuple_GET_ITEM(const_tuple_str_newline_tuple, 0));

        Py_DECREF(tmp_called_instance_8);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 553;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_logList == NULL);
        var_logList = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_range_arg_1;
        CHECK_OBJECT(var_numEntries);
        tmp_range_arg_1 = var_numEntries;
        tmp_iter_arg_1 = BUILTIN_RANGE(tmp_range_arg_1);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 557;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_5 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 557;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_5;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_6 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_6 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooooooooooNooooooo";
                exception_lineno = 557;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_7 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_i;
            var_i = tmp_assign_source_7;
            Py_INCREF(var_i);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_6;
        PyObject *tmp_mvar_value_6;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

        if (unlikely(tmp_mvar_value_6 == NULL)) {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
        }

        if (tmp_mvar_value_6 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
            exception_tb = NULL;

            exception_lineno = 559;
            type_description_1 = "ooooooooooooNooooooo";
            goto try_except_handler_2;
        }

        tmp_source_name_6 = tmp_mvar_value_6;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_match);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 559;
            type_description_1 = "ooooooooooooNooooooo";
            goto try_except_handler_2;
        }
        tmp_args_element_name_6 = const_str_digest_3dec77647be510d19621a0c9aeed35ae;
        CHECK_OBJECT(var_logList);
        tmp_subscribed_name_1 = var_logList;
        CHECK_OBJECT(var_i);
        tmp_subscript_name_1 = var_i;
        tmp_args_element_name_7 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
        if (tmp_args_element_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 559;
            type_description_1 = "ooooooooooooNooooooo";
            goto try_except_handler_2;
        }
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 559;
        {
            PyObject *call_args[] = {tmp_args_element_name_6, tmp_args_element_name_7};
            tmp_assign_source_8 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_2, call_args);
        }

        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_7);
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 559;
            type_description_1 = "ooooooooooooNooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_m;
            var_m = tmp_assign_source_8;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_2;
        CHECK_OBJECT(var_m);
        tmp_truth_name_2 = CHECK_IF_TRUE(var_m);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 560;
            type_description_1 = "ooooooooooooNooooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_2 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_9;
            PyObject *tmp_called_instance_10;
            CHECK_OBJECT(var_m);
            tmp_called_instance_10 = var_m;
            frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 561;
            tmp_assign_source_9 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_10, const_str_plain_group, &PyTuple_GET_ITEM(const_tuple_int_pos_1_tuple, 0));

            if (tmp_assign_source_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 561;
                type_description_1 = "ooooooooooooNooooooo";
                goto try_except_handler_2;
            }
            {
                PyObject *old = var_dateTime;
                var_dateTime = tmp_assign_source_9;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_10;
            PyObject *tmp_int_arg_2;
            PyObject *tmp_called_instance_11;
            CHECK_OBJECT(var_m);
            tmp_called_instance_11 = var_m;
            frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 562;
            tmp_int_arg_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_11, const_str_plain_group, &PyTuple_GET_ITEM(const_tuple_int_pos_2_tuple, 0));

            if (tmp_int_arg_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 562;
                type_description_1 = "ooooooooooooNooooooo";
                goto try_except_handler_2;
            }
            tmp_assign_source_10 = PyNumber_Int(tmp_int_arg_2);
            Py_DECREF(tmp_int_arg_2);
            if (tmp_assign_source_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 562;
                type_description_1 = "ooooooooooooNooooooo";
                goto try_except_handler_2;
            }
            {
                PyObject *old = var_eventID;
                var_eventID = tmp_assign_source_10;
                Py_XDECREF(old);
            }

        }
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            CHECK_OBJECT(var_eventID);
            tmp_compexpr_left_1 = var_eventID;
            tmp_compexpr_right_1 = const_int_pos_40;
            tmp_res = RICH_COMPARE_BOOL_LTE_OBJECT_INT(tmp_compexpr_left_1, tmp_compexpr_right_1);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 563;
                type_description_1 = "ooooooooooooNooooooo";
                goto try_except_handler_2;
            }
            tmp_condition_result_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
                goto branch_yes_3;
            } else {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_assign_source_11;
                PyObject *tmp_subscribed_name_2;
                PyObject *tmp_source_name_7;
                PyObject *tmp_subscript_name_2;
                CHECK_OBJECT(par_self);
                tmp_source_name_7 = par_self;
                tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_eventDescriptions);
                if (tmp_subscribed_name_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 564;
                    type_description_1 = "ooooooooooooNooooooo";
                    goto try_except_handler_2;
                }
                CHECK_OBJECT(var_eventID);
                tmp_subscript_name_2 = var_eventID;
                tmp_assign_source_11 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_2, tmp_subscript_name_2);
                Py_DECREF(tmp_subscribed_name_2);
                if (tmp_assign_source_11 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 564;
                    type_description_1 = "ooooooooooooNooooooo";
                    goto try_except_handler_2;
                }
                {
                    PyObject *old = var_eventDes;
                    var_eventDes = tmp_assign_source_11;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_12;
                tmp_assign_source_12 = const_str_plain_Information;
                {
                    PyObject *old = var_eventLevel;
                    var_eventLevel = tmp_assign_source_12;
                    Py_INCREF(var_eventLevel);
                    Py_XDECREF(old);
                }

            }
            {
                nuitka_bool tmp_condition_result_4;
                int tmp_or_left_truth_1;
                nuitka_bool tmp_or_left_value_1;
                nuitka_bool tmp_or_right_value_1;
                PyObject *tmp_compexpr_left_2;
                PyObject *tmp_compexpr_right_2;
                int tmp_or_left_truth_2;
                nuitka_bool tmp_or_left_value_2;
                nuitka_bool tmp_or_right_value_2;
                PyObject *tmp_compexpr_left_3;
                PyObject *tmp_compexpr_right_3;
                int tmp_and_left_truth_1;
                nuitka_bool tmp_and_left_value_1;
                nuitka_bool tmp_and_right_value_1;
                PyObject *tmp_compexpr_left_4;
                PyObject *tmp_compexpr_right_4;
                PyObject *tmp_compexpr_left_5;
                PyObject *tmp_compexpr_right_5;
                CHECK_OBJECT(var_eventID);
                tmp_compexpr_left_2 = var_eventID;
                tmp_compexpr_right_2 = const_int_pos_4;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_2, tmp_compexpr_right_2);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 566;
                    type_description_1 = "ooooooooooooNooooooo";
                    goto try_except_handler_2;
                }
                tmp_or_left_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
                if (tmp_or_left_truth_1 == 1) {
                    goto or_left_1;
                } else {
                    goto or_right_1;
                }
                or_right_1:;
                CHECK_OBJECT(var_eventID);
                tmp_compexpr_left_3 = var_eventID;
                tmp_compexpr_right_3 = const_int_pos_7;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_3, tmp_compexpr_right_3);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 566;
                    type_description_1 = "ooooooooooooNooooooo";
                    goto try_except_handler_2;
                }
                tmp_or_left_value_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                tmp_or_left_truth_2 = tmp_or_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
                if (tmp_or_left_truth_2 == 1) {
                    goto or_left_2;
                } else {
                    goto or_right_2;
                }
                or_right_2:;
                CHECK_OBJECT(var_eventID);
                tmp_compexpr_left_4 = var_eventID;
                tmp_compexpr_right_4 = const_int_pos_28;
                tmp_res = RICH_COMPARE_BOOL_GTE_OBJECT_INT(tmp_compexpr_left_4, tmp_compexpr_right_4);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 566;
                    type_description_1 = "ooooooooooooNooooooo";
                    goto try_except_handler_2;
                }
                tmp_and_left_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
                if (tmp_and_left_truth_1 == 1) {
                    goto and_right_1;
                } else {
                    goto and_left_1;
                }
                and_right_1:;
                CHECK_OBJECT(var_eventID);
                tmp_compexpr_left_5 = var_eventID;
                tmp_compexpr_right_5 = const_int_pos_40;
                tmp_res = RICH_COMPARE_BOOL_LTE_OBJECT_INT(tmp_compexpr_left_5, tmp_compexpr_right_5);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 566;
                    type_description_1 = "ooooooooooooNooooooo";
                    goto try_except_handler_2;
                }
                tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                tmp_or_right_value_2 = tmp_and_right_value_1;
                goto and_end_1;
                and_left_1:;
                tmp_or_right_value_2 = tmp_and_left_value_1;
                and_end_1:;
                tmp_or_right_value_1 = tmp_or_right_value_2;
                goto or_end_2;
                or_left_2:;
                tmp_or_right_value_1 = tmp_or_left_value_2;
                or_end_2:;
                tmp_condition_result_4 = tmp_or_right_value_1;
                goto or_end_1;
                or_left_1:;
                tmp_condition_result_4 = tmp_or_left_value_1;
                or_end_1:;
                if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_4;
                } else {
                    goto branch_no_4;
                }
                branch_yes_4:;
                {
                    PyObject *tmp_assign_source_13;
                    tmp_assign_source_13 = const_str_plain_Error;
                    {
                        PyObject *old = var_eventLevel;
                        assert(old != NULL);
                        var_eventLevel = tmp_assign_source_13;
                        Py_INCREF(var_eventLevel);
                        Py_DECREF(old);
                    }

                }
                {
                    PyObject *tmp_called_instance_12;
                    PyObject *tmp_source_name_8;
                    PyObject *tmp_call_result_6;
                    PyObject *tmp_args_element_name_8;
                    PyObject *tmp_tuple_element_2;
                    CHECK_OBJECT(par_self);
                    tmp_source_name_8 = par_self;
                    tmp_called_instance_12 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_errorEntries);
                    if (tmp_called_instance_12 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 568;
                        type_description_1 = "ooooooooooooNooooooo";
                        goto try_except_handler_2;
                    }
                    CHECK_OBJECT(var_eventLevel);
                    tmp_tuple_element_2 = var_eventLevel;
                    tmp_args_element_name_8 = PyTuple_New(4);
                    Py_INCREF(tmp_tuple_element_2);
                    PyTuple_SET_ITEM(tmp_args_element_name_8, 0, tmp_tuple_element_2);
                    CHECK_OBJECT(var_dateTime);
                    tmp_tuple_element_2 = var_dateTime;
                    Py_INCREF(tmp_tuple_element_2);
                    PyTuple_SET_ITEM(tmp_args_element_name_8, 1, tmp_tuple_element_2);
                    CHECK_OBJECT(var_eventID);
                    tmp_tuple_element_2 = var_eventID;
                    Py_INCREF(tmp_tuple_element_2);
                    PyTuple_SET_ITEM(tmp_args_element_name_8, 2, tmp_tuple_element_2);
                    CHECK_OBJECT(var_eventDes);
                    tmp_tuple_element_2 = var_eventDes;
                    Py_INCREF(tmp_tuple_element_2);
                    PyTuple_SET_ITEM(tmp_args_element_name_8, 3, tmp_tuple_element_2);
                    frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 568;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_8};
                        tmp_call_result_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_12, const_str_plain_append, call_args);
                    }

                    Py_DECREF(tmp_called_instance_12);
                    Py_DECREF(tmp_args_element_name_8);
                    if (tmp_call_result_6 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 568;
                        type_description_1 = "ooooooooooooNooooooo";
                        goto try_except_handler_2;
                    }
                    Py_DECREF(tmp_call_result_6);
                }
                {
                    PyObject *tmp_called_instance_13;
                    PyObject *tmp_source_name_9;
                    PyObject *tmp_call_result_7;
                    PyObject *tmp_args_element_name_9;
                    PyObject *tmp_tuple_element_3;
                    CHECK_OBJECT(par_self);
                    tmp_source_name_9 = par_self;
                    tmp_called_instance_13 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_warnerrEntries);
                    if (tmp_called_instance_13 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 569;
                        type_description_1 = "ooooooooooooNooooooo";
                        goto try_except_handler_2;
                    }
                    CHECK_OBJECT(var_eventLevel);
                    tmp_tuple_element_3 = var_eventLevel;
                    tmp_args_element_name_9 = PyTuple_New(4);
                    Py_INCREF(tmp_tuple_element_3);
                    PyTuple_SET_ITEM(tmp_args_element_name_9, 0, tmp_tuple_element_3);
                    CHECK_OBJECT(var_dateTime);
                    tmp_tuple_element_3 = var_dateTime;
                    Py_INCREF(tmp_tuple_element_3);
                    PyTuple_SET_ITEM(tmp_args_element_name_9, 1, tmp_tuple_element_3);
                    CHECK_OBJECT(var_eventID);
                    tmp_tuple_element_3 = var_eventID;
                    Py_INCREF(tmp_tuple_element_3);
                    PyTuple_SET_ITEM(tmp_args_element_name_9, 2, tmp_tuple_element_3);
                    CHECK_OBJECT(var_eventDes);
                    tmp_tuple_element_3 = var_eventDes;
                    Py_INCREF(tmp_tuple_element_3);
                    PyTuple_SET_ITEM(tmp_args_element_name_9, 3, tmp_tuple_element_3);
                    frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 569;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_9};
                        tmp_call_result_7 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_13, const_str_plain_append, call_args);
                    }

                    Py_DECREF(tmp_called_instance_13);
                    Py_DECREF(tmp_args_element_name_9);
                    if (tmp_call_result_7 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 569;
                        type_description_1 = "ooooooooooooNooooooo";
                        goto try_except_handler_2;
                    }
                    Py_DECREF(tmp_call_result_7);
                }
                goto branch_end_4;
                branch_no_4:;
                {
                    nuitka_bool tmp_condition_result_5;
                    int tmp_or_left_truth_3;
                    nuitka_bool tmp_or_left_value_3;
                    nuitka_bool tmp_or_right_value_3;
                    PyObject *tmp_compexpr_left_6;
                    PyObject *tmp_compexpr_right_6;
                    int tmp_or_left_truth_4;
                    nuitka_bool tmp_or_left_value_4;
                    nuitka_bool tmp_or_right_value_4;
                    PyObject *tmp_compexpr_left_7;
                    PyObject *tmp_compexpr_right_7;
                    PyObject *tmp_compexpr_left_8;
                    PyObject *tmp_compexpr_right_8;
                    CHECK_OBJECT(var_eventID);
                    tmp_compexpr_left_6 = var_eventID;
                    tmp_compexpr_right_6 = const_int_pos_5;
                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_6, tmp_compexpr_right_6);
                    if (tmp_res == -1) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 570;
                        type_description_1 = "ooooooooooooNooooooo";
                        goto try_except_handler_2;
                    }
                    tmp_or_left_value_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    tmp_or_left_truth_3 = tmp_or_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
                    if (tmp_or_left_truth_3 == 1) {
                        goto or_left_3;
                    } else {
                        goto or_right_3;
                    }
                    or_right_3:;
                    CHECK_OBJECT(var_eventID);
                    tmp_compexpr_left_7 = var_eventID;
                    tmp_compexpr_right_7 = const_int_pos_8;
                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_7, tmp_compexpr_right_7);
                    if (tmp_res == -1) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 570;
                        type_description_1 = "ooooooooooooNooooooo";
                        goto try_except_handler_2;
                    }
                    tmp_or_left_value_4 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    tmp_or_left_truth_4 = tmp_or_left_value_4 == NUITKA_BOOL_TRUE ? 1 : 0;
                    if (tmp_or_left_truth_4 == 1) {
                        goto or_left_4;
                    } else {
                        goto or_right_4;
                    }
                    or_right_4:;
                    CHECK_OBJECT(var_eventID);
                    tmp_compexpr_left_8 = var_eventID;
                    tmp_compexpr_right_8 = const_int_pos_9;
                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_8, tmp_compexpr_right_8);
                    if (tmp_res == -1) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 570;
                        type_description_1 = "ooooooooooooNooooooo";
                        goto try_except_handler_2;
                    }
                    tmp_or_right_value_4 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    tmp_or_right_value_3 = tmp_or_right_value_4;
                    goto or_end_4;
                    or_left_4:;
                    tmp_or_right_value_3 = tmp_or_left_value_4;
                    or_end_4:;
                    tmp_condition_result_5 = tmp_or_right_value_3;
                    goto or_end_3;
                    or_left_3:;
                    tmp_condition_result_5 = tmp_or_left_value_3;
                    or_end_3:;
                    if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
                        goto branch_yes_5;
                    } else {
                        goto branch_no_5;
                    }
                    branch_yes_5:;
                    {
                        PyObject *tmp_assign_source_14;
                        tmp_assign_source_14 = const_str_plain_Warning;
                        {
                            PyObject *old = var_eventLevel;
                            assert(old != NULL);
                            var_eventLevel = tmp_assign_source_14;
                            Py_INCREF(var_eventLevel);
                            Py_DECREF(old);
                        }

                    }
                    {
                        PyObject *tmp_called_instance_14;
                        PyObject *tmp_source_name_10;
                        PyObject *tmp_call_result_8;
                        PyObject *tmp_args_element_name_10;
                        PyObject *tmp_tuple_element_4;
                        CHECK_OBJECT(par_self);
                        tmp_source_name_10 = par_self;
                        tmp_called_instance_14 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_warnerrEntries);
                        if (tmp_called_instance_14 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 572;
                            type_description_1 = "ooooooooooooNooooooo";
                            goto try_except_handler_2;
                        }
                        CHECK_OBJECT(var_eventLevel);
                        tmp_tuple_element_4 = var_eventLevel;
                        tmp_args_element_name_10 = PyTuple_New(4);
                        Py_INCREF(tmp_tuple_element_4);
                        PyTuple_SET_ITEM(tmp_args_element_name_10, 0, tmp_tuple_element_4);
                        CHECK_OBJECT(var_dateTime);
                        tmp_tuple_element_4 = var_dateTime;
                        Py_INCREF(tmp_tuple_element_4);
                        PyTuple_SET_ITEM(tmp_args_element_name_10, 1, tmp_tuple_element_4);
                        CHECK_OBJECT(var_eventID);
                        tmp_tuple_element_4 = var_eventID;
                        Py_INCREF(tmp_tuple_element_4);
                        PyTuple_SET_ITEM(tmp_args_element_name_10, 2, tmp_tuple_element_4);
                        CHECK_OBJECT(var_eventDes);
                        tmp_tuple_element_4 = var_eventDes;
                        Py_INCREF(tmp_tuple_element_4);
                        PyTuple_SET_ITEM(tmp_args_element_name_10, 3, tmp_tuple_element_4);
                        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 572;
                        {
                            PyObject *call_args[] = {tmp_args_element_name_10};
                            tmp_call_result_8 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_14, const_str_plain_append, call_args);
                        }

                        Py_DECREF(tmp_called_instance_14);
                        Py_DECREF(tmp_args_element_name_10);
                        if (tmp_call_result_8 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 572;
                            type_description_1 = "ooooooooooooNooooooo";
                            goto try_except_handler_2;
                        }
                        Py_DECREF(tmp_call_result_8);
                    }
                    branch_no_5:;
                }
                branch_end_4:;
            }
            {
                nuitka_bool tmp_condition_result_6;
                int tmp_and_left_truth_2;
                nuitka_bool tmp_and_left_value_2;
                nuitka_bool tmp_and_right_value_2;
                PyObject *tmp_compexpr_left_9;
                PyObject *tmp_compexpr_right_9;
                PyObject *tmp_compexpr_left_10;
                PyObject *tmp_compexpr_right_10;
                CHECK_OBJECT(var_eventID);
                tmp_compexpr_left_9 = var_eventID;
                tmp_compexpr_right_9 = const_int_pos_40;
                tmp_res = RICH_COMPARE_BOOL_LTE_OBJECT_INT(tmp_compexpr_left_9, tmp_compexpr_right_9);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 573;
                    type_description_1 = "ooooooooooooNooooooo";
                    goto try_except_handler_2;
                }
                tmp_and_left_value_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
                if (tmp_and_left_truth_2 == 1) {
                    goto and_right_2;
                } else {
                    goto and_left_2;
                }
                and_right_2:;
                CHECK_OBJECT(var_eventID);
                tmp_compexpr_left_10 = var_eventID;
                tmp_compexpr_right_10 = const_int_pos_1;
                tmp_res = RICH_COMPARE_BOOL_GTE_OBJECT_INT(tmp_compexpr_left_10, tmp_compexpr_right_10);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 573;
                    type_description_1 = "ooooooooooooNooooooo";
                    goto try_except_handler_2;
                }
                tmp_and_right_value_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                tmp_condition_result_6 = tmp_and_right_value_2;
                goto and_end_2;
                and_left_2:;
                tmp_condition_result_6 = tmp_and_left_value_2;
                and_end_2:;
                if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_6;
                } else {
                    goto branch_no_6;
                }
                branch_yes_6:;
                {
                    PyObject *tmp_called_name_3;
                    PyObject *tmp_source_name_11;
                    PyObject *tmp_source_name_12;
                    PyObject *tmp_call_result_9;
                    PyObject *tmp_args_element_name_11;
                    PyObject *tmp_tuple_element_5;
                    CHECK_OBJECT(par_self);
                    tmp_source_name_12 = par_self;
                    tmp_source_name_11 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_auditEntries);
                    if (tmp_source_name_11 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 574;
                        type_description_1 = "ooooooooooooNooooooo";
                        goto try_except_handler_2;
                    }
                    tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_append);
                    Py_DECREF(tmp_source_name_11);
                    if (tmp_called_name_3 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 574;
                        type_description_1 = "ooooooooooooNooooooo";
                        goto try_except_handler_2;
                    }
                    if (var_eventLevel == NULL) {
                        Py_DECREF(tmp_called_name_3);
                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF(exception_type);
                        exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "eventLevel");
                        exception_tb = NULL;

                        exception_lineno = 574;
                        type_description_1 = "ooooooooooooNooooooo";
                        goto try_except_handler_2;
                    }

                    tmp_tuple_element_5 = var_eventLevel;
                    tmp_args_element_name_11 = PyTuple_New(4);
                    Py_INCREF(tmp_tuple_element_5);
                    PyTuple_SET_ITEM(tmp_args_element_name_11, 0, tmp_tuple_element_5);
                    CHECK_OBJECT(var_dateTime);
                    tmp_tuple_element_5 = var_dateTime;
                    Py_INCREF(tmp_tuple_element_5);
                    PyTuple_SET_ITEM(tmp_args_element_name_11, 1, tmp_tuple_element_5);
                    CHECK_OBJECT(var_eventID);
                    tmp_tuple_element_5 = var_eventID;
                    Py_INCREF(tmp_tuple_element_5);
                    PyTuple_SET_ITEM(tmp_args_element_name_11, 2, tmp_tuple_element_5);
                    CHECK_OBJECT(var_eventDes);
                    tmp_tuple_element_5 = var_eventDes;
                    Py_INCREF(tmp_tuple_element_5);
                    PyTuple_SET_ITEM(tmp_args_element_name_11, 3, tmp_tuple_element_5);
                    frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 574;
                    tmp_call_result_9 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_11);
                    Py_DECREF(tmp_called_name_3);
                    Py_DECREF(tmp_args_element_name_11);
                    if (tmp_call_result_9 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 574;
                        type_description_1 = "ooooooooooooNooooooo";
                        goto try_except_handler_2;
                    }
                    Py_DECREF(tmp_call_result_9);
                }
                branch_no_6:;
            }
            branch_no_3:;
        }
        branch_no_2:;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 557;
        type_description_1 = "ooooooooooooNooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_range_arg_2;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_source_name_13;
        CHECK_OBJECT(par_self);
        tmp_source_name_13 = par_self;
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain_auditEntries);
        if (tmp_len_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 575;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_range_arg_2 = BUILTIN_LEN(tmp_len_arg_1);
        Py_DECREF(tmp_len_arg_1);
        if (tmp_range_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 575;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_iter_arg_2 = BUILTIN_RANGE(tmp_range_arg_2);
        Py_DECREF(tmp_range_arg_2);
        if (tmp_iter_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 575;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_15 = MAKE_ITERATOR(tmp_iter_arg_2);
        Py_DECREF(tmp_iter_arg_2);
        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 575;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_2__for_iterator == NULL);
        tmp_for_loop_2__for_iterator = tmp_assign_source_15;
    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_16;
        CHECK_OBJECT(tmp_for_loop_2__for_iterator);
        tmp_next_source_2 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_16 = ITERATOR_NEXT(tmp_next_source_2);
        if (tmp_assign_source_16 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_2;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooooooooooNooooooo";
                exception_lineno = 575;
                goto try_except_handler_3;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_16;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_17;
        CHECK_OBJECT(tmp_for_loop_2__iter_value);
        tmp_assign_source_17 = tmp_for_loop_2__iter_value;
        {
            PyObject *old = var_i;
            var_i = tmp_assign_source_17;
            Py_INCREF(var_i);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_4;
        PyObject *tmp_source_name_14;
        PyObject *tmp_source_name_15;
        PyObject *tmp_call_result_10;
        PyObject *tmp_args_element_name_12;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_source_name_16;
        PyObject *tmp_subscript_name_3;
        CHECK_OBJECT(par_self);
        tmp_source_name_15 = par_self;
        tmp_source_name_14 = LOOKUP_ATTRIBUTE(tmp_source_name_15, const_str_plain_listStore);
        if (tmp_source_name_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;
            type_description_1 = "ooooooooooooNooooooo";
            goto try_except_handler_3;
        }
        tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_14, const_str_plain_append);
        Py_DECREF(tmp_source_name_14);
        if (tmp_called_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;
            type_description_1 = "ooooooooooooNooooooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_16 = par_self;
        tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_16, const_str_plain_auditEntries);
        if (tmp_subscribed_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_4);

            exception_lineno = 576;
            type_description_1 = "ooooooooooooNooooooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT(var_i);
        tmp_subscript_name_3 = var_i;
        tmp_args_element_name_12 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_3, tmp_subscript_name_3);
        Py_DECREF(tmp_subscribed_name_3);
        if (tmp_args_element_name_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_4);

            exception_lineno = 576;
            type_description_1 = "ooooooooooooNooooooo";
            goto try_except_handler_3;
        }
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 576;
        tmp_call_result_10 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_4, tmp_args_element_name_12);
        Py_DECREF(tmp_called_name_4);
        Py_DECREF(tmp_args_element_name_12);
        if (tmp_call_result_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 576;
            type_description_1 = "ooooooooooooNooooooo";
            goto try_except_handler_3;
        }
        Py_DECREF(tmp_call_result_10);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 575;
        type_description_1 = "ooooooooooooNooooooo";
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_2__iter_value);
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_2__for_iterator);
    Py_DECREF(tmp_for_loop_2__for_iterator);
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF(tmp_for_loop_2__iter_value);
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_2__for_iterator);
    Py_DECREF(tmp_for_loop_2__for_iterator);
    tmp_for_loop_2__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_called_name_5;
        PyObject *tmp_source_name_17;
        PyObject *tmp_mvar_value_7;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_source_name_18;
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_7 == NULL)) {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_7 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 578;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_17 = tmp_mvar_value_7;
        tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_17, const_str_plain_TreeView);
        if (tmp_called_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 578;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_18 = par_self;
        tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_source_name_18, const_str_plain_listStore);
        if (tmp_dict_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_5);

            exception_lineno = 578;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = const_str_plain_model;
        tmp_kw_name_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1);
        Py_DECREF(tmp_dict_value_1);
        assert(!(tmp_res != 0));
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 578;
        tmp_assign_source_18 = CALL_FUNCTION_WITH_KEYARGS(tmp_called_name_5, tmp_kw_name_1);
        Py_DECREF(tmp_called_name_5);
        Py_DECREF(tmp_kw_name_1);
        if (tmp_assign_source_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 578;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_treeView == NULL);
        var_treeView = tmp_assign_source_18;
    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_iter_arg_3;
        PyObject *tmp_range_arg_3;
        PyObject *tmp_len_arg_2;
        CHECK_OBJECT(var_columns);
        tmp_len_arg_2 = var_columns;
        tmp_range_arg_3 = BUILTIN_LEN(tmp_len_arg_2);
        assert(!(tmp_range_arg_3 == NULL));
        tmp_iter_arg_3 = BUILTIN_RANGE(tmp_range_arg_3);
        Py_DECREF(tmp_range_arg_3);
        if (tmp_iter_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 581;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_19 = MAKE_ITERATOR(tmp_iter_arg_3);
        Py_DECREF(tmp_iter_arg_3);
        if (tmp_assign_source_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 581;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_3__for_iterator == NULL);
        tmp_for_loop_3__for_iterator = tmp_assign_source_19;
    }
    // Tried code:
    loop_start_3:;
    {
        PyObject *tmp_next_source_3;
        PyObject *tmp_assign_source_20;
        CHECK_OBJECT(tmp_for_loop_3__for_iterator);
        tmp_next_source_3 = tmp_for_loop_3__for_iterator;
        tmp_assign_source_20 = ITERATOR_NEXT(tmp_next_source_3);
        if (tmp_assign_source_20 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_3;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooooooooooNooooooo";
                exception_lineno = 581;
                goto try_except_handler_4;
            }
        }

        {
            PyObject *old = tmp_for_loop_3__iter_value;
            tmp_for_loop_3__iter_value = tmp_assign_source_20;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_21;
        CHECK_OBJECT(tmp_for_loop_3__iter_value);
        tmp_assign_source_21 = tmp_for_loop_3__iter_value;
        {
            PyObject *old = var_i;
            var_i = tmp_assign_source_21;
            Py_INCREF(var_i);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_called_instance_15;
        PyObject *tmp_mvar_value_8;
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_8 == NULL)) {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_8 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 582;
            type_description_1 = "ooooooooooooNooooooo";
            goto try_except_handler_4;
        }

        tmp_called_instance_15 = tmp_mvar_value_8;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 582;
        tmp_assign_source_22 = CALL_METHOD_NO_ARGS(tmp_called_instance_15, const_str_plain_CellRendererText);
        if (tmp_assign_source_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 582;
            type_description_1 = "ooooooooooooNooooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = var_cell;
            var_cell = tmp_assign_source_22;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_called_name_6;
        PyObject *tmp_source_name_19;
        PyObject *tmp_mvar_value_9;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_6;
        PyObject *tmp_subscribed_name_4;
        PyObject *tmp_subscript_name_4;
        PyObject *tmp_kw_name_2;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        tmp_mvar_value_9 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_9 == NULL)) {
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_9 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 583;
            type_description_1 = "ooooooooooooNooooooo";
            goto try_except_handler_4;
        }

        tmp_source_name_19 = tmp_mvar_value_9;
        tmp_called_name_6 = LOOKUP_ATTRIBUTE(tmp_source_name_19, const_str_plain_TreeViewColumn);
        if (tmp_called_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 583;
            type_description_1 = "ooooooooooooNooooooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT(var_columns);
        tmp_subscribed_name_4 = var_columns;
        CHECK_OBJECT(var_i);
        tmp_subscript_name_4 = var_i;
        tmp_tuple_element_6 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_4, tmp_subscript_name_4);
        if (tmp_tuple_element_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_6);

            exception_lineno = 583;
            type_description_1 = "ooooooooooooNooooooo";
            goto try_except_handler_4;
        }
        tmp_args_name_1 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_args_name_1, 0, tmp_tuple_element_6);
        CHECK_OBJECT(var_cell);
        tmp_tuple_element_6 = var_cell;
        Py_INCREF(tmp_tuple_element_6);
        PyTuple_SET_ITEM(tmp_args_name_1, 1, tmp_tuple_element_6);
        CHECK_OBJECT(var_i);
        tmp_dict_value_2 = var_i;
        tmp_dict_key_2 = const_str_plain_text;
        tmp_kw_name_2 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2);
        assert(!(tmp_res != 0));
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 583;
        tmp_assign_source_23 = CALL_FUNCTION(tmp_called_name_6, tmp_args_name_1, tmp_kw_name_2);
        Py_DECREF(tmp_called_name_6);
        Py_DECREF(tmp_args_name_1);
        Py_DECREF(tmp_kw_name_2);
        if (tmp_assign_source_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 583;
            type_description_1 = "ooooooooooooNooooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = var_col;
            var_col = tmp_assign_source_23;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_compexpr_left_11;
        PyObject *tmp_compexpr_right_11;
        CHECK_OBJECT(var_i);
        tmp_compexpr_left_11 = var_i;
        tmp_compexpr_right_11 = const_int_pos_3;
        tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_INT(tmp_compexpr_left_11, tmp_compexpr_right_11);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 584;
            type_description_1 = "ooooooooooooNooooooo";
            goto try_except_handler_4;
        }
        tmp_condition_result_7 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
        branch_yes_7:;
        {
            PyObject *tmp_called_name_7;
            PyObject *tmp_source_name_20;
            PyObject *tmp_call_result_11;
            PyObject *tmp_args_element_name_13;
            PyObject *tmp_source_name_21;
            PyObject *tmp_mvar_value_10;
            CHECK_OBJECT(var_col);
            tmp_source_name_20 = var_col;
            tmp_called_name_7 = LOOKUP_ATTRIBUTE(tmp_source_name_20, const_str_plain_set_sort_column_id);
            if (tmp_called_name_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 585;
                type_description_1 = "ooooooooooooNooooooo";
                goto try_except_handler_4;
            }
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_10 == NULL)) {
                tmp_mvar_value_10 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_10 == NULL) {
                Py_DECREF(tmp_called_name_7);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 585;
                type_description_1 = "ooooooooooooNooooooo";
                goto try_except_handler_4;
            }

            tmp_source_name_21 = tmp_mvar_value_10;
            tmp_args_element_name_13 = LOOKUP_ATTRIBUTE(tmp_source_name_21, const_str_plain_SORT_DESCENDING);
            if (tmp_args_element_name_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_7);

                exception_lineno = 585;
                type_description_1 = "ooooooooooooNooooooo";
                goto try_except_handler_4;
            }
            frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 585;
            tmp_call_result_11 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_7, tmp_args_element_name_13);
            Py_DECREF(tmp_called_name_7);
            Py_DECREF(tmp_args_element_name_13);
            if (tmp_call_result_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 585;
                type_description_1 = "ooooooooooooNooooooo";
                goto try_except_handler_4;
            }
            Py_DECREF(tmp_call_result_11);
        }
        {
            PyObject *tmp_called_instance_16;
            PyObject *tmp_call_result_12;
            CHECK_OBJECT(var_col);
            tmp_called_instance_16 = var_col;
            frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 586;
            tmp_call_result_12 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_16, const_str_plain_set_sort_indicator, &PyTuple_GET_ITEM(const_tuple_true_tuple, 0));

            if (tmp_call_result_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 586;
                type_description_1 = "ooooooooooooNooooooo";
                goto try_except_handler_4;
            }
            Py_DECREF(tmp_call_result_12);
        }
        branch_no_7:;
    }
    {
        PyObject *tmp_called_instance_17;
        PyObject *tmp_call_result_13;
        PyObject *tmp_args_element_name_14;
        CHECK_OBJECT(var_treeView);
        tmp_called_instance_17 = var_treeView;
        CHECK_OBJECT(var_col);
        tmp_args_element_name_14 = var_col;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 587;
        {
            PyObject *call_args[] = {tmp_args_element_name_14};
            tmp_call_result_13 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_17, const_str_plain_append_column, call_args);
        }

        if (tmp_call_result_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 587;
            type_description_1 = "ooooooooooooNooooooo";
            goto try_except_handler_4;
        }
        Py_DECREF(tmp_call_result_13);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 581;
        type_description_1 = "ooooooooooooNooooooo";
        goto try_except_handler_4;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_3__iter_value);
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_3__for_iterator);
    Py_DECREF(tmp_for_loop_3__for_iterator);
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF(tmp_for_loop_3__iter_value);
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_3__for_iterator);
    Py_DECREF(tmp_for_loop_3__for_iterator);
    tmp_for_loop_3__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_called_instance_18;
        PyObject *tmp_mvar_value_11;
        tmp_mvar_value_11 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_11 == NULL)) {
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_11 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 589;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_18 = tmp_mvar_value_11;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 589;
        tmp_assign_source_24 = CALL_METHOD_NO_ARGS(tmp_called_instance_18, const_str_plain_ScrolledWindow);
        if (tmp_assign_source_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 589;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_scrolledWin == NULL);
        var_scrolledWin = tmp_assign_source_24;
    }
    {
        PyObject *tmp_called_name_8;
        PyObject *tmp_source_name_22;
        PyObject *tmp_call_result_14;
        PyObject *tmp_args_element_name_15;
        PyObject *tmp_source_name_23;
        PyObject *tmp_mvar_value_12;
        PyObject *tmp_args_element_name_16;
        PyObject *tmp_source_name_24;
        PyObject *tmp_mvar_value_13;
        CHECK_OBJECT(var_scrolledWin);
        tmp_source_name_22 = var_scrolledWin;
        tmp_called_name_8 = LOOKUP_ATTRIBUTE(tmp_source_name_22, const_str_plain_set_policy);
        if (tmp_called_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 590;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_12 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_12 == NULL)) {
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_12 == NULL) {
            Py_DECREF(tmp_called_name_8);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 590;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_23 = tmp_mvar_value_12;
        tmp_args_element_name_15 = LOOKUP_ATTRIBUTE(tmp_source_name_23, const_str_plain_POLICY_NEVER);
        if (tmp_args_element_name_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_8);

            exception_lineno = 590;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_13 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_13 == NULL)) {
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_13 == NULL) {
            Py_DECREF(tmp_called_name_8);
            Py_DECREF(tmp_args_element_name_15);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 590;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_24 = tmp_mvar_value_13;
        tmp_args_element_name_16 = LOOKUP_ATTRIBUTE(tmp_source_name_24, const_str_plain_POLICY_AUTOMATIC);
        if (tmp_args_element_name_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_8);
            Py_DECREF(tmp_args_element_name_15);

            exception_lineno = 590;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 590;
        {
            PyObject *call_args[] = {tmp_args_element_name_15, tmp_args_element_name_16};
            tmp_call_result_14 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_8, call_args);
        }

        Py_DECREF(tmp_called_name_8);
        Py_DECREF(tmp_args_element_name_15);
        Py_DECREF(tmp_args_element_name_16);
        if (tmp_call_result_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 590;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_14);
    }
    {
        PyObject *tmp_called_instance_19;
        PyObject *tmp_call_result_15;
        PyObject *tmp_args_element_name_17;
        CHECK_OBJECT(var_scrolledWin);
        tmp_called_instance_19 = var_scrolledWin;
        CHECK_OBJECT(var_treeView);
        tmp_args_element_name_17 = var_treeView;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 591;
        {
            PyObject *call_args[] = {tmp_args_element_name_17};
            tmp_call_result_15 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_19, const_str_plain_add_with_viewport, call_args);
        }

        if (tmp_call_result_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 591;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_15);
    }
    {
        PyObject *tmp_called_instance_20;
        PyObject *tmp_call_result_16;
        PyObject *tmp_args_element_name_18;
        CHECK_OBJECT(var_vbox);
        tmp_called_instance_20 = var_vbox;
        CHECK_OBJECT(var_scrolledWin);
        tmp_args_element_name_18 = var_scrolledWin;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 593;
        {
            PyObject *call_args[] = {tmp_args_element_name_18};
            tmp_call_result_16 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_20, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 593;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_16);
    }
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_called_instance_21;
        PyObject *tmp_mvar_value_14;
        tmp_mvar_value_14 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_14 == NULL)) {
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_14 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 595;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_21 = tmp_mvar_value_14;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 595;
        tmp_assign_source_25 = CALL_METHOD_WITH_ARGS4(tmp_called_instance_21, const_str_plain_Alignment, &PyTuple_GET_ITEM(const_tuple_int_pos_1_int_0_int_0_int_0_tuple, 0));

        if (tmp_assign_source_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 595;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_halign == NULL);
        var_halign = tmp_assign_source_25;
    }
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_called_instance_22;
        PyObject *tmp_mvar_value_15;
        tmp_mvar_value_15 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_15 == NULL)) {
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_15 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 596;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_22 = tmp_mvar_value_15;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 596;
        tmp_assign_source_26 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_22, const_str_plain_HBox, &PyTuple_GET_ITEM(const_tuple_false_int_0_tuple, 0));

        if (tmp_assign_source_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 596;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_filter_box == NULL);
        var_filter_box = tmp_assign_source_26;
    }
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_compexpr_left_12;
        PyObject *tmp_compexpr_right_12;
        PyObject *tmp_source_name_25;
        CHECK_OBJECT(par_parent);
        tmp_source_name_25 = par_parent;
        tmp_compexpr_left_12 = LOOKUP_ATTRIBUTE(tmp_source_name_25, const_str_plain_VERSION);
        if (tmp_compexpr_left_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 598;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_12 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_INT(tmp_compexpr_left_12, tmp_compexpr_right_12);
        Py_DECREF(tmp_compexpr_left_12);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 598;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_8 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
            goto branch_yes_8;
        } else {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            PyObject *tmp_assattr_name_5;
            PyObject *tmp_called_instance_23;
            PyObject *tmp_mvar_value_16;
            PyObject *tmp_assattr_target_5;
            tmp_mvar_value_16 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_16 == NULL)) {
                tmp_mvar_value_16 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_16 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 599;
                type_description_1 = "ooooooooooooNooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_23 = tmp_mvar_value_16;
            frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 599;
            tmp_assattr_name_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_23, const_str_plain_Button, &PyTuple_GET_ITEM(const_tuple_str_digest_acf905062190ec8d249c9050c6366424_tuple, 0));

            if (tmp_assattr_name_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 599;
                type_description_1 = "ooooooooooooNooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_assattr_target_5 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_5, const_str_plain_saveLog_button, tmp_assattr_name_5);
            Py_DECREF(tmp_assattr_name_5);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 599;
                type_description_1 = "ooooooooooooNooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_called_name_9;
            PyObject *tmp_source_name_26;
            PyObject *tmp_source_name_27;
            PyObject *tmp_call_result_17;
            PyObject *tmp_args_element_name_19;
            PyObject *tmp_args_element_name_20;
            PyObject *tmp_source_name_28;
            PyObject *tmp_args_element_name_21;
            CHECK_OBJECT(par_self);
            tmp_source_name_27 = par_self;
            tmp_source_name_26 = LOOKUP_ATTRIBUTE(tmp_source_name_27, const_str_plain_saveLog_button);
            if (tmp_source_name_26 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 600;
                type_description_1 = "ooooooooooooNooooooo";
                goto frame_exception_exit_1;
            }
            tmp_called_name_9 = LOOKUP_ATTRIBUTE(tmp_source_name_26, const_str_plain_connect);
            Py_DECREF(tmp_source_name_26);
            if (tmp_called_name_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 600;
                type_description_1 = "ooooooooooooNooooooo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_19 = const_str_plain_clicked;
            CHECK_OBJECT(par_self);
            tmp_source_name_28 = par_self;
            tmp_args_element_name_20 = LOOKUP_ATTRIBUTE(tmp_source_name_28, const_str_plain_saveToCSV);
            if (tmp_args_element_name_20 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_9);

                exception_lineno = 600;
                type_description_1 = "ooooooooooooNooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_parent);
            tmp_args_element_name_21 = par_parent;
            frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 600;
            {
                PyObject *call_args[] = {tmp_args_element_name_19, tmp_args_element_name_20, tmp_args_element_name_21};
                tmp_call_result_17 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_9, call_args);
            }

            Py_DECREF(tmp_called_name_9);
            Py_DECREF(tmp_args_element_name_20);
            if (tmp_call_result_17 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 600;
                type_description_1 = "ooooooooooooNooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_17);
        }
        {
            PyObject *tmp_called_name_10;
            PyObject *tmp_source_name_29;
            PyObject *tmp_call_result_18;
            PyObject *tmp_args_element_name_22;
            PyObject *tmp_source_name_30;
            PyObject *tmp_args_element_name_23;
            PyObject *tmp_args_element_name_24;
            PyObject *tmp_args_element_name_25;
            CHECK_OBJECT(var_filter_box);
            tmp_source_name_29 = var_filter_box;
            tmp_called_name_10 = LOOKUP_ATTRIBUTE(tmp_source_name_29, const_str_plain_pack_start);
            if (tmp_called_name_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 601;
                type_description_1 = "ooooooooooooNooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_source_name_30 = par_self;
            tmp_args_element_name_22 = LOOKUP_ATTRIBUTE(tmp_source_name_30, const_str_plain_saveLog_button);
            if (tmp_args_element_name_22 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_10);

                exception_lineno = 601;
                type_description_1 = "ooooooooooooNooooooo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_23 = Py_False;
            tmp_args_element_name_24 = Py_False;
            tmp_args_element_name_25 = const_int_pos_5;
            frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 601;
            {
                PyObject *call_args[] = {tmp_args_element_name_22, tmp_args_element_name_23, tmp_args_element_name_24, tmp_args_element_name_25};
                tmp_call_result_18 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_10, call_args);
            }

            Py_DECREF(tmp_called_name_10);
            Py_DECREF(tmp_args_element_name_22);
            if (tmp_call_result_18 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 601;
                type_description_1 = "ooooooooooooNooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_18);
        }
        branch_no_8:;
    }
    {
        PyObject *tmp_assattr_name_6;
        PyObject *tmp_called_instance_24;
        PyObject *tmp_mvar_value_17;
        PyObject *tmp_assattr_target_6;
        tmp_mvar_value_17 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_17 == NULL)) {
            tmp_mvar_value_17 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_17 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 603;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_24 = tmp_mvar_value_17;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 603;
        tmp_assattr_name_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_24, const_str_plain_Button, &PyTuple_GET_ITEM(const_tuple_str_digest_d03bb4fbc98b8e70bbbef51204f2d5e1_tuple, 0));

        if (tmp_assattr_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 603;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_6, const_str_plain_viewAll_button, tmp_assattr_name_6);
        Py_DECREF(tmp_assattr_name_6);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 603;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_name_11;
        PyObject *tmp_source_name_31;
        PyObject *tmp_source_name_32;
        PyObject *tmp_call_result_19;
        PyObject *tmp_args_element_name_26;
        PyObject *tmp_args_element_name_27;
        PyObject *tmp_source_name_33;
        PyObject *tmp_args_element_name_28;
        PyObject *tmp_source_name_34;
        PyObject *tmp_args_element_name_29;
        CHECK_OBJECT(par_self);
        tmp_source_name_32 = par_self;
        tmp_source_name_31 = LOOKUP_ATTRIBUTE(tmp_source_name_32, const_str_plain_viewAll_button);
        if (tmp_source_name_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 604;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_11 = LOOKUP_ATTRIBUTE(tmp_source_name_31, const_str_plain_connect);
        Py_DECREF(tmp_source_name_31);
        if (tmp_called_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 604;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_26 = const_str_plain_clicked;
        CHECK_OBJECT(par_self);
        tmp_source_name_33 = par_self;
        tmp_args_element_name_27 = LOOKUP_ATTRIBUTE(tmp_source_name_33, const_str_plain_filterLog);
        if (tmp_args_element_name_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_11);

            exception_lineno = 604;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_34 = par_self;
        tmp_args_element_name_28 = LOOKUP_ATTRIBUTE(tmp_source_name_34, const_str_plain_auditEntries);
        if (tmp_args_element_name_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_11);
            Py_DECREF(tmp_args_element_name_27);

            exception_lineno = 604;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_29 = const_int_0;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 604;
        {
            PyObject *call_args[] = {tmp_args_element_name_26, tmp_args_element_name_27, tmp_args_element_name_28, tmp_args_element_name_29};
            tmp_call_result_19 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_11, call_args);
        }

        Py_DECREF(tmp_called_name_11);
        Py_DECREF(tmp_args_element_name_27);
        Py_DECREF(tmp_args_element_name_28);
        if (tmp_call_result_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 604;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_19);
    }
    {
        PyObject *tmp_called_instance_25;
        PyObject *tmp_source_name_35;
        PyObject *tmp_call_result_20;
        CHECK_OBJECT(par_self);
        tmp_source_name_35 = par_self;
        tmp_called_instance_25 = LOOKUP_ATTRIBUTE(tmp_source_name_35, const_str_plain_viewAll_button);
        if (tmp_called_instance_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 605;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 605;
        tmp_call_result_20 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_25, const_str_plain_set_sensitive, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

        Py_DECREF(tmp_called_instance_25);
        if (tmp_call_result_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 605;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_20);
    }
    {
        PyObject *tmp_called_name_12;
        PyObject *tmp_source_name_36;
        PyObject *tmp_call_result_21;
        PyObject *tmp_args_element_name_30;
        PyObject *tmp_source_name_37;
        PyObject *tmp_args_element_name_31;
        PyObject *tmp_args_element_name_32;
        PyObject *tmp_args_element_name_33;
        CHECK_OBJECT(var_filter_box);
        tmp_source_name_36 = var_filter_box;
        tmp_called_name_12 = LOOKUP_ATTRIBUTE(tmp_source_name_36, const_str_plain_pack_start);
        if (tmp_called_name_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 606;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_37 = par_self;
        tmp_args_element_name_30 = LOOKUP_ATTRIBUTE(tmp_source_name_37, const_str_plain_viewAll_button);
        if (tmp_args_element_name_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_12);

            exception_lineno = 606;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_31 = Py_False;
        tmp_args_element_name_32 = Py_False;
        tmp_args_element_name_33 = const_int_pos_5;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 606;
        {
            PyObject *call_args[] = {tmp_args_element_name_30, tmp_args_element_name_31, tmp_args_element_name_32, tmp_args_element_name_33};
            tmp_call_result_21 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_12, call_args);
        }

        Py_DECREF(tmp_called_name_12);
        Py_DECREF(tmp_args_element_name_30);
        if (tmp_call_result_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 606;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_21);
    }
    {
        PyObject *tmp_assattr_name_7;
        PyObject *tmp_called_instance_26;
        PyObject *tmp_mvar_value_18;
        PyObject *tmp_assattr_target_7;
        tmp_mvar_value_18 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_18 == NULL)) {
            tmp_mvar_value_18 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_18 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 608;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_26 = tmp_mvar_value_18;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 608;
        tmp_assattr_name_7 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_26, const_str_plain_Button, &PyTuple_GET_ITEM(const_tuple_str_digest_eb909a9428feb017f456385f5b51d9cb_tuple, 0));

        if (tmp_assattr_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 608;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_7 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_7, const_str_plain_viewWarnErr_button, tmp_assattr_name_7);
        Py_DECREF(tmp_assattr_name_7);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 608;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_name_13;
        PyObject *tmp_source_name_38;
        PyObject *tmp_source_name_39;
        PyObject *tmp_call_result_22;
        PyObject *tmp_args_element_name_34;
        PyObject *tmp_args_element_name_35;
        PyObject *tmp_source_name_40;
        PyObject *tmp_args_element_name_36;
        PyObject *tmp_source_name_41;
        PyObject *tmp_args_element_name_37;
        CHECK_OBJECT(par_self);
        tmp_source_name_39 = par_self;
        tmp_source_name_38 = LOOKUP_ATTRIBUTE(tmp_source_name_39, const_str_plain_viewWarnErr_button);
        if (tmp_source_name_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 609;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_13 = LOOKUP_ATTRIBUTE(tmp_source_name_38, const_str_plain_connect);
        Py_DECREF(tmp_source_name_38);
        if (tmp_called_name_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 609;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_34 = const_str_plain_clicked;
        CHECK_OBJECT(par_self);
        tmp_source_name_40 = par_self;
        tmp_args_element_name_35 = LOOKUP_ATTRIBUTE(tmp_source_name_40, const_str_plain_filterLog);
        if (tmp_args_element_name_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_13);

            exception_lineno = 609;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_41 = par_self;
        tmp_args_element_name_36 = LOOKUP_ATTRIBUTE(tmp_source_name_41, const_str_plain_warnerrEntries);
        if (tmp_args_element_name_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_13);
            Py_DECREF(tmp_args_element_name_35);

            exception_lineno = 609;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_37 = const_int_pos_1;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 609;
        {
            PyObject *call_args[] = {tmp_args_element_name_34, tmp_args_element_name_35, tmp_args_element_name_36, tmp_args_element_name_37};
            tmp_call_result_22 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_13, call_args);
        }

        Py_DECREF(tmp_called_name_13);
        Py_DECREF(tmp_args_element_name_35);
        Py_DECREF(tmp_args_element_name_36);
        if (tmp_call_result_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 609;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_22);
    }
    {
        PyObject *tmp_called_name_14;
        PyObject *tmp_source_name_42;
        PyObject *tmp_call_result_23;
        PyObject *tmp_args_element_name_38;
        PyObject *tmp_source_name_43;
        PyObject *tmp_args_element_name_39;
        PyObject *tmp_args_element_name_40;
        PyObject *tmp_args_element_name_41;
        CHECK_OBJECT(var_filter_box);
        tmp_source_name_42 = var_filter_box;
        tmp_called_name_14 = LOOKUP_ATTRIBUTE(tmp_source_name_42, const_str_plain_pack_start);
        if (tmp_called_name_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 610;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_43 = par_self;
        tmp_args_element_name_38 = LOOKUP_ATTRIBUTE(tmp_source_name_43, const_str_plain_viewWarnErr_button);
        if (tmp_args_element_name_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_14);

            exception_lineno = 610;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_39 = Py_False;
        tmp_args_element_name_40 = Py_False;
        tmp_args_element_name_41 = const_int_pos_5;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 610;
        {
            PyObject *call_args[] = {tmp_args_element_name_38, tmp_args_element_name_39, tmp_args_element_name_40, tmp_args_element_name_41};
            tmp_call_result_23 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_14, call_args);
        }

        Py_DECREF(tmp_called_name_14);
        Py_DECREF(tmp_args_element_name_38);
        if (tmp_call_result_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 610;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_23);
    }
    {
        PyObject *tmp_assattr_name_8;
        PyObject *tmp_called_instance_27;
        PyObject *tmp_mvar_value_19;
        PyObject *tmp_assattr_target_8;
        tmp_mvar_value_19 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_19 == NULL)) {
            tmp_mvar_value_19 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_19 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 612;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_27 = tmp_mvar_value_19;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 612;
        tmp_assattr_name_8 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_27, const_str_plain_Button, &PyTuple_GET_ITEM(const_tuple_str_digest_3232fccef15145259198161d04f43c6a_tuple, 0));

        if (tmp_assattr_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 612;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_8 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_8, const_str_plain_viewErr_button, tmp_assattr_name_8);
        Py_DECREF(tmp_assattr_name_8);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 612;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_name_15;
        PyObject *tmp_source_name_44;
        PyObject *tmp_source_name_45;
        PyObject *tmp_call_result_24;
        PyObject *tmp_args_element_name_42;
        PyObject *tmp_args_element_name_43;
        PyObject *tmp_source_name_46;
        PyObject *tmp_args_element_name_44;
        PyObject *tmp_source_name_47;
        PyObject *tmp_args_element_name_45;
        CHECK_OBJECT(par_self);
        tmp_source_name_45 = par_self;
        tmp_source_name_44 = LOOKUP_ATTRIBUTE(tmp_source_name_45, const_str_plain_viewErr_button);
        if (tmp_source_name_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 613;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_15 = LOOKUP_ATTRIBUTE(tmp_source_name_44, const_str_plain_connect);
        Py_DECREF(tmp_source_name_44);
        if (tmp_called_name_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 613;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_42 = const_str_plain_clicked;
        CHECK_OBJECT(par_self);
        tmp_source_name_46 = par_self;
        tmp_args_element_name_43 = LOOKUP_ATTRIBUTE(tmp_source_name_46, const_str_plain_filterLog);
        if (tmp_args_element_name_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_15);

            exception_lineno = 613;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_47 = par_self;
        tmp_args_element_name_44 = LOOKUP_ATTRIBUTE(tmp_source_name_47, const_str_plain_errorEntries);
        if (tmp_args_element_name_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_15);
            Py_DECREF(tmp_args_element_name_43);

            exception_lineno = 613;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_45 = const_int_pos_2;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 613;
        {
            PyObject *call_args[] = {tmp_args_element_name_42, tmp_args_element_name_43, tmp_args_element_name_44, tmp_args_element_name_45};
            tmp_call_result_24 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_15, call_args);
        }

        Py_DECREF(tmp_called_name_15);
        Py_DECREF(tmp_args_element_name_43);
        Py_DECREF(tmp_args_element_name_44);
        if (tmp_call_result_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 613;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_24);
    }
    {
        PyObject *tmp_called_name_16;
        PyObject *tmp_source_name_48;
        PyObject *tmp_call_result_25;
        PyObject *tmp_args_element_name_46;
        PyObject *tmp_source_name_49;
        PyObject *tmp_args_element_name_47;
        PyObject *tmp_args_element_name_48;
        PyObject *tmp_args_element_name_49;
        CHECK_OBJECT(var_filter_box);
        tmp_source_name_48 = var_filter_box;
        tmp_called_name_16 = LOOKUP_ATTRIBUTE(tmp_source_name_48, const_str_plain_pack_start);
        if (tmp_called_name_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_49 = par_self;
        tmp_args_element_name_46 = LOOKUP_ATTRIBUTE(tmp_source_name_49, const_str_plain_viewErr_button);
        if (tmp_args_element_name_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_16);

            exception_lineno = 614;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_47 = Py_False;
        tmp_args_element_name_48 = Py_False;
        tmp_args_element_name_49 = const_int_pos_5;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 614;
        {
            PyObject *call_args[] = {tmp_args_element_name_46, tmp_args_element_name_47, tmp_args_element_name_48, tmp_args_element_name_49};
            tmp_call_result_25 = CALL_FUNCTION_WITH_ARGS4(tmp_called_name_16, call_args);
        }

        Py_DECREF(tmp_called_name_16);
        Py_DECREF(tmp_args_element_name_46);
        if (tmp_call_result_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_25);
    }
    {
        PyObject *tmp_called_instance_28;
        PyObject *tmp_call_result_26;
        PyObject *tmp_args_element_name_50;
        CHECK_OBJECT(var_halign);
        tmp_called_instance_28 = var_halign;
        CHECK_OBJECT(var_filter_box);
        tmp_args_element_name_50 = var_filter_box;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 616;
        {
            PyObject *call_args[] = {tmp_args_element_name_50};
            tmp_call_result_26 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_28, const_str_plain_add, call_args);
        }

        if (tmp_call_result_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 616;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_26);
    }
    {
        PyObject *tmp_called_instance_29;
        PyObject *tmp_call_result_27;
        PyObject *tmp_args_element_name_51;
        PyObject *tmp_args_element_name_52;
        PyObject *tmp_args_element_name_53;
        PyObject *tmp_args_element_name_54;
        CHECK_OBJECT(var_vbox);
        tmp_called_instance_29 = var_vbox;
        CHECK_OBJECT(var_halign);
        tmp_args_element_name_51 = var_halign;
        tmp_args_element_name_52 = Py_False;
        tmp_args_element_name_53 = Py_False;
        tmp_args_element_name_54 = const_int_0;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 617;
        {
            PyObject *call_args[] = {tmp_args_element_name_51, tmp_args_element_name_52, tmp_args_element_name_53, tmp_args_element_name_54};
            tmp_call_result_27 = CALL_METHOD_WITH_ARGS4(tmp_called_instance_29, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 617;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_27);
    }
    {
        PyObject *tmp_called_instance_30;
        PyObject *tmp_call_result_28;
        CHECK_OBJECT(par_self);
        tmp_called_instance_30 = par_self;
        frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame.f_lineno = 619;
        tmp_call_result_28 = CALL_METHOD_NO_ARGS(tmp_called_instance_30, const_str_plain_show_all);
        if (tmp_call_result_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 619;
            type_description_1 = "ooooooooooooNooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_28);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f472c0e13a0220a9ef62e77ea0093a01);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f472c0e13a0220a9ef62e77ea0093a01);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f472c0e13a0220a9ef62e77ea0093a01, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_f472c0e13a0220a9ef62e77ea0093a01->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f472c0e13a0220a9ef62e77ea0093a01, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f472c0e13a0220a9ef62e77ea0093a01,
        type_description_1,
        par_self,
        par_parent,
        par_a,
        var_eventID,
        var_filter_box,
        var_eventLevel,
        var_halign,
        var_i,
        var_cell,
        var_m,
        var_logList,
        var_dateTime,
        NULL,
        var_vbox,
        var_col,
        var_eventDes,
        var_scrolledWin,
        var_treeView,
        var_numEntries,
        var_columns
    );


    // Release cached frame.
    if (frame_f472c0e13a0220a9ef62e77ea0093a01 == cache_frame_f472c0e13a0220a9ef62e77ea0093a01) {
        Py_DECREF(frame_f472c0e13a0220a9ef62e77ea0093a01);
    }
    cache_frame_f472c0e13a0220a9ef62e77ea0093a01 = NULL;

    assertFrameObject(frame_f472c0e13a0220a9ef62e77ea0093a01);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_13___init__);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_eventID);
    var_eventID = NULL;

    CHECK_OBJECT((PyObject *)var_filter_box);
    Py_DECREF(var_filter_box);
    var_filter_box = NULL;

    Py_XDECREF(var_eventLevel);
    var_eventLevel = NULL;

    CHECK_OBJECT((PyObject *)var_halign);
    Py_DECREF(var_halign);
    var_halign = NULL;

    Py_XDECREF(var_i);
    var_i = NULL;

    Py_XDECREF(var_cell);
    var_cell = NULL;

    Py_XDECREF(var_m);
    var_m = NULL;

    CHECK_OBJECT((PyObject *)var_logList);
    Py_DECREF(var_logList);
    var_logList = NULL;

    Py_XDECREF(var_dateTime);
    var_dateTime = NULL;

    CHECK_OBJECT((PyObject *)var_vbox);
    Py_DECREF(var_vbox);
    var_vbox = NULL;

    Py_XDECREF(var_col);
    var_col = NULL;

    Py_XDECREF(var_eventDes);
    var_eventDes = NULL;

    CHECK_OBJECT((PyObject *)var_scrolledWin);
    Py_DECREF(var_scrolledWin);
    var_scrolledWin = NULL;

    CHECK_OBJECT((PyObject *)var_treeView);
    Py_DECREF(var_treeView);
    var_treeView = NULL;

    CHECK_OBJECT((PyObject *)var_numEntries);
    Py_DECREF(var_numEntries);
    var_numEntries = NULL;

    CHECK_OBJECT((PyObject *)var_columns);
    Py_DECREF(var_columns);
    var_columns = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_eventID);
    var_eventID = NULL;

    Py_XDECREF(var_filter_box);
    var_filter_box = NULL;

    Py_XDECREF(var_eventLevel);
    var_eventLevel = NULL;

    Py_XDECREF(var_halign);
    var_halign = NULL;

    Py_XDECREF(var_i);
    var_i = NULL;

    Py_XDECREF(var_cell);
    var_cell = NULL;

    Py_XDECREF(var_m);
    var_m = NULL;

    Py_XDECREF(var_logList);
    var_logList = NULL;

    Py_XDECREF(var_dateTime);
    var_dateTime = NULL;

    Py_XDECREF(var_vbox);
    var_vbox = NULL;

    Py_XDECREF(var_col);
    var_col = NULL;

    Py_XDECREF(var_eventDes);
    var_eventDes = NULL;

    Py_XDECREF(var_scrolledWin);
    var_scrolledWin = NULL;

    Py_XDECREF(var_treeView);
    var_treeView = NULL;

    Py_XDECREF(var_numEntries);
    var_numEntries = NULL;

    CHECK_OBJECT((PyObject *)var_columns);
    Py_DECREF(var_columns);
    var_columns = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_13___init__);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_a);
    Py_DECREF(par_a);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_a);
    Py_DECREF(par_a);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_14_saveToCSV(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_button = python_pars[1];
    PyObject *par_parent = python_pars[2];
    PyObject *var_writer = NULL;
    PyObject *var_f = NULL;
    PyObject *var_res = NULL;
    PyObject *var_timeStr = NULL;
    PyObject *var_chooser = NULL;
    PyObject *var_response = NULL;
    PyObject *var_filter = NULL;
    PyObject *var_row_data = NULL;
    PyObject *var_message = NULL;
    PyObject *var_filename = NULL;
    PyObject *var_data = NULL;
    PyObject *var_row = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_5e261a6409d1a8794a804c974235a230;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    static struct Nuitka_FrameObject *cache_frame_5e261a6409d1a8794a804c974235a230 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_5e261a6409d1a8794a804c974235a230, codeobj_5e261a6409d1a8794a804c974235a230, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_5e261a6409d1a8794a804c974235a230 = cache_frame_5e261a6409d1a8794a804c974235a230;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_5e261a6409d1a8794a804c974235a230);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_5e261a6409d1a8794a804c974235a230) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_verify);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_verify);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 236 ], 35, 0);
            exception_tb = NULL;

            exception_lineno = 623;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_parent);
        tmp_args_element_name_1 = par_parent;
        frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 623;
        {
            PyObject *call_args[] = {tmp_args_element_name_1};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_licCheck, call_args);
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 623;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_source_name_5;
        PyObject *tmp_mvar_value_6;
        PyObject *tmp_source_name_6;
        PyObject *tmp_mvar_value_7;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_2 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 624;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_2;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_FileChooserDialog);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 624;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_1 = Py_None;
        tmp_dict_key_1 = const_str_plain_title;
        tmp_kw_name_1 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_3 == NULL) {
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_kw_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 624;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_3;
        tmp_dict_value_2 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_FILE_CHOOSER_ACTION_SAVE);
        if (tmp_dict_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_kw_name_1);

            exception_lineno = 624;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = const_str_plain_action;
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2);
        Py_DECREF(tmp_dict_value_2);
        assert(!(tmp_res != 0));
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_4 == NULL)) {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_4 == NULL) {
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_kw_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 624;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_4;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_STOCK_CANCEL);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_kw_name_1);

            exception_lineno = 624;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_3 = PyTuple_New(4);
        PyTuple_SET_ITEM(tmp_dict_value_3, 0, tmp_tuple_element_1);
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_5 == NULL)) {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_5 == NULL) {
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_kw_name_1);
            Py_DECREF(tmp_dict_value_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 624;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_5;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_RESPONSE_CANCEL);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_kw_name_1);
            Py_DECREF(tmp_dict_value_3);

            exception_lineno = 624;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_dict_value_3, 1, tmp_tuple_element_1);
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_6 == NULL)) {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_6 == NULL) {
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_kw_name_1);
            Py_DECREF(tmp_dict_value_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 624;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_5 = tmp_mvar_value_6;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_STOCK_SAVE);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_kw_name_1);
            Py_DECREF(tmp_dict_value_3);

            exception_lineno = 624;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_dict_value_3, 2, tmp_tuple_element_1);
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_7 == NULL)) {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_7 == NULL) {
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_kw_name_1);
            Py_DECREF(tmp_dict_value_3);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 624;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_6 = tmp_mvar_value_7;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_RESPONSE_OK);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_kw_name_1);
            Py_DECREF(tmp_dict_value_3);

            exception_lineno = 624;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_dict_value_3, 3, tmp_tuple_element_1);
        tmp_dict_key_3 = const_str_plain_buttons;
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3);
        Py_DECREF(tmp_dict_value_3);
        assert(!(tmp_res != 0));
        frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 624;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_KEYARGS(tmp_called_name_1, tmp_kw_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_kw_name_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 624;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_chooser == NULL);
        var_chooser = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(var_chooser);
        tmp_called_instance_2 = var_chooser;
        frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 625;
        tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_set_do_overwrite_confirmation, &PyTuple_GET_ITEM(const_tuple_true_tuple, 0));

        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 625;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_mvar_value_8;
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_8 == NULL)) {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_8 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 627;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_3 = tmp_mvar_value_8;
        frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 627;
        tmp_assign_source_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_3, const_str_plain_FileFilter);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 627;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_filter == NULL);
        var_filter = tmp_assign_source_2;
    }
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT(var_filter);
        tmp_called_instance_4 = var_filter;
        frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 628;
        tmp_call_result_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_set_name, &PyTuple_GET_ITEM(const_tuple_str_digest_25b83aec39158cba36b77089e32c15a8_tuple, 0));

        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 628;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        PyObject *tmp_called_instance_5;
        PyObject *tmp_call_result_4;
        CHECK_OBJECT(var_filter);
        tmp_called_instance_5 = var_filter;
        frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 629;
        tmp_call_result_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_5, const_str_plain_add_mime_type, &PyTuple_GET_ITEM(const_tuple_str_digest_5d381edee88c82fa41885016fd67e3dc_tuple, 0));

        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 629;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    {
        PyObject *tmp_called_instance_6;
        PyObject *tmp_call_result_5;
        CHECK_OBJECT(var_filter);
        tmp_called_instance_6 = var_filter;
        frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 630;
        tmp_call_result_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_6, const_str_plain_add_pattern, &PyTuple_GET_ITEM(const_tuple_str_digest_c46c9f5ab7172869d3bf1fabbb55dd9f_tuple, 0));

        if (tmp_call_result_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 630;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_5);
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_7;
        PyObject *tmp_mvar_value_9;
        tmp_mvar_value_9 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_9 == NULL)) {
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_9 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 632;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_7 = tmp_mvar_value_9;
        frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 632;
        tmp_assign_source_3 = CALL_METHOD_NO_ARGS(tmp_called_instance_7, const_str_plain_FileFilter);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 632;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_filter;
            assert(old != NULL);
            var_filter = tmp_assign_source_3;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_8;
        PyObject *tmp_call_result_6;
        CHECK_OBJECT(var_filter);
        tmp_called_instance_8 = var_filter;
        frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 633;
        tmp_call_result_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_8, const_str_plain_set_name, &PyTuple_GET_ITEM(const_tuple_str_digest_3083929b5fa45e6504468bcca4e3142a_tuple, 0));

        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 633;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_6);
    }
    {
        PyObject *tmp_called_instance_9;
        PyObject *tmp_call_result_7;
        CHECK_OBJECT(var_filter);
        tmp_called_instance_9 = var_filter;
        frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 634;
        tmp_call_result_7 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_9, const_str_plain_add_pattern, &PyTuple_GET_ITEM(const_tuple_str_chr_42_tuple, 0));

        if (tmp_call_result_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 634;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_7);
    }
    {
        PyObject *tmp_called_instance_10;
        PyObject *tmp_call_result_8;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT(var_chooser);
        tmp_called_instance_10 = var_chooser;
        CHECK_OBJECT(var_filter);
        tmp_args_element_name_2 = var_filter;
        frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 635;
        {
            PyObject *call_args[] = {tmp_args_element_name_2};
            tmp_call_result_8 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_10, const_str_plain_add_filter, call_args);
        }

        if (tmp_call_result_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 635;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_8);
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_instance_11;
        CHECK_OBJECT(var_chooser);
        tmp_called_instance_11 = var_chooser;
        frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 637;
        tmp_assign_source_4 = CALL_METHOD_NO_ARGS(tmp_called_instance_11, const_str_plain_run);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 637;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_response == NULL);
        var_response = tmp_assign_source_4;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_7;
        PyObject *tmp_mvar_value_10;
        CHECK_OBJECT(var_response);
        tmp_compexpr_left_1 = var_response;
        tmp_mvar_value_10 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_10 == NULL)) {
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_10 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 638;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_7 = tmp_mvar_value_10;
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_RESPONSE_OK);
        if (tmp_compexpr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 638;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 638;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_called_instance_12;
            CHECK_OBJECT(var_chooser);
            tmp_called_instance_12 = var_chooser;
            frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 639;
            tmp_assign_source_5 = CALL_METHOD_NO_ARGS(tmp_called_instance_12, const_str_plain_get_filename);
            if (tmp_assign_source_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 639;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_filename == NULL);
            var_filename = tmp_assign_source_5;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_open_filename_1;
            PyObject *tmp_open_mode_1;
            CHECK_OBJECT(var_filename);
            tmp_open_filename_1 = var_filename;
            tmp_open_mode_1 = const_str_plain_wb;
            tmp_assign_source_6 = BUILTIN_OPEN(tmp_open_filename_1, tmp_open_mode_1, NULL);
            if (tmp_assign_source_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 643;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_2;
            }
            assert(var_f == NULL);
            var_f = tmp_assign_source_6;
        }
        {
            PyObject *tmp_assign_source_7;
            CHECK_OBJECT(var_f);
            tmp_assign_source_7 = var_f;
            assert(tmp_with_1__source == NULL);
            Py_INCREF(tmp_assign_source_7);
            tmp_with_1__source = tmp_assign_source_7;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_8;
            PyObject *tmp_source_name_8;
            CHECK_OBJECT(tmp_with_1__source);
            tmp_source_name_8 = tmp_with_1__source;
            tmp_assign_source_8 = LOOKUP_SPECIAL(tmp_source_name_8, const_str_plain___exit__);
            if (tmp_assign_source_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 644;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            assert(tmp_with_1__exit == NULL);
            tmp_with_1__exit = tmp_assign_source_8;
        }
        {
            PyObject *tmp_assign_source_9;
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_9;
            CHECK_OBJECT(tmp_with_1__source);
            tmp_source_name_9 = tmp_with_1__source;
            tmp_called_name_2 = LOOKUP_SPECIAL(tmp_source_name_9, const_str_plain___enter__);
            if (tmp_called_name_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 644;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 644;
            tmp_assign_source_9 = CALL_FUNCTION_NO_ARGS(tmp_called_name_2);
            Py_DECREF(tmp_called_name_2);
            if (tmp_assign_source_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 644;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            assert(tmp_with_1__enter == NULL);
            tmp_with_1__enter = tmp_assign_source_9;
        }
        {
            nuitka_bool tmp_assign_source_10;
            tmp_assign_source_10 = NUITKA_BOOL_TRUE;
            tmp_with_1__indicator = tmp_assign_source_10;
        }
        {
            PyObject *tmp_assign_source_11;
            tmp_assign_source_11 = PyList_New(0);
            assert(var_data == NULL);
            var_data = tmp_assign_source_11;
        }
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_10;
            PyObject *tmp_call_result_9;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_list_element_1;
            PyObject *tmp_source_name_11;
            CHECK_OBJECT(var_data);
            tmp_source_name_10 = var_data;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_append);
            if (tmp_called_name_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 646;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            tmp_list_element_1 = const_str_plain_Drive;
            tmp_args_element_name_3 = PyList_New(2);
            Py_INCREF(tmp_list_element_1);
            PyList_SET_ITEM(tmp_args_element_name_3, 0, tmp_list_element_1);
            CHECK_OBJECT(par_parent);
            tmp_source_name_11 = par_parent;
            tmp_list_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_devname);
            if (tmp_list_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_3);
                Py_DECREF(tmp_args_element_name_3);

                exception_lineno = 646;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            PyList_SET_ITEM(tmp_args_element_name_3, 1, tmp_list_element_1);
            frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 646;
            tmp_call_result_9 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_3);
            Py_DECREF(tmp_called_name_3);
            Py_DECREF(tmp_args_element_name_3);
            if (tmp_call_result_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 646;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            Py_DECREF(tmp_call_result_9);
        }
        {
            PyObject *tmp_called_name_4;
            PyObject *tmp_source_name_12;
            PyObject *tmp_call_result_10;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_list_element_2;
            PyObject *tmp_called_instance_13;
            PyObject *tmp_source_name_13;
            CHECK_OBJECT(var_data);
            tmp_source_name_12 = var_data;
            tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_append);
            if (tmp_called_name_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 647;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            tmp_list_element_2 = const_str_plain_Model;
            tmp_args_element_name_4 = PyList_New(2);
            Py_INCREF(tmp_list_element_2);
            PyList_SET_ITEM(tmp_args_element_name_4, 0, tmp_list_element_2);
            CHECK_OBJECT(par_parent);
            tmp_source_name_13 = par_parent;
            tmp_called_instance_13 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain_dev_vendor);
            if (tmp_called_instance_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_4);
                Py_DECREF(tmp_args_element_name_4);

                exception_lineno = 647;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 647;
            tmp_list_element_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_13, const_str_plain_get_text);
            Py_DECREF(tmp_called_instance_13);
            if (tmp_list_element_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_4);
                Py_DECREF(tmp_args_element_name_4);

                exception_lineno = 647;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            PyList_SET_ITEM(tmp_args_element_name_4, 1, tmp_list_element_2);
            frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 647;
            tmp_call_result_10 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_4, tmp_args_element_name_4);
            Py_DECREF(tmp_called_name_4);
            Py_DECREF(tmp_args_element_name_4);
            if (tmp_call_result_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 647;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            Py_DECREF(tmp_call_result_10);
        }
        {
            PyObject *tmp_called_name_5;
            PyObject *tmp_source_name_14;
            PyObject *tmp_call_result_11;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_list_element_3;
            PyObject *tmp_called_instance_14;
            PyObject *tmp_source_name_15;
            CHECK_OBJECT(var_data);
            tmp_source_name_14 = var_data;
            tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_14, const_str_plain_append);
            if (tmp_called_name_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 648;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            tmp_list_element_3 = const_str_digest_3d059a914d1f4299087c016a61ec41b4;
            tmp_args_element_name_5 = PyList_New(2);
            Py_INCREF(tmp_list_element_3);
            PyList_SET_ITEM(tmp_args_element_name_5, 0, tmp_list_element_3);
            CHECK_OBJECT(par_parent);
            tmp_source_name_15 = par_parent;
            tmp_called_instance_14 = LOOKUP_ATTRIBUTE(tmp_source_name_15, const_str_plain_dev_sn);
            if (tmp_called_instance_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_5);
                Py_DECREF(tmp_args_element_name_5);

                exception_lineno = 648;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 648;
            tmp_list_element_3 = CALL_METHOD_NO_ARGS(tmp_called_instance_14, const_str_plain_get_text);
            Py_DECREF(tmp_called_instance_14);
            if (tmp_list_element_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_5);
                Py_DECREF(tmp_args_element_name_5);

                exception_lineno = 648;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            PyList_SET_ITEM(tmp_args_element_name_5, 1, tmp_list_element_3);
            frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 648;
            tmp_call_result_11 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_5, tmp_args_element_name_5);
            Py_DECREF(tmp_called_name_5);
            Py_DECREF(tmp_args_element_name_5);
            if (tmp_call_result_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 648;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            Py_DECREF(tmp_call_result_11);
        }
        {
            PyObject *tmp_assign_source_12;
            PyObject *tmp_called_instance_15;
            PyObject *tmp_called_instance_16;
            PyObject *tmp_source_name_16;
            PyObject *tmp_mvar_value_11;
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_datetime);

            if (unlikely(tmp_mvar_value_11 == NULL)) {
                tmp_mvar_value_11 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime);
            }

            if (tmp_mvar_value_11 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 1382 ], 37, 0);
                exception_tb = NULL;

                exception_lineno = 649;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }

            tmp_source_name_16 = tmp_mvar_value_11;
            tmp_called_instance_16 = LOOKUP_ATTRIBUTE(tmp_source_name_16, const_str_plain_datetime);
            if (tmp_called_instance_16 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 649;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 649;
            tmp_called_instance_15 = CALL_METHOD_NO_ARGS(tmp_called_instance_16, const_str_plain_now);
            Py_DECREF(tmp_called_instance_16);
            if (tmp_called_instance_15 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 649;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 649;
            tmp_assign_source_12 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_15, const_str_plain_strftime, &PyTuple_GET_ITEM(const_tuple_str_digest_7bc75c1e8b65ceef92296230a69ea957_tuple, 0));

            Py_DECREF(tmp_called_instance_15);
            if (tmp_assign_source_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 649;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            assert(var_timeStr == NULL);
            var_timeStr = tmp_assign_source_12;
        }
        {
            PyObject *tmp_called_instance_17;
            PyObject *tmp_call_result_12;
            PyObject *tmp_args_element_name_6;
            PyObject *tmp_list_element_4;
            CHECK_OBJECT(var_data);
            tmp_called_instance_17 = var_data;
            tmp_list_element_4 = const_str_plain_Time;
            tmp_args_element_name_6 = PyList_New(2);
            Py_INCREF(tmp_list_element_4);
            PyList_SET_ITEM(tmp_args_element_name_6, 0, tmp_list_element_4);
            CHECK_OBJECT(var_timeStr);
            tmp_list_element_4 = var_timeStr;
            Py_INCREF(tmp_list_element_4);
            PyList_SET_ITEM(tmp_args_element_name_6, 1, tmp_list_element_4);
            frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 650;
            {
                PyObject *call_args[] = {tmp_args_element_name_6};
                tmp_call_result_12 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_17, const_str_plain_append, call_args);
            }

            Py_DECREF(tmp_args_element_name_6);
            if (tmp_call_result_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 650;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            Py_DECREF(tmp_call_result_12);
        }
        {
            PyObject *tmp_called_instance_18;
            PyObject *tmp_call_result_13;
            PyObject *tmp_call_arg_element_1;
            CHECK_OBJECT(var_data);
            tmp_called_instance_18 = var_data;
            tmp_call_arg_element_1 = LIST_COPY(const_list_44e2226d2505434c978169802a2bf034_list);
            frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 651;
            {
                PyObject *call_args[] = {tmp_call_arg_element_1};
                tmp_call_result_13 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_18, const_str_plain_append, call_args);
            }

            Py_DECREF(tmp_call_arg_element_1);
            if (tmp_call_result_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 651;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            Py_DECREF(tmp_call_result_13);
        }
        {
            PyObject *tmp_assign_source_13;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_source_name_17;
            CHECK_OBJECT(par_self);
            tmp_source_name_17 = par_self;
            tmp_iter_arg_1 = LOOKUP_ATTRIBUTE(tmp_source_name_17, const_str_plain_listStore);
            if (tmp_iter_arg_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 652;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            tmp_assign_source_13 = MAKE_ITERATOR(tmp_iter_arg_1);
            Py_DECREF(tmp_iter_arg_1);
            if (tmp_assign_source_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 652;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            assert(tmp_for_loop_1__for_iterator == NULL);
            tmp_for_loop_1__for_iterator = tmp_assign_source_13;
        }
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_14;
            CHECK_OBJECT(tmp_for_loop_1__for_iterator);
            tmp_next_source_1 = tmp_for_loop_1__for_iterator;
            tmp_assign_source_14 = ITERATOR_NEXT(tmp_next_source_1);
            if (tmp_assign_source_14 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_1;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_1 = "ooooooooooooooo";
                    exception_lineno = 652;
                    goto try_except_handler_6;
                }
            }

            {
                PyObject *old = tmp_for_loop_1__iter_value;
                tmp_for_loop_1__iter_value = tmp_assign_source_14;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_15;
            CHECK_OBJECT(tmp_for_loop_1__iter_value);
            tmp_assign_source_15 = tmp_for_loop_1__iter_value;
            {
                PyObject *old = var_row;
                var_row = tmp_assign_source_15;
                Py_INCREF(var_row);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_16;
            PyObject *tmp_list_element_5;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_subscript_name_1;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_subscript_name_2;
            PyObject *tmp_subscribed_name_3;
            PyObject *tmp_subscript_name_3;
            PyObject *tmp_subscribed_name_4;
            PyObject *tmp_subscript_name_4;
            CHECK_OBJECT(var_row);
            tmp_subscribed_name_1 = var_row;
            tmp_subscript_name_1 = const_int_0;
            tmp_list_element_5 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_1, tmp_subscript_name_1, 0);
            if (tmp_list_element_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 653;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_6;
            }
            tmp_assign_source_16 = PyList_New(4);
            PyList_SET_ITEM(tmp_assign_source_16, 0, tmp_list_element_5);
            CHECK_OBJECT(var_row);
            tmp_subscribed_name_2 = var_row;
            tmp_subscript_name_2 = const_int_pos_1;
            tmp_list_element_5 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_2, tmp_subscript_name_2, 1);
            if (tmp_list_element_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_assign_source_16);

                exception_lineno = 653;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_6;
            }
            PyList_SET_ITEM(tmp_assign_source_16, 1, tmp_list_element_5);
            CHECK_OBJECT(var_row);
            tmp_subscribed_name_3 = var_row;
            tmp_subscript_name_3 = const_int_pos_2;
            tmp_list_element_5 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_3, tmp_subscript_name_3, 2);
            if (tmp_list_element_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_assign_source_16);

                exception_lineno = 653;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_6;
            }
            PyList_SET_ITEM(tmp_assign_source_16, 2, tmp_list_element_5);
            CHECK_OBJECT(var_row);
            tmp_subscribed_name_4 = var_row;
            tmp_subscript_name_4 = const_int_pos_3;
            tmp_list_element_5 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_4, tmp_subscript_name_4, 3);
            if (tmp_list_element_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_assign_source_16);

                exception_lineno = 653;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_6;
            }
            PyList_SET_ITEM(tmp_assign_source_16, 3, tmp_list_element_5);
            {
                PyObject *old = var_row_data;
                var_row_data = tmp_assign_source_16;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_called_instance_19;
            PyObject *tmp_call_result_14;
            PyObject *tmp_args_element_name_7;
            CHECK_OBJECT(var_data);
            tmp_called_instance_19 = var_data;
            CHECK_OBJECT(var_row_data);
            tmp_args_element_name_7 = var_row_data;
            frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 654;
            {
                PyObject *call_args[] = {tmp_args_element_name_7};
                tmp_call_result_14 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_19, const_str_plain_append, call_args);
            }

            if (tmp_call_result_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 654;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_6;
            }
            Py_DECREF(tmp_call_result_14);
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 652;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_6;
        }
        goto loop_start_1;
        loop_end_1:;
        goto try_end_1;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_for_loop_1__iter_value);
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
        Py_DECREF(tmp_for_loop_1__for_iterator);
        tmp_for_loop_1__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_5;
        // End of try:
        try_end_1:;
        Py_XDECREF(tmp_for_loop_1__iter_value);
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
        Py_DECREF(tmp_for_loop_1__for_iterator);
        tmp_for_loop_1__for_iterator = NULL;

        {
            PyObject *tmp_assign_source_17;
            PyObject *tmp_called_instance_20;
            PyObject *tmp_mvar_value_12;
            PyObject *tmp_args_element_name_8;
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_csv);

            if (unlikely(tmp_mvar_value_12 == NULL)) {
                tmp_mvar_value_12 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_csv);
            }

            if (tmp_mvar_value_12 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 1419 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 655;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }

            tmp_called_instance_20 = tmp_mvar_value_12;
            CHECK_OBJECT(var_f);
            tmp_args_element_name_8 = var_f;
            frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 655;
            {
                PyObject *call_args[] = {tmp_args_element_name_8};
                tmp_assign_source_17 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_20, const_str_plain_writer, call_args);
            }

            if (tmp_assign_source_17 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 655;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            assert(var_writer == NULL);
            var_writer = tmp_assign_source_17;
        }
        {
            PyObject *tmp_called_instance_21;
            PyObject *tmp_call_result_15;
            PyObject *tmp_args_element_name_9;
            CHECK_OBJECT(var_writer);
            tmp_called_instance_21 = var_writer;
            CHECK_OBJECT(var_data);
            tmp_args_element_name_9 = var_data;
            frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 656;
            {
                PyObject *call_args[] = {tmp_args_element_name_9};
                tmp_call_result_15 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_21, const_str_plain_writerows, call_args);
            }

            if (tmp_call_result_15 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 656;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_5;
            }
            Py_DECREF(tmp_call_result_15);
        }
        goto try_end_2;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        PRESERVE_FRAME_EXCEPTION(frame_5e261a6409d1a8794a804c974235a230);
        if (exception_keeper_tb_2 == NULL) {
            exception_keeper_tb_2 = MAKE_TRACEBACK(frame_5e261a6409d1a8794a804c974235a230, exception_keeper_lineno_2);
        } else if (exception_keeper_lineno_2 != 0) {
            exception_keeper_tb_2 = ADD_TRACEBACK(exception_keeper_tb_2, frame_5e261a6409d1a8794a804c974235a230, exception_keeper_lineno_2);
        }

        NORMALIZE_EXCEPTION(&exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2);
        PUBLISH_EXCEPTION(&exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2);
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_2 = PyExc_BaseException;
            tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_2, tmp_compexpr_right_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 644;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_4;
            }
            tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
                goto branch_yes_2;
            } else {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                nuitka_bool tmp_assign_source_18;
                tmp_assign_source_18 = NUITKA_BOOL_FALSE;
                tmp_with_1__indicator = tmp_assign_source_18;
            }
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_operand_name_1;
                PyObject *tmp_called_name_6;
                PyObject *tmp_args_element_name_10;
                PyObject *tmp_args_element_name_11;
                PyObject *tmp_args_element_name_12;
                CHECK_OBJECT(tmp_with_1__exit);
                tmp_called_name_6 = tmp_with_1__exit;
                tmp_args_element_name_10 = EXC_TYPE(PyThreadState_GET());
                tmp_args_element_name_11 = EXC_VALUE(PyThreadState_GET());
                tmp_args_element_name_12 = EXC_TRACEBACK(PyThreadState_GET());
                frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 656;
                {
                    PyObject *call_args[] = {tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12};
                    tmp_operand_name_1 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_6, call_args);
                }

                if (tmp_operand_name_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 656;
                    type_description_1 = "ooooooooooooooo";
                    goto try_except_handler_4;
                }
                tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
                Py_DECREF(tmp_operand_name_1);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 656;
                    type_description_1 = "ooooooooooooooo";
                    goto try_except_handler_4;
                }
                tmp_condition_result_3 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_3;
                } else {
                    goto branch_no_3;
                }
                branch_yes_3:;
                tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                if (unlikely(tmp_result == false)) {
                    exception_lineno = 656;
                }

                if (exception_tb && exception_tb->tb_frame == &frame_5e261a6409d1a8794a804c974235a230->m_frame) frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = exception_tb->tb_lineno;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_4;
                branch_no_3:;
            }
            goto branch_end_2;
            branch_no_2:;
            tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            if (unlikely(tmp_result == false)) {
                exception_lineno = 644;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_5e261a6409d1a8794a804c974235a230->m_frame) frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_4;
            branch_end_2:;
        }
        goto try_end_2;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE(dialogs$$$function_14_saveToCSV);
        return NULL;
        // End of try:
        try_end_2:;
        goto try_end_3;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        {
            nuitka_bool tmp_condition_result_4;
            nuitka_bool tmp_compexpr_left_3;
            nuitka_bool tmp_compexpr_right_3;
            assert(tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
            tmp_compexpr_left_3 = tmp_with_1__indicator;
            tmp_compexpr_right_3 = NUITKA_BOOL_TRUE;
            tmp_condition_result_4 = (tmp_compexpr_left_3 == tmp_compexpr_right_3) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
                goto branch_yes_4;
            } else {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_called_name_7;
                PyObject *tmp_call_result_16;
                CHECK_OBJECT(tmp_with_1__exit);
                tmp_called_name_7 = tmp_with_1__exit;
                frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 656;
                tmp_call_result_16 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_7, &PyTuple_GET_ITEM(const_tuple_none_none_none_tuple, 0));

                if (tmp_call_result_16 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    Py_DECREF(exception_keeper_type_3);
                    Py_XDECREF(exception_keeper_value_3);
                    Py_XDECREF(exception_keeper_tb_3);

                    exception_lineno = 656;
                    type_description_1 = "ooooooooooooooo";
                    goto try_except_handler_3;
                }
                Py_DECREF(tmp_call_result_16);
            }
            branch_no_4:;
        }
        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto try_except_handler_3;
        // End of try:
        try_end_3:;
        {
            nuitka_bool tmp_condition_result_5;
            nuitka_bool tmp_compexpr_left_4;
            nuitka_bool tmp_compexpr_right_4;
            assert(tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
            tmp_compexpr_left_4 = tmp_with_1__indicator;
            tmp_compexpr_right_4 = NUITKA_BOOL_TRUE;
            tmp_condition_result_5 = (tmp_compexpr_left_4 == tmp_compexpr_right_4) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
                goto branch_yes_5;
            } else {
                goto branch_no_5;
            }
            branch_yes_5:;
            {
                PyObject *tmp_called_name_8;
                PyObject *tmp_call_result_17;
                CHECK_OBJECT(tmp_with_1__exit);
                tmp_called_name_8 = tmp_with_1__exit;
                frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 656;
                tmp_call_result_17 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_8, &PyTuple_GET_ITEM(const_tuple_none_none_none_tuple, 0));

                if (tmp_call_result_17 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 656;
                    type_description_1 = "ooooooooooooooo";
                    goto try_except_handler_3;
                }
                Py_DECREF(tmp_call_result_17);
            }
            branch_no_5:;
        }
        goto try_end_4;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT((PyObject *)tmp_with_1__source);
        Py_DECREF(tmp_with_1__source);
        tmp_with_1__source = NULL;

        Py_XDECREF(tmp_with_1__enter);
        tmp_with_1__enter = NULL;

        Py_XDECREF(tmp_with_1__exit);
        tmp_with_1__exit = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto try_except_handler_2;
        // End of try:
        try_end_4:;
        CHECK_OBJECT((PyObject *)tmp_with_1__source);
        Py_DECREF(tmp_with_1__source);
        tmp_with_1__source = NULL;

        CHECK_OBJECT((PyObject *)tmp_with_1__enter);
        Py_DECREF(tmp_with_1__enter);
        tmp_with_1__enter = NULL;

        CHECK_OBJECT((PyObject *)tmp_with_1__exit);
        Py_DECREF(tmp_with_1__exit);
        tmp_with_1__exit = NULL;

        {
            PyObject *tmp_called_instance_22;
            PyObject *tmp_call_result_18;
            CHECK_OBJECT(var_f);
            tmp_called_instance_22 = var_f;
            frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 657;
            tmp_call_result_18 = CALL_METHOD_NO_ARGS(tmp_called_instance_22, const_str_plain_close);
            if (tmp_call_result_18 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 657;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF(tmp_call_result_18);
        }
        {
            PyObject *tmp_called_instance_23;
            PyObject *tmp_call_result_19;
            CHECK_OBJECT(var_chooser);
            tmp_called_instance_23 = var_chooser;
            frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 658;
            tmp_call_result_19 = CALL_METHOD_NO_ARGS(tmp_called_instance_23, const_str_plain_destroy);
            if (tmp_call_result_19 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 658;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF(tmp_call_result_19);
        }
        goto try_end_5;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        PRESERVE_FRAME_EXCEPTION(frame_5e261a6409d1a8794a804c974235a230);
        if (exception_keeper_tb_5 == NULL) {
            exception_keeper_tb_5 = MAKE_TRACEBACK(frame_5e261a6409d1a8794a804c974235a230, exception_keeper_lineno_5);
        } else if (exception_keeper_lineno_5 != 0) {
            exception_keeper_tb_5 = ADD_TRACEBACK(exception_keeper_tb_5, frame_5e261a6409d1a8794a804c974235a230, exception_keeper_lineno_5);
        }

        NORMALIZE_EXCEPTION(&exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5);
        PUBLISH_EXCEPTION(&exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5);
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_compexpr_left_5;
            PyObject *tmp_compexpr_right_5;
            tmp_compexpr_left_5 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_5 = PyExc_IOError;
            tmp_res = EXCEPTION_MATCH_BOOL(tmp_compexpr_left_5, tmp_compexpr_right_5);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 659;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_6 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
                goto branch_yes_6;
            } else {
                goto branch_no_6;
            }
            branch_yes_6:;
            {
                PyObject *tmp_called_instance_24;
                PyObject *tmp_call_result_20;
                CHECK_OBJECT(var_chooser);
                tmp_called_instance_24 = var_chooser;
                frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 660;
                tmp_call_result_20 = CALL_METHOD_NO_ARGS(tmp_called_instance_24, const_str_plain_destroy);
                if (tmp_call_result_20 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 660;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_20);
            }
            {
                PyObject *tmp_assign_source_19;
                PyObject *tmp_called_name_9;
                PyObject *tmp_source_name_18;
                PyObject *tmp_mvar_value_13;
                PyObject *tmp_kw_name_2;
                PyObject *tmp_dict_key_4;
                PyObject *tmp_dict_value_4;
                PyObject *tmp_source_name_19;
                PyObject *tmp_mvar_value_14;
                PyObject *tmp_dict_key_5;
                PyObject *tmp_dict_value_5;
                PyObject *tmp_source_name_20;
                PyObject *tmp_mvar_value_15;
                PyObject *tmp_dict_key_6;
                PyObject *tmp_dict_value_6;
                tmp_mvar_value_13 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

                if (unlikely(tmp_mvar_value_13 == NULL)) {
                    tmp_mvar_value_13 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
                }

                if (tmp_mvar_value_13 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                    exception_tb = NULL;

                    exception_lineno = 661;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_18 = tmp_mvar_value_13;
                tmp_called_name_9 = LOOKUP_ATTRIBUTE(tmp_source_name_18, const_str_plain_MessageDialog);
                if (tmp_called_name_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 661;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_mvar_value_14 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

                if (unlikely(tmp_mvar_value_14 == NULL)) {
                    tmp_mvar_value_14 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
                }

                if (tmp_mvar_value_14 == NULL) {
                    Py_DECREF(tmp_called_name_9);
                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                    exception_tb = NULL;

                    exception_lineno = 661;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_19 = tmp_mvar_value_14;
                tmp_dict_value_4 = LOOKUP_ATTRIBUTE(tmp_source_name_19, const_str_plain_MESSAGE_ERROR);
                if (tmp_dict_value_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_9);

                    exception_lineno = 661;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_dict_key_4 = const_str_plain_type;
                tmp_kw_name_2 = _PyDict_NewPresized( 3 );
                tmp_res = PyDict_SetItem(tmp_kw_name_2, tmp_dict_key_4, tmp_dict_value_4);
                Py_DECREF(tmp_dict_value_4);
                assert(!(tmp_res != 0));
                tmp_mvar_value_15 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

                if (unlikely(tmp_mvar_value_15 == NULL)) {
                    tmp_mvar_value_15 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
                }

                if (tmp_mvar_value_15 == NULL) {
                    Py_DECREF(tmp_called_name_9);
                    Py_DECREF(tmp_kw_name_2);
                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                    exception_tb = NULL;

                    exception_lineno = 661;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_20 = tmp_mvar_value_15;
                tmp_dict_value_5 = LOOKUP_ATTRIBUTE(tmp_source_name_20, const_str_plain_BUTTONS_OK);
                if (tmp_dict_value_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_9);
                    Py_DECREF(tmp_kw_name_2);

                    exception_lineno = 661;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_dict_key_5 = const_str_plain_buttons;
                tmp_res = PyDict_SetItem(tmp_kw_name_2, tmp_dict_key_5, tmp_dict_value_5);
                Py_DECREF(tmp_dict_value_5);
                assert(!(tmp_res != 0));
                CHECK_OBJECT(par_self);
                tmp_dict_value_6 = par_self;
                tmp_dict_key_6 = const_str_plain_parent;
                tmp_res = PyDict_SetItem(tmp_kw_name_2, tmp_dict_key_6, tmp_dict_value_6);
                assert(!(tmp_res != 0));
                frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 661;
                tmp_assign_source_19 = CALL_FUNCTION_WITH_KEYARGS(tmp_called_name_9, tmp_kw_name_2);
                Py_DECREF(tmp_called_name_9);
                Py_DECREF(tmp_kw_name_2);
                if (tmp_assign_source_19 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 661;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert(var_message == NULL);
                var_message = tmp_assign_source_19;
            }
            {
                PyObject *tmp_called_instance_25;
                PyObject *tmp_call_result_21;
                CHECK_OBJECT(var_message);
                tmp_called_instance_25 = var_message;
                frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 662;
                tmp_call_result_21 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_25, const_str_plain_set_markup, &PyTuple_GET_ITEM(const_tuple_str_digest_ea27fd1abf24ba1001b39b13e5d301ce_tuple, 0));

                if (tmp_call_result_21 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 662;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_21);
            }
            {
                PyObject *tmp_assign_source_20;
                PyObject *tmp_called_instance_26;
                CHECK_OBJECT(var_message);
                tmp_called_instance_26 = var_message;
                frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 664;
                tmp_assign_source_20 = CALL_METHOD_NO_ARGS(tmp_called_instance_26, const_str_plain_run);
                if (tmp_assign_source_20 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 664;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert(var_res == NULL);
                var_res = tmp_assign_source_20;
            }
            {
                PyObject *tmp_called_instance_27;
                PyObject *tmp_call_result_22;
                CHECK_OBJECT(var_message);
                tmp_called_instance_27 = var_message;
                frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 665;
                tmp_call_result_22 = CALL_METHOD_NO_ARGS(tmp_called_instance_27, const_str_plain_destroy);
                if (tmp_call_result_22 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 665;
                    type_description_1 = "ooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_22);
            }
            goto branch_end_6;
            branch_no_6:;
            tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            if (unlikely(tmp_result == false)) {
                exception_lineno = 642;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_5e261a6409d1a8794a804c974235a230->m_frame) frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
            branch_end_6:;
        }
        goto try_end_5;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE(dialogs$$$function_14_saveToCSV);
        return NULL;
        // End of try:
        try_end_5:;
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_called_instance_28;
            PyObject *tmp_call_result_23;
            CHECK_OBJECT(var_chooser);
            tmp_called_instance_28 = var_chooser;
            frame_5e261a6409d1a8794a804c974235a230->m_frame.f_lineno = 667;
            tmp_call_result_23 = CALL_METHOD_NO_ARGS(tmp_called_instance_28, const_str_plain_destroy);
            if (tmp_call_result_23 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 667;
                type_description_1 = "ooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_23);
        }
        branch_end_1:;
    }

#if 1
    RESTORE_FRAME_EXCEPTION(frame_5e261a6409d1a8794a804c974235a230);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 1
    RESTORE_FRAME_EXCEPTION(frame_5e261a6409d1a8794a804c974235a230);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5e261a6409d1a8794a804c974235a230, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_5e261a6409d1a8794a804c974235a230->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5e261a6409d1a8794a804c974235a230, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5e261a6409d1a8794a804c974235a230,
        type_description_1,
        par_self,
        par_button,
        par_parent,
        var_writer,
        var_f,
        var_res,
        var_timeStr,
        var_chooser,
        var_response,
        var_filter,
        var_row_data,
        var_message,
        var_filename,
        var_data,
        var_row
    );


    // Release cached frame.
    if (frame_5e261a6409d1a8794a804c974235a230 == cache_frame_5e261a6409d1a8794a804c974235a230) {
        Py_DECREF(frame_5e261a6409d1a8794a804c974235a230);
    }
    cache_frame_5e261a6409d1a8794a804c974235a230 = NULL;

    assertFrameObject(frame_5e261a6409d1a8794a804c974235a230);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_14_saveToCSV);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_writer);
    var_writer = NULL;

    Py_XDECREF(var_f);
    var_f = NULL;

    Py_XDECREF(var_res);
    var_res = NULL;

    Py_XDECREF(var_timeStr);
    var_timeStr = NULL;

    CHECK_OBJECT((PyObject *)var_chooser);
    Py_DECREF(var_chooser);
    var_chooser = NULL;

    CHECK_OBJECT((PyObject *)var_response);
    Py_DECREF(var_response);
    var_response = NULL;

    CHECK_OBJECT((PyObject *)var_filter);
    Py_DECREF(var_filter);
    var_filter = NULL;

    Py_XDECREF(var_row_data);
    var_row_data = NULL;

    Py_XDECREF(var_message);
    var_message = NULL;

    Py_XDECREF(var_filename);
    var_filename = NULL;

    Py_XDECREF(var_data);
    var_data = NULL;

    Py_XDECREF(var_row);
    var_row = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_writer);
    var_writer = NULL;

    Py_XDECREF(var_f);
    var_f = NULL;

    Py_XDECREF(var_res);
    var_res = NULL;

    Py_XDECREF(var_timeStr);
    var_timeStr = NULL;

    Py_XDECREF(var_chooser);
    var_chooser = NULL;

    Py_XDECREF(var_response);
    var_response = NULL;

    Py_XDECREF(var_filter);
    var_filter = NULL;

    Py_XDECREF(var_row_data);
    var_row_data = NULL;

    Py_XDECREF(var_message);
    var_message = NULL;

    Py_XDECREF(var_filename);
    var_filename = NULL;

    Py_XDECREF(var_data);
    var_data = NULL;

    Py_XDECREF(var_row);
    var_row = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_14_saveToCSV);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_15_filterLog(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_button = python_pars[1];
    PyObject *par_entries = python_pars[2];
    PyObject *par_mode = python_pars[3];
    PyObject *var_i = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_26e0170fd15b2d159020ce747904a93b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_26e0170fd15b2d159020ce747904a93b = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_26e0170fd15b2d159020ce747904a93b, codeobj_26e0170fd15b2d159020ce747904a93b, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_26e0170fd15b2d159020ce747904a93b = cache_frame_26e0170fd15b2d159020ce747904a93b;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_26e0170fd15b2d159020ce747904a93b);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_26e0170fd15b2d159020ce747904a93b) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_listStore);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 671;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_26e0170fd15b2d159020ce747904a93b->m_frame.f_lineno = 671;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_clear);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 671;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_range_arg_1;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT(par_entries);
        tmp_len_arg_1 = par_entries;
        tmp_range_arg_1 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_range_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 672;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_iter_arg_1 = BUILTIN_RANGE(tmp_range_arg_1);
        Py_DECREF(tmp_range_arg_1);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 672;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 672;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_2 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooo";
                exception_lineno = 672;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_3 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_i;
            var_i = tmp_assign_source_3;
            Py_INCREF(var_i);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_3 = par_self;
        tmp_source_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_listStore);
        if (tmp_source_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 673;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_append);
        Py_DECREF(tmp_source_name_2);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 673;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(par_entries);
        tmp_subscribed_name_1 = par_entries;
        CHECK_OBJECT(var_i);
        tmp_subscript_name_1 = var_i;
        tmp_args_element_name_1 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
        if (tmp_args_element_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 673;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        frame_26e0170fd15b2d159020ce747904a93b->m_frame.f_lineno = 673;
        tmp_call_result_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 673;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_2);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 672;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_source_name_5;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_5 = par_self;
        tmp_source_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_viewAll_button);
        if (tmp_source_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 674;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_set_sensitive);
        Py_DECREF(tmp_source_name_4);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 674;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_mode);
        tmp_compexpr_left_1 = par_mode;
        tmp_compexpr_right_1 = const_int_0;
        tmp_args_element_name_2 = RICH_COMPARE_NOTEQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        if (tmp_args_element_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 674;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_26e0170fd15b2d159020ce747904a93b->m_frame.f_lineno = 674;
        tmp_call_result_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 674;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_6;
        PyObject *tmp_source_name_7;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT(par_self);
        tmp_source_name_7 = par_self;
        tmp_source_name_6 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_viewWarnErr_button);
        if (tmp_source_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 675;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_set_sensitive);
        Py_DECREF(tmp_source_name_6);
        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 675;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_mode);
        tmp_compexpr_left_2 = par_mode;
        tmp_compexpr_right_2 = const_int_pos_1;
        tmp_args_element_name_3 = RICH_COMPARE_NOTEQ_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        if (tmp_args_element_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_3);

            exception_lineno = 675;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_26e0170fd15b2d159020ce747904a93b->m_frame.f_lineno = 675;
        tmp_call_result_4 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_3);
        Py_DECREF(tmp_called_name_3);
        Py_DECREF(tmp_args_element_name_3);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 675;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    {
        PyObject *tmp_called_name_4;
        PyObject *tmp_source_name_8;
        PyObject *tmp_source_name_9;
        PyObject *tmp_call_result_5;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        CHECK_OBJECT(par_self);
        tmp_source_name_9 = par_self;
        tmp_source_name_8 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_viewErr_button);
        if (tmp_source_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 676;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_set_sensitive);
        Py_DECREF(tmp_source_name_8);
        if (tmp_called_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 676;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_mode);
        tmp_compexpr_left_3 = par_mode;
        tmp_compexpr_right_3 = const_int_pos_2;
        tmp_args_element_name_4 = RICH_COMPARE_NOTEQ_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        if (tmp_args_element_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_4);

            exception_lineno = 676;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_26e0170fd15b2d159020ce747904a93b->m_frame.f_lineno = 676;
        tmp_call_result_5 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_4, tmp_args_element_name_4);
        Py_DECREF(tmp_called_name_4);
        Py_DECREF(tmp_args_element_name_4);
        if (tmp_call_result_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 676;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_5);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_26e0170fd15b2d159020ce747904a93b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_26e0170fd15b2d159020ce747904a93b);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_26e0170fd15b2d159020ce747904a93b, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_26e0170fd15b2d159020ce747904a93b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_26e0170fd15b2d159020ce747904a93b, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_26e0170fd15b2d159020ce747904a93b,
        type_description_1,
        par_self,
        par_button,
        par_entries,
        par_mode,
        var_i
    );


    // Release cached frame.
    if (frame_26e0170fd15b2d159020ce747904a93b == cache_frame_26e0170fd15b2d159020ce747904a93b) {
        Py_DECREF(frame_26e0170fd15b2d159020ce747904a93b);
    }
    cache_frame_26e0170fd15b2d159020ce747904a93b = NULL;

    assertFrameObject(frame_26e0170fd15b2d159020ce747904a93b);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_15_filterLog);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_i);
    var_i = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_i);
    var_i = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_15_filterLog);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_mode);
    Py_DECREF(par_mode);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);
    CHECK_OBJECT(par_entries);
    Py_DECREF(par_entries);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_mode);
    Py_DECREF(par_mode);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);
    CHECK_OBJECT(par_entries);
    Py_DECREF(par_entries);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_16_openLog(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_button = python_pars[0];
    PyObject *par_parent = python_pars[1];
    PyObject *par_args = python_pars[2];
    PyObject *var_pw_strip = NULL;
    PyObject *var_index = NULL;
    PyObject *var_t = NULL;
    struct Nuitka_FrameObject *frame_1bf6d1030b75188bd6a8b51e170fc4f1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_1bf6d1030b75188bd6a8b51e170fc4f1 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_1bf6d1030b75188bd6a8b51e170fc4f1, codeobj_1bf6d1030b75188bd6a8b51e170fc4f1, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_1bf6d1030b75188bd6a8b51e170fc4f1 = cache_frame_1bf6d1030b75188bd6a8b51e170fc4f1;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_1bf6d1030b75188bd6a8b51e170fc4f1);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_1bf6d1030b75188bd6a8b51e170fc4f1) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_verify);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_verify);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 236 ], 35, 0);
            exception_tb = NULL;

            exception_lineno = 679;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_parent);
        tmp_args_element_name_1 = par_parent;
        frame_1bf6d1030b75188bd6a8b51e170fc4f1->m_frame.f_lineno = 679;
        {
            PyObject *call_args[] = {tmp_args_element_name_1};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_licCheck, call_args);
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 679;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
        }

        if (tmp_mvar_value_2 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
            exception_tb = NULL;

            exception_lineno = 680;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_2;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_sub);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 680;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_2 = const_str_digest_29fe972ddfd3c3ace7d88aee7a9cd77e;
        tmp_args_element_name_3 = const_str_empty;
        CHECK_OBJECT(par_parent);
        tmp_source_name_2 = par_parent;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_pass_entry);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 680;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_1bf6d1030b75188bd6a8b51e170fc4f1->m_frame.f_lineno = 680;
        tmp_args_element_name_4 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_get_text);
        Py_DECREF(tmp_called_instance_2);
        if (tmp_args_element_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 680;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_1bf6d1030b75188bd6a8b51e170fc4f1->m_frame.f_lineno = 680;
        {
            PyObject *call_args[] = {tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_1, call_args);
        }

        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_4);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 680;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_pw_strip == NULL);
        var_pw_strip = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_3;
        PyObject *tmp_operand_name_1;
        int tmp_and_left_truth_2;
        PyObject *tmp_and_left_value_2;
        PyObject *tmp_and_right_value_2;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_source_name_4;
        int tmp_and_left_truth_3;
        PyObject *tmp_and_left_value_3;
        PyObject *tmp_and_right_value_3;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_source_name_5;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        PyObject *tmp_source_name_6;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_source_name_7;
        CHECK_OBJECT(par_parent);
        tmp_source_name_3 = par_parent;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_pass_entry);
        if (tmp_called_instance_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 681;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_1bf6d1030b75188bd6a8b51e170fc4f1->m_frame.f_lineno = 681;
        tmp_compexpr_left_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_3, const_str_plain_get_text);
        Py_DECREF(tmp_called_instance_3);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 681;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_str_empty;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 681;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_parent);
        tmp_source_name_4 = par_parent;
        tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_VERSION);
        if (tmp_compexpr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 681;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = const_int_pos_3;
        tmp_or_left_value_1 = RICH_COMPARE_EQ_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        Py_DECREF(tmp_compexpr_left_2);
        if (tmp_or_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 681;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_or_left_value_1);

            exception_lineno = 681;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        Py_DECREF(tmp_or_left_value_1);
        CHECK_OBJECT(par_parent);
        tmp_source_name_5 = par_parent;
        tmp_compexpr_left_3 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_VERSION);
        if (tmp_compexpr_left_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 681;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_3 = const_int_pos_1;
        tmp_and_left_value_3 = RICH_COMPARE_EQ_OBJECT_OBJECT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        Py_DECREF(tmp_compexpr_left_3);
        if (tmp_and_left_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 681;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_truth_3 = CHECK_IF_TRUE(tmp_and_left_value_3);
        if (tmp_and_left_truth_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_and_left_value_3);

            exception_lineno = 681;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_3 == 1) {
            goto and_right_3;
        } else {
            goto and_left_3;
        }
        and_right_3:;
        Py_DECREF(tmp_and_left_value_3);
        CHECK_OBJECT(par_parent);
        tmp_source_name_6 = par_parent;
        tmp_compexpr_left_4 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_PBA_VERSION);
        if (tmp_compexpr_left_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 681;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_4 = const_int_pos_1;
        tmp_and_right_value_3 = RICH_COMPARE_NOTEQ_OBJECT_OBJECT(tmp_compexpr_left_4, tmp_compexpr_right_4);
        Py_DECREF(tmp_compexpr_left_4);
        if (tmp_and_right_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 681;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = tmp_and_right_value_3;
        goto and_end_3;
        and_left_3:;
        tmp_or_right_value_1 = tmp_and_left_value_3;
        and_end_3:;
        tmp_and_left_value_2 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_and_left_value_2 = tmp_or_left_value_1;
        or_end_1:;
        tmp_and_left_truth_2 = CHECK_IF_TRUE(tmp_and_left_value_2);
        if (tmp_and_left_truth_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_and_left_value_2);

            exception_lineno = 681;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_2 == 1) {
            goto and_right_2;
        } else {
            goto and_left_2;
        }
        and_right_2:;
        Py_DECREF(tmp_and_left_value_2);
        CHECK_OBJECT(par_parent);
        tmp_source_name_7 = par_parent;
        tmp_called_instance_4 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_check_pass_rd);
        if (tmp_called_instance_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 681;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_1bf6d1030b75188bd6a8b51e170fc4f1->m_frame.f_lineno = 681;
        tmp_and_right_value_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_4, const_str_plain_get_active);
        Py_DECREF(tmp_called_instance_4);
        if (tmp_and_right_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 681;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_1 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_operand_name_1 = tmp_and_left_value_2;
        and_end_2:;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        Py_DECREF(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 681;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_5;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT(par_parent);
            tmp_called_instance_5 = par_parent;
            frame_1bf6d1030b75188bd6a8b51e170fc4f1->m_frame.f_lineno = 682;
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_5, const_str_plain_msg_err, &PyTuple_GET_ITEM(const_tuple_str_digest_8482c425481a7392528c91276c4d7ae3_tuple, 0));

            if (tmp_call_result_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 682;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_2);
        }
        tmp_return_value = Py_None;
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_2;
            int tmp_and_left_truth_4;
            nuitka_bool tmp_and_left_value_4;
            nuitka_bool tmp_and_right_value_4;
            PyObject *tmp_compexpr_left_5;
            PyObject *tmp_compexpr_right_5;
            PyObject *tmp_operand_name_2;
            int tmp_and_left_truth_5;
            PyObject *tmp_and_left_value_5;
            PyObject *tmp_and_right_value_5;
            int tmp_or_left_truth_2;
            PyObject *tmp_or_left_value_2;
            PyObject *tmp_or_right_value_2;
            PyObject *tmp_compexpr_left_6;
            PyObject *tmp_compexpr_right_6;
            PyObject *tmp_source_name_8;
            int tmp_and_left_truth_6;
            PyObject *tmp_and_left_value_6;
            PyObject *tmp_and_right_value_6;
            PyObject *tmp_compexpr_left_7;
            PyObject *tmp_compexpr_right_7;
            PyObject *tmp_source_name_9;
            PyObject *tmp_compexpr_left_8;
            PyObject *tmp_compexpr_right_8;
            PyObject *tmp_source_name_10;
            PyObject *tmp_called_instance_6;
            PyObject *tmp_source_name_11;
            CHECK_OBJECT(var_pw_strip);
            tmp_compexpr_left_5 = var_pw_strip;
            tmp_compexpr_right_5 = const_str_empty;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_5, tmp_compexpr_right_5);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 684;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_and_left_value_4 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_and_left_truth_4 = tmp_and_left_value_4 == NUITKA_BOOL_TRUE ? 1 : 0;
            if (tmp_and_left_truth_4 == 1) {
                goto and_right_4;
            } else {
                goto and_left_4;
            }
            and_right_4:;
            CHECK_OBJECT(par_parent);
            tmp_source_name_8 = par_parent;
            tmp_compexpr_left_6 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_VERSION);
            if (tmp_compexpr_left_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 684;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_6 = const_int_pos_3;
            tmp_or_left_value_2 = RICH_COMPARE_EQ_OBJECT_OBJECT(tmp_compexpr_left_6, tmp_compexpr_right_6);
            Py_DECREF(tmp_compexpr_left_6);
            if (tmp_or_left_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 684;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_or_left_truth_2 = CHECK_IF_TRUE(tmp_or_left_value_2);
            if (tmp_or_left_truth_2 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_or_left_value_2);

                exception_lineno = 684;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            if (tmp_or_left_truth_2 == 1) {
                goto or_left_2;
            } else {
                goto or_right_2;
            }
            or_right_2:;
            Py_DECREF(tmp_or_left_value_2);
            CHECK_OBJECT(par_parent);
            tmp_source_name_9 = par_parent;
            tmp_compexpr_left_7 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_VERSION);
            if (tmp_compexpr_left_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 684;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_7 = const_int_pos_1;
            tmp_and_left_value_6 = RICH_COMPARE_EQ_OBJECT_OBJECT(tmp_compexpr_left_7, tmp_compexpr_right_7);
            Py_DECREF(tmp_compexpr_left_7);
            if (tmp_and_left_value_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 684;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_and_left_truth_6 = CHECK_IF_TRUE(tmp_and_left_value_6);
            if (tmp_and_left_truth_6 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_and_left_value_6);

                exception_lineno = 684;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            if (tmp_and_left_truth_6 == 1) {
                goto and_right_6;
            } else {
                goto and_left_6;
            }
            and_right_6:;
            Py_DECREF(tmp_and_left_value_6);
            CHECK_OBJECT(par_parent);
            tmp_source_name_10 = par_parent;
            tmp_compexpr_left_8 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_PBA_VERSION);
            if (tmp_compexpr_left_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 684;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_8 = const_int_pos_1;
            tmp_and_right_value_6 = RICH_COMPARE_NOTEQ_OBJECT_OBJECT(tmp_compexpr_left_8, tmp_compexpr_right_8);
            Py_DECREF(tmp_compexpr_left_8);
            if (tmp_and_right_value_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 684;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_or_right_value_2 = tmp_and_right_value_6;
            goto and_end_6;
            and_left_6:;
            tmp_or_right_value_2 = tmp_and_left_value_6;
            and_end_6:;
            tmp_and_left_value_5 = tmp_or_right_value_2;
            goto or_end_2;
            or_left_2:;
            tmp_and_left_value_5 = tmp_or_left_value_2;
            or_end_2:;
            tmp_and_left_truth_5 = CHECK_IF_TRUE(tmp_and_left_value_5);
            if (tmp_and_left_truth_5 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_and_left_value_5);

                exception_lineno = 684;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            if (tmp_and_left_truth_5 == 1) {
                goto and_right_5;
            } else {
                goto and_left_5;
            }
            and_right_5:;
            Py_DECREF(tmp_and_left_value_5);
            CHECK_OBJECT(par_parent);
            tmp_source_name_11 = par_parent;
            tmp_called_instance_6 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_check_pass_rd);
            if (tmp_called_instance_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 684;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            frame_1bf6d1030b75188bd6a8b51e170fc4f1->m_frame.f_lineno = 684;
            tmp_and_right_value_5 = CALL_METHOD_NO_ARGS(tmp_called_instance_6, const_str_plain_get_active);
            Py_DECREF(tmp_called_instance_6);
            if (tmp_and_right_value_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 684;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_operand_name_2 = tmp_and_right_value_5;
            goto and_end_5;
            and_left_5:;
            tmp_operand_name_2 = tmp_and_left_value_5;
            and_end_5:;
            tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
            Py_DECREF(tmp_operand_name_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 684;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_and_right_value_4 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_2 = tmp_and_right_value_4;
            goto and_end_4;
            and_left_4:;
            tmp_condition_result_2 = tmp_and_left_value_4;
            and_end_4:;
            if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
                goto branch_yes_2;
            } else {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_called_instance_7;
                PyObject *tmp_call_result_3;
                CHECK_OBJECT(par_parent);
                tmp_called_instance_7 = par_parent;
                frame_1bf6d1030b75188bd6a8b51e170fc4f1->m_frame.f_lineno = 685;
                tmp_call_result_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_7, const_str_plain_msg_err, &PyTuple_GET_ITEM(const_tuple_str_digest_84ba3144e8a4c8824551fdd8d0fe5bde_tuple, 0));

                if (tmp_call_result_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 685;
                    type_description_1 = "oooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_3);
            }
            tmp_return_value = Py_None;
            Py_INCREF(tmp_return_value);
            goto frame_return_exit_1;
            branch_no_2:;
        }
        branch_end_1:;
    }
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_or_left_truth_3;
        nuitka_bool tmp_or_left_value_3;
        nuitka_bool tmp_or_right_value_3;
        PyObject *tmp_compexpr_left_9;
        PyObject *tmp_compexpr_right_9;
        PyObject *tmp_left_name_1;
        PyObject *tmp_source_name_12;
        PyObject *tmp_right_name_1;
        int tmp_and_left_truth_7;
        nuitka_bool tmp_and_left_value_7;
        nuitka_bool tmp_and_right_value_7;
        PyObject *tmp_compexpr_left_10;
        PyObject *tmp_compexpr_right_10;
        PyObject *tmp_source_name_13;
        PyObject *tmp_compexpr_left_11;
        PyObject *tmp_compexpr_right_11;
        PyObject *tmp_source_name_14;
        CHECK_OBJECT(par_parent);
        tmp_source_name_12 = par_parent;
        tmp_left_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_VERSION);
        if (tmp_left_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 687;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = const_int_pos_3;
        tmp_compexpr_left_9 = BINARY_OPERATION_MOD_OBJECT_INT(tmp_left_name_1, tmp_right_name_1);
        Py_DECREF(tmp_left_name_1);
        if (tmp_compexpr_left_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 687;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_9 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_9, tmp_compexpr_right_9);
        Py_DECREF(tmp_compexpr_left_9);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 687;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_3 = tmp_or_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_3 == 1) {
            goto or_left_3;
        } else {
            goto or_right_3;
        }
        or_right_3:;
        CHECK_OBJECT(par_parent);
        tmp_source_name_13 = par_parent;
        tmp_compexpr_left_10 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain_VERSION);
        if (tmp_compexpr_left_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 687;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_10 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_10, tmp_compexpr_right_10);
        Py_DECREF(tmp_compexpr_left_10);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 687;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_7 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_7 = tmp_and_left_value_7 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_7 == 1) {
            goto and_right_7;
        } else {
            goto and_left_7;
        }
        and_right_7:;
        CHECK_OBJECT(par_parent);
        tmp_source_name_14 = par_parent;
        tmp_compexpr_left_11 = LOOKUP_ATTRIBUTE(tmp_source_name_14, const_str_plain_PBA_VERSION);
        if (tmp_compexpr_left_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 687;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_11 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_INT(tmp_compexpr_left_11, tmp_compexpr_right_11);
        Py_DECREF(tmp_compexpr_left_11);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 687;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_7 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_right_value_3 = tmp_and_right_value_7;
        goto and_end_7;
        and_left_7:;
        tmp_or_right_value_3 = tmp_and_left_value_7;
        and_end_7:;
        tmp_condition_result_3 = tmp_or_right_value_3;
        goto or_end_3;
        or_left_3:;
        tmp_condition_result_3 = tmp_or_left_value_3;
        or_end_3:;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            nuitka_bool tmp_condition_result_4;
            int tmp_and_left_truth_8;
            nuitka_bool tmp_and_left_value_8;
            nuitka_bool tmp_and_right_value_8;
            PyObject *tmp_called_instance_8;
            PyObject *tmp_source_name_15;
            PyObject *tmp_call_result_4;
            int tmp_truth_name_1;
            PyObject *tmp_compexpr_left_12;
            PyObject *tmp_compexpr_right_12;
            PyObject *tmp_called_instance_9;
            PyObject *tmp_source_name_16;
            CHECK_OBJECT(par_parent);
            tmp_source_name_15 = par_parent;
            tmp_called_instance_8 = LOOKUP_ATTRIBUTE(tmp_source_name_15, const_str_plain_pass_sav);
            if (tmp_called_instance_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 688;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            frame_1bf6d1030b75188bd6a8b51e170fc4f1->m_frame.f_lineno = 688;
            tmp_call_result_4 = CALL_METHOD_NO_ARGS(tmp_called_instance_8, const_str_plain_get_active);
            Py_DECREF(tmp_called_instance_8);
            if (tmp_call_result_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 688;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_4);
            if (tmp_truth_name_1 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_call_result_4);

                exception_lineno = 688;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_and_left_value_8 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF(tmp_call_result_4);
            tmp_and_left_truth_8 = tmp_and_left_value_8 == NUITKA_BOOL_TRUE ? 1 : 0;
            if (tmp_and_left_truth_8 == 1) {
                goto and_right_8;
            } else {
                goto and_left_8;
            }
            and_right_8:;
            CHECK_OBJECT(par_parent);
            tmp_source_name_16 = par_parent;
            tmp_called_instance_9 = LOOKUP_ATTRIBUTE(tmp_source_name_16, const_str_plain_drive_menu);
            if (tmp_called_instance_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 688;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            frame_1bf6d1030b75188bd6a8b51e170fc4f1->m_frame.f_lineno = 688;
            tmp_compexpr_left_12 = CALL_METHOD_NO_ARGS(tmp_called_instance_9, const_str_plain_get_active);
            Py_DECREF(tmp_called_instance_9);
            if (tmp_compexpr_left_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 688;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_12 = const_int_0;
            tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_INT(tmp_compexpr_left_12, tmp_compexpr_right_12);
            Py_DECREF(tmp_compexpr_left_12);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 688;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_and_right_value_8 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_4 = tmp_and_right_value_8;
            goto and_end_8;
            and_left_8:;
            tmp_condition_result_4 = tmp_and_left_value_8;
            and_end_8:;
            if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
                goto branch_yes_4;
            } else {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_called_instance_10;
                PyObject *tmp_call_result_5;
                CHECK_OBJECT(par_parent);
                tmp_called_instance_10 = par_parent;
                frame_1bf6d1030b75188bd6a8b51e170fc4f1->m_frame.f_lineno = 689;
                tmp_call_result_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_10, const_str_plain_msg_err, &PyTuple_GET_ITEM(const_tuple_str_digest_65f1ca3cc21751516d4508974112f1bb_tuple, 0));

                if (tmp_call_result_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 689;
                    type_description_1 = "oooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_5);
            }
            tmp_return_value = Py_None;
            Py_INCREF(tmp_return_value);
            goto frame_return_exit_1;
            branch_no_4:;
        }
        branch_no_3:;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_11;
        PyObject *tmp_source_name_17;
        CHECK_OBJECT(par_parent);
        tmp_source_name_17 = par_parent;
        tmp_called_instance_11 = LOOKUP_ATTRIBUTE(tmp_source_name_17, const_str_plain_dev_select);
        if (tmp_called_instance_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 692;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_1bf6d1030b75188bd6a8b51e170fc4f1->m_frame.f_lineno = 692;
        tmp_assign_source_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_11, const_str_plain_get_active);
        Py_DECREF(tmp_called_instance_11);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 692;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_index == NULL);
        var_index = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_18;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_parent);
        tmp_source_name_18 = par_parent;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_18, const_str_plain_devs_list);
        if (tmp_subscribed_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 693;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_index);
        tmp_subscript_name_1 = var_index;
        tmp_assattr_name_1 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
        Py_DECREF(tmp_subscribed_name_1);
        if (tmp_assattr_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 693;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_parent);
        tmp_assattr_target_1 = par_parent;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_devname, tmp_assattr_name_1);
        Py_DECREF(tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 693;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_12;
        PyObject *tmp_call_result_6;
        CHECK_OBJECT(par_parent);
        tmp_called_instance_12 = par_parent;
        frame_1bf6d1030b75188bd6a8b51e170fc4f1->m_frame.f_lineno = 695;
        tmp_call_result_6 = CALL_METHOD_NO_ARGS(tmp_called_instance_12, const_str_plain_start_spin);
        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 695;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_6);
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_19;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_source_name_20;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_tuple_element_1;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_threading);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_threading);
        }

        if (tmp_mvar_value_3 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 661 ], 38, 0);
            exception_tb = NULL;

            exception_lineno = 696;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_19 = tmp_mvar_value_3;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_19, const_str_plain_Thread);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 696;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_runthread);

        if (unlikely(tmp_mvar_value_4 == NULL)) {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_runthread);
        }

        if (tmp_mvar_value_4 == NULL) {
            Py_DECREF(tmp_called_name_2);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 1304 ], 38, 0);
            exception_tb = NULL;

            exception_lineno = 696;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_20 = tmp_mvar_value_4;
        tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_source_name_20, const_str_plain_rt_openLog);
        if (tmp_dict_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 696;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = const_str_plain_target;
        tmp_kw_name_1 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1);
        Py_DECREF(tmp_dict_value_1);
        assert(!(tmp_res != 0));
        CHECK_OBJECT(par_parent);
        tmp_tuple_element_1 = par_parent;
        tmp_dict_value_2 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_dict_value_2, 0, tmp_tuple_element_1);
        CHECK_OBJECT(var_index);
        tmp_tuple_element_1 = var_index;
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_dict_value_2, 1, tmp_tuple_element_1);
        tmp_dict_key_2 = const_str_plain_args;
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2);
        Py_DECREF(tmp_dict_value_2);
        assert(!(tmp_res != 0));
        frame_1bf6d1030b75188bd6a8b51e170fc4f1->m_frame.f_lineno = 696;
        tmp_assign_source_3 = CALL_FUNCTION_WITH_KEYARGS(tmp_called_name_2, tmp_kw_name_1);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_kw_name_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 696;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_t == NULL);
        var_t = tmp_assign_source_3;
    }
    {
        PyObject *tmp_called_instance_13;
        PyObject *tmp_call_result_7;
        CHECK_OBJECT(var_t);
        tmp_called_instance_13 = var_t;
        frame_1bf6d1030b75188bd6a8b51e170fc4f1->m_frame.f_lineno = 697;
        tmp_call_result_7 = CALL_METHOD_NO_ARGS(tmp_called_instance_13, const_str_plain_start);
        if (tmp_call_result_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 697;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_7);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1bf6d1030b75188bd6a8b51e170fc4f1);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_1bf6d1030b75188bd6a8b51e170fc4f1);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1bf6d1030b75188bd6a8b51e170fc4f1);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1bf6d1030b75188bd6a8b51e170fc4f1, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_1bf6d1030b75188bd6a8b51e170fc4f1->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1bf6d1030b75188bd6a8b51e170fc4f1, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1bf6d1030b75188bd6a8b51e170fc4f1,
        type_description_1,
        par_button,
        par_parent,
        par_args,
        var_pw_strip,
        var_index,
        var_t
    );


    // Release cached frame.
    if (frame_1bf6d1030b75188bd6a8b51e170fc4f1 == cache_frame_1bf6d1030b75188bd6a8b51e170fc4f1) {
        Py_DECREF(frame_1bf6d1030b75188bd6a8b51e170fc4f1);
    }
    cache_frame_1bf6d1030b75188bd6a8b51e170fc4f1 = NULL;

    assertFrameObject(frame_1bf6d1030b75188bd6a8b51e170fc4f1);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_16_openLog);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_pw_strip);
    Py_DECREF(var_pw_strip);
    var_pw_strip = NULL;

    Py_XDECREF(var_index);
    var_index = NULL;

    Py_XDECREF(var_t);
    var_t = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_pw_strip);
    var_pw_strip = NULL;

    Py_XDECREF(var_index);
    var_index = NULL;

    Py_XDECREF(var_t);
    var_t = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_16_openLog);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_17___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_parent = python_pars[1];
    PyObject *var_cell = NULL;
    PyObject *var_e = NULL;
    PyObject *var_i = NULL;
    PyObject *var_lsOpal = NULL;
    PyObject *var_tcgEntries = NULL;
    PyObject *var_vbox = NULL;
    PyObject *var_tvOpal = NULL;
    PyObject *var_scrolledWin = NULL;
    PyObject *var_col = NULL;
    PyObject *var_columns = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    struct Nuitka_FrameObject *frame_9386c7ff5d3ff7b83c8cf305e4c392d8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_9386c7ff5d3ff7b83c8cf305e4c392d8 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = LIST_COPY(const_list_71892e6d79835f869b13c1149c962f23_list);
        assert(var_columns == NULL);
        var_columns = tmp_assign_source_1;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_9386c7ff5d3ff7b83c8cf305e4c392d8, codeobj_9386c7ff5d3ff7b83c8cf305e4c392d8, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_9386c7ff5d3ff7b83c8cf305e4c392d8 = cache_frame_9386c7ff5d3ff7b83c8cf305e4c392d8;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9386c7ff5d3ff7b83c8cf305e4c392d8);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9386c7ff5d3ff7b83c8cf305e4c392d8) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_3;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 702;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_1;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_Dialog);
        if (tmp_source_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain___init__);
        Py_DECREF(tmp_source_name_1);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_args_element_name_1 = par_self;
        tmp_args_element_name_2 = const_str_digest_8cd03e5f4b0b4910e2f581e48ffc988b;
        CHECK_OBJECT(par_parent);
        tmp_args_element_name_3 = par_parent;
        tmp_args_element_name_4 = const_int_0;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_2 == NULL) {
            Py_DECREF(tmp_called_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 702;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_2;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_STOCK_CLOSE);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 702;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_5 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_args_element_name_5, 0, tmp_tuple_element_1);
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_3 == NULL) {
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_5);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 702;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_3;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_RESPONSE_CLOSE);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_5);

            exception_lineno = 702;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_args_element_name_5, 1, tmp_tuple_element_1);
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 702;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS5(tmp_called_name_1, call_args);
        }

        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_5);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 703;
        tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_set_border_width, &PyTuple_GET_ITEM(const_tuple_int_pos_10_tuple, 0));

        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 703;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT(par_self);
        tmp_called_instance_2 = par_self;
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 704;
        tmp_call_result_3 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_2, const_str_plain_set_default_size, &PyTuple_GET_ITEM(const_tuple_int_pos_500_int_pos_500_tuple, 0));

        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 704;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_5;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_call_result_4;
        int tmp_truth_name_1;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

        if (unlikely(tmp_mvar_value_4 == NULL)) {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
        }

        if (tmp_mvar_value_4 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
            exception_tb = NULL;

            exception_lineno = 705;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_5 = tmp_mvar_value_4;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_path);
        if (tmp_called_instance_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 705;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 705;
        tmp_call_result_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_3, const_str_plain_isfile, &PyTuple_GET_ITEM(const_tuple_str_digest_5cf6c02bf201b8ae03ca790b05911675_tuple, 0));

        Py_DECREF(tmp_called_instance_3);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 705;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_4);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_4);

            exception_lineno = 705;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_call_result_4);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_call_result_5;
            CHECK_OBJECT(par_self);
            tmp_called_instance_4 = par_self;
            frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 706;
            tmp_call_result_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_set_icon_from_file, &PyTuple_GET_ITEM(const_tuple_str_digest_5cf6c02bf201b8ae03ca790b05911675_tuple, 0));

            if (tmp_call_result_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 706;
                type_description_1 = "oooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_5);
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_5;
        CHECK_OBJECT(par_self);
        tmp_called_instance_5 = par_self;
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 707;
        tmp_assign_source_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_5, const_str_plain_get_content_area);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 707;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_vbox == NULL);
        var_vbox = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_6;
        PyObject *tmp_mvar_value_5;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_5 == NULL)) {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_5 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 708;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_6 = tmp_mvar_value_5;
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 708;
        tmp_assign_source_3 = CALL_METHOD_WITH_ARGS4(tmp_called_instance_6, const_str_plain_ListStore, &PyTuple_GET_ITEM(const_tuple_type_str_type_str_type_str_type_str_tuple, 0));

        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 708;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_lsOpal == NULL);
        var_lsOpal = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        tmp_assign_source_4 = PyList_New(0);
        assert(var_tcgEntries == NULL);
        var_tcgEntries = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_source_name_6;
        CHECK_OBJECT(par_parent);
        tmp_source_name_6 = par_parent;
        tmp_iter_arg_1 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_tcg_list);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 710;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_5 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 710;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_5;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_6 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_6 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooo";
                exception_lineno = 710;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_7 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_i;
            var_i = tmp_assign_source_7;
            Py_INCREF(var_i);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_7;
        PyObject *tmp_call_result_6;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_8;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_source_name_9;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_source_name_10;
        PyObject *tmp_subscript_name_3;
        PyObject *tmp_subscribed_name_4;
        PyObject *tmp_source_name_11;
        PyObject *tmp_subscript_name_4;
        CHECK_OBJECT(var_tcgEntries);
        tmp_source_name_7 = var_tcgEntries;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_append);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 711;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(par_parent);
        tmp_source_name_8 = par_parent;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_devs_list);
        if (tmp_subscribed_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 711;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_i);
        tmp_subscript_name_1 = var_i;
        tmp_tuple_element_2 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_1, tmp_subscript_name_1);
        Py_DECREF(tmp_subscribed_name_1);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 711;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_2;
        }
        tmp_args_element_name_6 = PyTuple_New(4);
        PyTuple_SET_ITEM(tmp_args_element_name_6, 0, tmp_tuple_element_2);
        CHECK_OBJECT(par_parent);
        tmp_source_name_9 = par_parent;
        tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_vendor_list);
        if (tmp_subscribed_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_args_element_name_6);

            exception_lineno = 711;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_i);
        tmp_subscript_name_2 = var_i;
        tmp_tuple_element_2 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_2, tmp_subscript_name_2);
        Py_DECREF(tmp_subscribed_name_2);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_args_element_name_6);

            exception_lineno = 711;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_2;
        }
        PyTuple_SET_ITEM(tmp_args_element_name_6, 1, tmp_tuple_element_2);
        CHECK_OBJECT(par_parent);
        tmp_source_name_10 = par_parent;
        tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_sn_list);
        if (tmp_subscribed_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_args_element_name_6);

            exception_lineno = 711;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_i);
        tmp_subscript_name_3 = var_i;
        tmp_tuple_element_2 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_3, tmp_subscript_name_3);
        Py_DECREF(tmp_subscribed_name_3);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_args_element_name_6);

            exception_lineno = 711;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_2;
        }
        PyTuple_SET_ITEM(tmp_args_element_name_6, 2, tmp_tuple_element_2);
        CHECK_OBJECT(par_parent);
        tmp_source_name_11 = par_parent;
        tmp_subscribed_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_opal_ver_list);
        if (tmp_subscribed_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_args_element_name_6);

            exception_lineno = 711;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_i);
        tmp_subscript_name_4 = var_i;
        tmp_tuple_element_2 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_4, tmp_subscript_name_4);
        Py_DECREF(tmp_subscribed_name_4);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_args_element_name_6);

            exception_lineno = 711;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_2;
        }
        PyTuple_SET_ITEM(tmp_args_element_name_6, 3, tmp_tuple_element_2);
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 711;
        tmp_call_result_6 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_6);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_6);
        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 711;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_6);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 710;
        type_description_1 = "oooooooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT(var_tcgEntries);
        tmp_iter_arg_2 = var_tcgEntries;
        tmp_assign_source_8 = MAKE_ITERATOR(tmp_iter_arg_2);
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 713;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_2__for_iterator == NULL);
        tmp_for_loop_2__for_iterator = tmp_assign_source_8;
    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT(tmp_for_loop_2__for_iterator);
        tmp_next_source_2 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_9 = ITERATOR_NEXT(tmp_next_source_2);
        if (tmp_assign_source_9 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_2;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooo";
                exception_lineno = 713;
                goto try_except_handler_3;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_9;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT(tmp_for_loop_2__iter_value);
        tmp_assign_source_10 = tmp_for_loop_2__iter_value;
        {
            PyObject *old = var_e;
            var_e = tmp_assign_source_10;
            Py_INCREF(var_e);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_7;
        PyObject *tmp_call_result_7;
        PyObject *tmp_args_element_name_7;
        CHECK_OBJECT(var_lsOpal);
        tmp_called_instance_7 = var_lsOpal;
        CHECK_OBJECT(var_e);
        tmp_args_element_name_7 = var_e;
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 714;
        {
            PyObject *call_args[] = {tmp_args_element_name_7};
            tmp_call_result_7 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_7, const_str_plain_append, call_args);
        }

        if (tmp_call_result_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 714;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_3;
        }
        Py_DECREF(tmp_call_result_7);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 713;
        type_description_1 = "oooooooooooo";
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_2__iter_value);
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_2__for_iterator);
    Py_DECREF(tmp_for_loop_2__for_iterator);
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF(tmp_for_loop_2__iter_value);
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_2__for_iterator);
    Py_DECREF(tmp_for_loop_2__for_iterator);
    tmp_for_loop_2__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_12;
        PyObject *tmp_mvar_value_6;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_6 == NULL)) {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_6 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 716;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_12 = tmp_mvar_value_6;
        tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_TreeView);
        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 716;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_lsOpal);
        tmp_dict_value_1 = var_lsOpal;
        tmp_dict_key_1 = const_str_plain_model;
        tmp_kw_name_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 716;
        tmp_assign_source_11 = CALL_FUNCTION_WITH_KEYARGS(tmp_called_name_3, tmp_kw_name_1);
        Py_DECREF(tmp_called_name_3);
        Py_DECREF(tmp_kw_name_1);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 716;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_tvOpal == NULL);
        var_tvOpal = tmp_assign_source_11;
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_iter_arg_3;
        PyObject *tmp_range_arg_1;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT(var_columns);
        tmp_len_arg_1 = var_columns;
        tmp_range_arg_1 = BUILTIN_LEN(tmp_len_arg_1);
        assert(!(tmp_range_arg_1 == NULL));
        tmp_iter_arg_3 = BUILTIN_RANGE(tmp_range_arg_1);
        Py_DECREF(tmp_range_arg_1);
        if (tmp_iter_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 718;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_12 = MAKE_ITERATOR(tmp_iter_arg_3);
        Py_DECREF(tmp_iter_arg_3);
        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 718;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_3__for_iterator == NULL);
        tmp_for_loop_3__for_iterator = tmp_assign_source_12;
    }
    // Tried code:
    loop_start_3:;
    {
        PyObject *tmp_next_source_3;
        PyObject *tmp_assign_source_13;
        CHECK_OBJECT(tmp_for_loop_3__for_iterator);
        tmp_next_source_3 = tmp_for_loop_3__for_iterator;
        tmp_assign_source_13 = ITERATOR_NEXT(tmp_next_source_3);
        if (tmp_assign_source_13 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_3;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooooooo";
                exception_lineno = 718;
                goto try_except_handler_4;
            }
        }

        {
            PyObject *old = tmp_for_loop_3__iter_value;
            tmp_for_loop_3__iter_value = tmp_assign_source_13;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_14;
        CHECK_OBJECT(tmp_for_loop_3__iter_value);
        tmp_assign_source_14 = tmp_for_loop_3__iter_value;
        {
            PyObject *old = var_i;
            var_i = tmp_assign_source_14;
            Py_INCREF(var_i);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_called_instance_8;
        PyObject *tmp_mvar_value_7;
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_7 == NULL)) {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_7 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 719;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }

        tmp_called_instance_8 = tmp_mvar_value_7;
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 719;
        tmp_assign_source_15 = CALL_METHOD_NO_ARGS(tmp_called_instance_8, const_str_plain_CellRendererText);
        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 719;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = var_cell;
            var_cell = tmp_assign_source_15;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_called_name_4;
        PyObject *tmp_source_name_13;
        PyObject *tmp_mvar_value_8;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_subscribed_name_5;
        PyObject *tmp_subscript_name_5;
        PyObject *tmp_kw_name_2;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_8 == NULL)) {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_8 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 720;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }

        tmp_source_name_13 = tmp_mvar_value_8;
        tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain_TreeViewColumn);
        if (tmp_called_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 720;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT(var_columns);
        tmp_subscribed_name_5 = var_columns;
        CHECK_OBJECT(var_i);
        tmp_subscript_name_5 = var_i;
        tmp_tuple_element_3 = LOOKUP_SUBSCRIPT(tmp_subscribed_name_5, tmp_subscript_name_5);
        if (tmp_tuple_element_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_4);

            exception_lineno = 720;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }
        tmp_args_name_1 = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_args_name_1, 0, tmp_tuple_element_3);
        CHECK_OBJECT(var_cell);
        tmp_tuple_element_3 = var_cell;
        Py_INCREF(tmp_tuple_element_3);
        PyTuple_SET_ITEM(tmp_args_name_1, 1, tmp_tuple_element_3);
        CHECK_OBJECT(var_i);
        tmp_dict_value_2 = var_i;
        tmp_dict_key_2 = const_str_plain_text;
        tmp_kw_name_2 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2);
        assert(!(tmp_res != 0));
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 720;
        tmp_assign_source_16 = CALL_FUNCTION(tmp_called_name_4, tmp_args_name_1, tmp_kw_name_2);
        Py_DECREF(tmp_called_name_4);
        Py_DECREF(tmp_args_name_1);
        Py_DECREF(tmp_kw_name_2);
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 720;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = var_col;
            var_col = tmp_assign_source_16;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_5;
        PyObject *tmp_source_name_14;
        PyObject *tmp_call_result_8;
        PyObject *tmp_args_element_name_8;
        PyObject *tmp_source_name_15;
        PyObject *tmp_mvar_value_9;
        CHECK_OBJECT(var_col);
        tmp_source_name_14 = var_col;
        tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_14, const_str_plain_set_sort_column_id);
        if (tmp_called_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 721;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }
        tmp_mvar_value_9 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_9 == NULL)) {
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_9 == NULL) {
            Py_DECREF(tmp_called_name_5);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 721;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }

        tmp_source_name_15 = tmp_mvar_value_9;
        tmp_args_element_name_8 = LOOKUP_ATTRIBUTE(tmp_source_name_15, const_str_plain_SORT_ASCENDING);
        if (tmp_args_element_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_5);

            exception_lineno = 721;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 721;
        tmp_call_result_8 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_5, tmp_args_element_name_8);
        Py_DECREF(tmp_called_name_5);
        Py_DECREF(tmp_args_element_name_8);
        if (tmp_call_result_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 721;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }
        Py_DECREF(tmp_call_result_8);
    }
    {
        PyObject *tmp_called_instance_9;
        PyObject *tmp_call_result_9;
        CHECK_OBJECT(var_col);
        tmp_called_instance_9 = var_col;
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 722;
        tmp_call_result_9 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_9, const_str_plain_set_sort_indicator, &PyTuple_GET_ITEM(const_tuple_true_tuple, 0));

        if (tmp_call_result_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 722;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }
        Py_DECREF(tmp_call_result_9);
    }
    {
        PyObject *tmp_called_instance_10;
        PyObject *tmp_call_result_10;
        PyObject *tmp_args_element_name_9;
        CHECK_OBJECT(var_tvOpal);
        tmp_called_instance_10 = var_tvOpal;
        CHECK_OBJECT(var_col);
        tmp_args_element_name_9 = var_col;
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 723;
        {
            PyObject *call_args[] = {tmp_args_element_name_9};
            tmp_call_result_10 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_10, const_str_plain_append_column, call_args);
        }

        if (tmp_call_result_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 723;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }
        Py_DECREF(tmp_call_result_10);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 718;
        type_description_1 = "oooooooooooo";
        goto try_except_handler_4;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_3__iter_value);
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_3__for_iterator);
    Py_DECREF(tmp_for_loop_3__for_iterator);
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF(tmp_for_loop_3__iter_value);
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_3__for_iterator);
    Py_DECREF(tmp_for_loop_3__for_iterator);
    tmp_for_loop_3__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_called_instance_11;
        PyObject *tmp_mvar_value_10;
        tmp_mvar_value_10 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_10 == NULL)) {
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_10 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 725;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_11 = tmp_mvar_value_10;
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 725;
        tmp_assign_source_17 = CALL_METHOD_NO_ARGS(tmp_called_instance_11, const_str_plain_ScrolledWindow);
        if (tmp_assign_source_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 725;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_scrolledWin == NULL);
        var_scrolledWin = tmp_assign_source_17;
    }
    {
        PyObject *tmp_called_name_6;
        PyObject *tmp_source_name_16;
        PyObject *tmp_call_result_11;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_source_name_17;
        PyObject *tmp_mvar_value_11;
        PyObject *tmp_args_element_name_11;
        PyObject *tmp_source_name_18;
        PyObject *tmp_mvar_value_12;
        CHECK_OBJECT(var_scrolledWin);
        tmp_source_name_16 = var_scrolledWin;
        tmp_called_name_6 = LOOKUP_ATTRIBUTE(tmp_source_name_16, const_str_plain_set_policy);
        if (tmp_called_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 726;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_11 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_11 == NULL)) {
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_11 == NULL) {
            Py_DECREF(tmp_called_name_6);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 726;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_17 = tmp_mvar_value_11;
        tmp_args_element_name_10 = LOOKUP_ATTRIBUTE(tmp_source_name_17, const_str_plain_POLICY_NEVER);
        if (tmp_args_element_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_6);

            exception_lineno = 726;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_12 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_12 == NULL)) {
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_12 == NULL) {
            Py_DECREF(tmp_called_name_6);
            Py_DECREF(tmp_args_element_name_10);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 726;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_18 = tmp_mvar_value_12;
        tmp_args_element_name_11 = LOOKUP_ATTRIBUTE(tmp_source_name_18, const_str_plain_POLICY_AUTOMATIC);
        if (tmp_args_element_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_6);
            Py_DECREF(tmp_args_element_name_10);

            exception_lineno = 726;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 726;
        {
            PyObject *call_args[] = {tmp_args_element_name_10, tmp_args_element_name_11};
            tmp_call_result_11 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_6, call_args);
        }

        Py_DECREF(tmp_called_name_6);
        Py_DECREF(tmp_args_element_name_10);
        Py_DECREF(tmp_args_element_name_11);
        if (tmp_call_result_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 726;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_11);
    }
    {
        PyObject *tmp_called_instance_12;
        PyObject *tmp_call_result_12;
        PyObject *tmp_args_element_name_12;
        CHECK_OBJECT(var_scrolledWin);
        tmp_called_instance_12 = var_scrolledWin;
        CHECK_OBJECT(var_tvOpal);
        tmp_args_element_name_12 = var_tvOpal;
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 727;
        {
            PyObject *call_args[] = {tmp_args_element_name_12};
            tmp_call_result_12 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_12, const_str_plain_add_with_viewport, call_args);
        }

        if (tmp_call_result_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 727;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_12);
    }
    {
        PyObject *tmp_called_instance_13;
        PyObject *tmp_call_result_13;
        PyObject *tmp_args_element_name_13;
        CHECK_OBJECT(var_vbox);
        tmp_called_instance_13 = var_vbox;
        CHECK_OBJECT(var_scrolledWin);
        tmp_args_element_name_13 = var_scrolledWin;
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 729;
        {
            PyObject *call_args[] = {tmp_args_element_name_13};
            tmp_call_result_13 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_13, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 729;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_13);
    }
    {
        PyObject *tmp_called_instance_14;
        PyObject *tmp_call_result_14;
        CHECK_OBJECT(par_self);
        tmp_called_instance_14 = par_self;
        frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame.f_lineno = 730;
        tmp_call_result_14 = CALL_METHOD_NO_ARGS(tmp_called_instance_14, const_str_plain_show_all);
        if (tmp_call_result_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 730;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_14);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9386c7ff5d3ff7b83c8cf305e4c392d8);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9386c7ff5d3ff7b83c8cf305e4c392d8);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9386c7ff5d3ff7b83c8cf305e4c392d8, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_9386c7ff5d3ff7b83c8cf305e4c392d8->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9386c7ff5d3ff7b83c8cf305e4c392d8, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9386c7ff5d3ff7b83c8cf305e4c392d8,
        type_description_1,
        par_self,
        par_parent,
        var_cell,
        var_e,
        var_i,
        var_lsOpal,
        var_tcgEntries,
        var_vbox,
        var_tvOpal,
        var_scrolledWin,
        var_col,
        var_columns
    );


    // Release cached frame.
    if (frame_9386c7ff5d3ff7b83c8cf305e4c392d8 == cache_frame_9386c7ff5d3ff7b83c8cf305e4c392d8) {
        Py_DECREF(frame_9386c7ff5d3ff7b83c8cf305e4c392d8);
    }
    cache_frame_9386c7ff5d3ff7b83c8cf305e4c392d8 = NULL;

    assertFrameObject(frame_9386c7ff5d3ff7b83c8cf305e4c392d8);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_17___init__);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_cell);
    var_cell = NULL;

    Py_XDECREF(var_e);
    var_e = NULL;

    Py_XDECREF(var_i);
    var_i = NULL;

    CHECK_OBJECT((PyObject *)var_lsOpal);
    Py_DECREF(var_lsOpal);
    var_lsOpal = NULL;

    CHECK_OBJECT((PyObject *)var_tcgEntries);
    Py_DECREF(var_tcgEntries);
    var_tcgEntries = NULL;

    CHECK_OBJECT((PyObject *)var_vbox);
    Py_DECREF(var_vbox);
    var_vbox = NULL;

    CHECK_OBJECT((PyObject *)var_tvOpal);
    Py_DECREF(var_tvOpal);
    var_tvOpal = NULL;

    CHECK_OBJECT((PyObject *)var_scrolledWin);
    Py_DECREF(var_scrolledWin);
    var_scrolledWin = NULL;

    Py_XDECREF(var_col);
    var_col = NULL;

    CHECK_OBJECT((PyObject *)var_columns);
    Py_DECREF(var_columns);
    var_columns = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_cell);
    var_cell = NULL;

    Py_XDECREF(var_e);
    var_e = NULL;

    Py_XDECREF(var_i);
    var_i = NULL;

    Py_XDECREF(var_lsOpal);
    var_lsOpal = NULL;

    Py_XDECREF(var_tcgEntries);
    var_tcgEntries = NULL;

    Py_XDECREF(var_vbox);
    var_vbox = NULL;

    Py_XDECREF(var_tvOpal);
    var_tvOpal = NULL;

    Py_XDECREF(var_scrolledWin);
    var_scrolledWin = NULL;

    Py_XDECREF(var_col);
    var_col = NULL;

    CHECK_OBJECT((PyObject *)var_columns);
    Py_DECREF(var_columns);
    var_columns = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_17___init__);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_18_openOpal(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_button = python_pars[0];
    PyObject *par_parent = python_pars[1];
    PyObject *par_args = python_pars[2];
    PyObject *var_tcgWin = NULL;
    struct Nuitka_FrameObject *frame_c5c5562be75f922837dddad4bb032dfe;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_c5c5562be75f922837dddad4bb032dfe = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_c5c5562be75f922837dddad4bb032dfe, codeobj_c5c5562be75f922837dddad4bb032dfe, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_c5c5562be75f922837dddad4bb032dfe = cache_frame_c5c5562be75f922837dddad4bb032dfe;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_c5c5562be75f922837dddad4bb032dfe);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_c5c5562be75f922837dddad4bb032dfe) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_verify);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_verify);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 236 ], 35, 0);
            exception_tb = NULL;

            exception_lineno = 734;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_parent);
        tmp_args_element_name_1 = par_parent;
        frame_c5c5562be75f922837dddad4bb032dfe->m_frame.f_lineno = 734;
        {
            PyObject *call_args[] = {tmp_args_element_name_1};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_licCheck, call_args);
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 734;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_OpalDialog);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_OpalDialog);
        }

        if (tmp_mvar_value_2 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 1451 ], 39, 0);
            exception_tb = NULL;

            exception_lineno = 735;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_2;
        CHECK_OBJECT(par_parent);
        tmp_args_element_name_2 = par_parent;
        frame_c5c5562be75f922837dddad4bb032dfe->m_frame.f_lineno = 735;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_2);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 735;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_tcgWin == NULL);
        var_tcgWin = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(var_tcgWin);
        tmp_called_instance_2 = var_tcgWin;
        frame_c5c5562be75f922837dddad4bb032dfe->m_frame.f_lineno = 736;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_run);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 736;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT(var_tcgWin);
        tmp_called_instance_3 = var_tcgWin;
        frame_c5c5562be75f922837dddad4bb032dfe->m_frame.f_lineno = 738;
        tmp_call_result_3 = CALL_METHOD_NO_ARGS(tmp_called_instance_3, const_str_plain_destroy);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 738;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c5c5562be75f922837dddad4bb032dfe);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c5c5562be75f922837dddad4bb032dfe);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c5c5562be75f922837dddad4bb032dfe, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_c5c5562be75f922837dddad4bb032dfe->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c5c5562be75f922837dddad4bb032dfe, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c5c5562be75f922837dddad4bb032dfe,
        type_description_1,
        par_button,
        par_parent,
        par_args,
        var_tcgWin
    );


    // Release cached frame.
    if (frame_c5c5562be75f922837dddad4bb032dfe == cache_frame_c5c5562be75f922837dddad4bb032dfe) {
        Py_DECREF(frame_c5c5562be75f922837dddad4bb032dfe);
    }
    cache_frame_c5c5562be75f922837dddad4bb032dfe = NULL;

    assertFrameObject(frame_c5c5562be75f922837dddad4bb032dfe);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_18_openOpal);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_tcgWin);
    Py_DECREF(var_tcgWin);
    var_tcgWin = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_tcgWin);
    var_tcgWin = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_18_openOpal);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_19___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = PyCell_NEW1(python_pars[0]);
    struct Nuitka_CellObject *par_parent = PyCell_NEW1(python_pars[1]);
    PyObject *var_box = NULL;
    PyObject *var_usb_instr = NULL;
    PyObject *var_usb_label = NULL;
    PyObject *var_t1 = NULL;
    PyObject *var_button_box = NULL;
    struct Nuitka_CellObject *var_cleanup = PyCell_EMPTY();
    PyObject *var_t1_run = NULL;
    struct Nuitka_FrameObject *frame_3d85e9441e1fca82b0664c8186011a57;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_3d85e9441e1fca82b0664c8186011a57 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_3d85e9441e1fca82b0664c8186011a57, codeobj_3d85e9441e1fca82b0664c8186011a57, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_3d85e9441e1fca82b0664c8186011a57 = cache_frame_3d85e9441e1fca82b0664c8186011a57;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_3d85e9441e1fca82b0664c8186011a57);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_3d85e9441e1fca82b0664c8186011a57) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_source_name_5;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_source_name_6;
        PyObject *tmp_mvar_value_5;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 742;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_1;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_Dialog);
        if (tmp_source_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 742;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain___init__);
        Py_DECREF(tmp_source_name_1);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 742;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_args_element_name_1 = PyCell_GET(par_self);
        tmp_args_element_name_2 = const_str_plain_USB;
        CHECK_OBJECT(PyCell_GET(par_parent));
        tmp_args_element_name_3 = PyCell_GET(par_parent);
        tmp_args_element_name_4 = const_int_0;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_2 == NULL) {
            Py_DECREF(tmp_called_name_1);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 742;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_2;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_STOCK_OK);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 742;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_5 = PyTuple_New(4);
        PyTuple_SET_ITEM(tmp_args_element_name_5, 0, tmp_tuple_element_1);
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_3 == NULL) {
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_5);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 742;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_3;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_RESPONSE_OK);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_5);

            exception_lineno = 742;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_args_element_name_5, 1, tmp_tuple_element_1);
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_4 == NULL)) {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_4 == NULL) {
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_5);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 742;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }

        tmp_source_name_5 = tmp_mvar_value_4;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_STOCK_CANCEL);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_5);

            exception_lineno = 742;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_args_element_name_5, 2, tmp_tuple_element_1);
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_5 == NULL)) {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_5 == NULL) {
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_5);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 742;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }

        tmp_source_name_6 = tmp_mvar_value_5;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_RESPONSE_CANCEL);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_5);

            exception_lineno = 742;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_args_element_name_5, 3, tmp_tuple_element_1);
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 742;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS5(tmp_called_name_1, call_args);
        }

        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_5);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 742;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_called_instance_1 = PyCell_GET(par_self);
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 744;
        tmp_call_result_2 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_1, const_str_plain_set_default_size, &PyTuple_GET_ITEM(const_tuple_int_pos_250_int_pos_250_tuple, 0));

        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 744;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_called_instance_2 = PyCell_GET(par_self);
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 746;
        tmp_call_result_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_set_border_width, &PyTuple_GET_ITEM(const_tuple_int_pos_10_tuple, 0));

        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 746;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_7;
        PyObject *tmp_mvar_value_6;
        PyObject *tmp_call_result_4;
        int tmp_truth_name_1;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

        if (unlikely(tmp_mvar_value_6 == NULL)) {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
        }

        if (tmp_mvar_value_6 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
            exception_tb = NULL;

            exception_lineno = 747;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }

        tmp_source_name_7 = tmp_mvar_value_6;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_path);
        if (tmp_called_instance_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 747;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 747;
        tmp_call_result_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_3, const_str_plain_isfile, &PyTuple_GET_ITEM(const_tuple_str_digest_5cf6c02bf201b8ae03ca790b05911675_tuple, 0));

        Py_DECREF(tmp_called_instance_3);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 747;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_4);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_4);

            exception_lineno = 747;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_call_result_4);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_call_result_5;
            CHECK_OBJECT(PyCell_GET(par_self));
            tmp_called_instance_4 = PyCell_GET(par_self);
            frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 748;
            tmp_call_result_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_set_icon_from_file, &PyTuple_GET_ITEM(const_tuple_str_digest_5cf6c02bf201b8ae03ca790b05911675_tuple, 0));

            if (tmp_call_result_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 748;
                type_description_1 = "ccoooooco";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_5);
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_5;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_called_instance_5 = PyCell_GET(par_self);
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 751;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_5, const_str_plain_get_content_area);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 751;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        assert(var_box == NULL);
        var_box = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_6;
        PyObject *tmp_mvar_value_7;
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_7 == NULL)) {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_7 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 753;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_6 = tmp_mvar_value_7;
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 753;
        tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_6, const_str_plain_Label, &PyTuple_GET_ITEM(const_tuple_str_digest_396785b3bb5921b9ef039f8972929669_tuple, 0));

        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 753;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        assert(var_usb_instr == NULL);
        var_usb_instr = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_called_instance_7;
        PyObject *tmp_mvar_value_8;
        PyObject *tmp_assattr_target_1;
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_8 == NULL)) {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_8 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 755;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_7 = tmp_mvar_value_8;
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 755;
        tmp_assattr_name_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_7, const_str_plain_Label, &PyTuple_GET_ITEM(const_tuple_str_digest_28f94c8a916c34a21195b86c62fa2251_tuple, 0));

        if (tmp_assattr_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 755;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_assattr_target_1 = PyCell_GET(par_self);
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_na_instr, tmp_assattr_name_1);
        Py_DECREF(tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 755;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_called_instance_8;
        PyObject *tmp_mvar_value_9;
        PyObject *tmp_assattr_target_2;
        tmp_mvar_value_9 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_9 == NULL)) {
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_9 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 757;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_8 = tmp_mvar_value_9;
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 757;
        tmp_assattr_name_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_8, const_str_plain_Label, &PyTuple_GET_ITEM(const_tuple_str_digest_698bed0bd915c630f96b59400935dc79_tuple, 0));

        if (tmp_assattr_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_assattr_target_2 = PyCell_GET(par_self);
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_wait_instr, tmp_assattr_name_2);
        Py_DECREF(tmp_assattr_name_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_name_3 = Py_None;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_assattr_target_3 = PyCell_GET(par_self);
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, const_str_plain_usb_menu, tmp_assattr_name_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 759;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_9;
        PyObject *tmp_mvar_value_10;
        tmp_mvar_value_10 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_10 == NULL)) {
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_10 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 760;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_9 = tmp_mvar_value_10;
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 760;
        tmp_assign_source_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_9, const_str_plain_Label, &PyTuple_GET_ITEM(const_tuple_str_plain_USB_tuple, 0));

        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 760;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        assert(var_usb_label == NULL);
        var_usb_label = tmp_assign_source_3;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_8;
        PyObject *tmp_mvar_value_11;
        PyObject *tmp_subscript_name_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_source_name_9;
        PyObject *tmp_mvar_value_12;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_source_name_10;
        PyObject *tmp_mvar_value_13;
        PyObject *tmp_subscript_name_3;
        tmp_mvar_value_11 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_11 == NULL)) {
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_11 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 762;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }

        tmp_source_name_8 = tmp_mvar_value_11;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_gtk_version);
        if (tmp_subscribed_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 762;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_pos_1;
        tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_1, tmp_subscript_name_1, 1);
        Py_DECREF(tmp_subscribed_name_1);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 762;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_int_pos_24;
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_INT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 762;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        tmp_mvar_value_12 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_12 == NULL)) {
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_12 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 763;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }

        tmp_source_name_9 = tmp_mvar_value_12;
        tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_gtk_version);
        if (tmp_subscribed_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 763;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_2 = const_int_pos_1;
        tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_2, tmp_subscript_name_2, 1);
        Py_DECREF(tmp_subscribed_name_2);
        if (tmp_compexpr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 763;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = const_int_pos_24;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        Py_DECREF(tmp_compexpr_left_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 763;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        tmp_mvar_value_13 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_13 == NULL)) {
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_13 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 763;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }

        tmp_source_name_10 = tmp_mvar_value_13;
        tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_gtk_version);
        if (tmp_subscribed_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 763;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_3 = const_int_pos_2;
        tmp_compexpr_left_3 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_3, tmp_subscript_name_3, 2);
        Py_DECREF(tmp_subscribed_name_3);
        if (tmp_compexpr_left_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 763;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_3 = const_int_pos_28;
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_INT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        Py_DECREF(tmp_compexpr_left_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 763;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_right_value_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_or_right_value_1 = tmp_and_left_value_1;
        and_end_1:;
        tmp_condition_result_2 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_2 = tmp_or_left_value_1;
        or_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assattr_name_4;
            PyObject *tmp_called_instance_10;
            PyObject *tmp_mvar_value_14;
            PyObject *tmp_assattr_target_4;
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_14 == NULL)) {
                tmp_mvar_value_14 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_14 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 764;
                type_description_1 = "ccoooooco";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_10 = tmp_mvar_value_14;
            frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 764;
            tmp_assattr_name_4 = CALL_METHOD_NO_ARGS(tmp_called_instance_10, const_str_plain_ComboBox);
            if (tmp_assattr_name_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 764;
                type_description_1 = "ccoooooco";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(PyCell_GET(par_self));
            tmp_assattr_target_4 = PyCell_GET(par_self);
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, const_str_plain_usb_menu, tmp_assattr_name_4);
            Py_DECREF(tmp_assattr_name_4);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 764;
                type_description_1 = "ccoooooco";
                goto frame_exception_exit_1;
            }
        }
        goto branch_end_2;
        branch_no_2:;
        {
            PyObject *tmp_assattr_name_5;
            PyObject *tmp_called_instance_11;
            PyObject *tmp_mvar_value_15;
            PyObject *tmp_assattr_target_5;
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_15 == NULL)) {
                tmp_mvar_value_15 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_15 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 766;
                type_description_1 = "ccoooooco";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_11 = tmp_mvar_value_15;
            frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 766;
            tmp_assattr_name_5 = CALL_METHOD_NO_ARGS(tmp_called_instance_11, const_str_plain_combo_box_new_text);
            if (tmp_assattr_name_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 766;
                type_description_1 = "ccoooooco";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(PyCell_GET(par_self));
            tmp_assattr_target_5 = PyCell_GET(par_self);
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_5, const_str_plain_usb_menu, tmp_assattr_name_5);
            Py_DECREF(tmp_assattr_name_5);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 766;
                type_description_1 = "ccoooooco";
                goto frame_exception_exit_1;
            }
        }
        branch_end_2:;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_instance_12;
        PyObject *tmp_mvar_value_16;
        tmp_mvar_value_16 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_16 == NULL)) {
            tmp_mvar_value_16 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_16 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 768;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_12 = tmp_mvar_value_16;
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 768;
        tmp_assign_source_4 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_12, const_str_plain_HBox, &PyTuple_GET_ITEM(const_tuple_false_int_0_tuple, 0));

        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 768;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        assert(var_button_box == NULL);
        var_button_box = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assattr_name_6;
        PyObject *tmp_called_instance_13;
        PyObject *tmp_mvar_value_17;
        PyObject *tmp_assattr_target_6;
        tmp_mvar_value_17 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_17 == NULL)) {
            tmp_mvar_value_17 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_17 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 769;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_13 = tmp_mvar_value_17;
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 769;
        tmp_assattr_name_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_13, const_str_plain_Button, &PyTuple_GET_ITEM(const_tuple_str_plain_Rescan_tuple, 0));

        if (tmp_assattr_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 769;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_assattr_target_6 = PyCell_GET(par_self);
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_6, const_str_plain_refresh_button, tmp_assattr_name_6);
        Py_DECREF(tmp_assattr_name_6);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 769;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_11;
        PyObject *tmp_source_name_12;
        PyObject *tmp_call_result_6;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_source_name_13;
        PyObject *tmp_args_element_name_8;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_source_name_12 = PyCell_GET(par_self);
        tmp_source_name_11 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_refresh_button);
        if (tmp_source_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 770;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_connect);
        Py_DECREF(tmp_source_name_11);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 770;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_6 = const_str_plain_clicked;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_source_name_13 = PyCell_GET(par_self);
        tmp_args_element_name_7 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain_refreshUSB);
        if (tmp_args_element_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 770;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(par_parent));
        tmp_args_element_name_8 = PyCell_GET(par_parent);
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 770;
        {
            PyObject *call_args[] = {tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_8};
            tmp_call_result_6 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_2, call_args);
        }

        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_7);
        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 770;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_6);
    }
    {
        PyObject *tmp_called_instance_14;
        PyObject *tmp_source_name_14;
        PyObject *tmp_call_result_7;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_source_name_14 = PyCell_GET(par_self);
        tmp_called_instance_14 = LOOKUP_ATTRIBUTE(tmp_source_name_14, const_str_plain_refresh_button);
        if (tmp_called_instance_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 771;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 771;
        tmp_call_result_7 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_14, const_str_plain_set_sensitive, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

        Py_DECREF(tmp_called_instance_14);
        if (tmp_call_result_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 771;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_7);
    }
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_15;
        PyObject *tmp_call_result_8;
        PyObject *tmp_args_element_name_9;
        PyObject *tmp_source_name_16;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_args_element_name_11;
        CHECK_OBJECT(var_button_box);
        tmp_source_name_15 = var_button_box;
        tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_15, const_str_plain_pack_start);
        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 772;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_source_name_16 = PyCell_GET(par_self);
        tmp_args_element_name_9 = LOOKUP_ATTRIBUTE(tmp_source_name_16, const_str_plain_usb_menu);
        if (tmp_args_element_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_3);

            exception_lineno = 772;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_10 = Py_True;
        tmp_args_element_name_11 = Py_True;
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 772;
        {
            PyObject *call_args[] = {tmp_args_element_name_9, tmp_args_element_name_10, tmp_args_element_name_11};
            tmp_call_result_8 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_3, call_args);
        }

        Py_DECREF(tmp_called_name_3);
        Py_DECREF(tmp_args_element_name_9);
        if (tmp_call_result_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 772;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_8);
    }
    {
        PyObject *tmp_called_name_4;
        PyObject *tmp_source_name_17;
        PyObject *tmp_call_result_9;
        PyObject *tmp_args_element_name_12;
        PyObject *tmp_source_name_18;
        PyObject *tmp_args_element_name_13;
        PyObject *tmp_args_element_name_14;
        CHECK_OBJECT(var_button_box);
        tmp_source_name_17 = var_button_box;
        tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_17, const_str_plain_pack_start);
        if (tmp_called_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 773;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_source_name_18 = PyCell_GET(par_self);
        tmp_args_element_name_12 = LOOKUP_ATTRIBUTE(tmp_source_name_18, const_str_plain_refresh_button);
        if (tmp_args_element_name_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_4);

            exception_lineno = 773;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_13 = Py_False;
        tmp_args_element_name_14 = Py_False;
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 773;
        {
            PyObject *call_args[] = {tmp_args_element_name_12, tmp_args_element_name_13, tmp_args_element_name_14};
            tmp_call_result_9 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_4, call_args);
        }

        Py_DECREF(tmp_called_name_4);
        Py_DECREF(tmp_args_element_name_12);
        if (tmp_call_result_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 773;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_9);
    }
    {
        PyObject *tmp_assign_source_5;
        tmp_assign_source_5 = MAKE_FUNCTION_dialogs$$$function_19___init__$$$function_1_t1_run();

        ((struct Nuitka_FunctionObject *)tmp_assign_source_5)->m_closure[0] = var_cleanup;
        Py_INCREF(((struct Nuitka_FunctionObject *)tmp_assign_source_5)->m_closure[0]);
        ((struct Nuitka_FunctionObject *)tmp_assign_source_5)->m_closure[1] = par_parent;
        Py_INCREF(((struct Nuitka_FunctionObject *)tmp_assign_source_5)->m_closure[1]);


        assert(var_t1_run == NULL);
        var_t1_run = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        tmp_assign_source_6 = MAKE_FUNCTION_dialogs$$$function_19___init__$$$function_2_cleanup();

        ((struct Nuitka_FunctionObject *)tmp_assign_source_6)->m_closure[0] = par_parent;
        Py_INCREF(((struct Nuitka_FunctionObject *)tmp_assign_source_6)->m_closure[0]);
        ((struct Nuitka_FunctionObject *)tmp_assign_source_6)->m_closure[1] = par_self;
        Py_INCREF(((struct Nuitka_FunctionObject *)tmp_assign_source_6)->m_closure[1]);


        assert(PyCell_GET(var_cleanup) == NULL);
        PyCell_SET(var_cleanup, tmp_assign_source_6);

    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_name_5;
        PyObject *tmp_source_name_19;
        PyObject *tmp_mvar_value_18;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        tmp_mvar_value_18 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_threading);

        if (unlikely(tmp_mvar_value_18 == NULL)) {
            tmp_mvar_value_18 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_threading);
        }

        if (tmp_mvar_value_18 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 661 ], 38, 0);
            exception_tb = NULL;

            exception_lineno = 844;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }

        tmp_source_name_19 = tmp_mvar_value_18;
        tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_19, const_str_plain_Thread);
        if (tmp_called_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 844;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_t1_run);
        tmp_dict_value_1 = var_t1_run;
        tmp_dict_key_1 = const_str_plain_target;
        tmp_kw_name_1 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        tmp_dict_value_2 = const_tuple_empty;
        tmp_dict_key_2 = const_str_plain_args;
        tmp_res = PyDict_SetItem(tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2);
        assert(!(tmp_res != 0));
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 844;
        tmp_assign_source_7 = CALL_FUNCTION_WITH_KEYARGS(tmp_called_name_5, tmp_kw_name_1);
        Py_DECREF(tmp_called_name_5);
        Py_DECREF(tmp_kw_name_1);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 844;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        assert(var_t1 == NULL);
        var_t1 = tmp_assign_source_7;
    }
    {
        PyObject *tmp_called_instance_15;
        PyObject *tmp_call_result_10;
        CHECK_OBJECT(var_t1);
        tmp_called_instance_15 = var_t1;
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 845;
        tmp_call_result_10 = CALL_METHOD_NO_ARGS(tmp_called_instance_15, const_str_plain_start);
        if (tmp_call_result_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 845;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_10);
    }
    {
        PyObject *tmp_called_instance_16;
        PyObject *tmp_call_result_11;
        PyObject *tmp_args_element_name_15;
        PyObject *tmp_args_element_name_16;
        PyObject *tmp_args_element_name_17;
        CHECK_OBJECT(var_box);
        tmp_called_instance_16 = var_box;
        CHECK_OBJECT(var_usb_instr);
        tmp_args_element_name_15 = var_usb_instr;
        tmp_args_element_name_16 = Py_False;
        tmp_args_element_name_17 = Py_False;
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 847;
        {
            PyObject *call_args[] = {tmp_args_element_name_15, tmp_args_element_name_16, tmp_args_element_name_17};
            tmp_call_result_11 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_16, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 847;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_11);
    }
    {
        PyObject *tmp_called_instance_17;
        PyObject *tmp_call_result_12;
        PyObject *tmp_args_element_name_18;
        PyObject *tmp_args_element_name_19;
        PyObject *tmp_args_element_name_20;
        CHECK_OBJECT(var_box);
        tmp_called_instance_17 = var_box;
        CHECK_OBJECT(var_button_box);
        tmp_args_element_name_18 = var_button_box;
        tmp_args_element_name_19 = Py_False;
        tmp_args_element_name_20 = Py_False;
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 850;
        {
            PyObject *call_args[] = {tmp_args_element_name_18, tmp_args_element_name_19, tmp_args_element_name_20};
            tmp_call_result_12 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_17, const_str_plain_pack_end, call_args);
        }

        if (tmp_call_result_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 850;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_12);
    }
    {
        PyObject *tmp_called_name_6;
        PyObject *tmp_source_name_20;
        PyObject *tmp_call_result_13;
        PyObject *tmp_args_element_name_21;
        PyObject *tmp_source_name_21;
        PyObject *tmp_args_element_name_22;
        PyObject *tmp_args_element_name_23;
        CHECK_OBJECT(var_box);
        tmp_source_name_20 = var_box;
        tmp_called_name_6 = LOOKUP_ATTRIBUTE(tmp_source_name_20, const_str_plain_pack_end);
        if (tmp_called_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 851;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_source_name_21 = PyCell_GET(par_self);
        tmp_args_element_name_21 = LOOKUP_ATTRIBUTE(tmp_source_name_21, const_str_plain_na_instr);
        if (tmp_args_element_name_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_6);

            exception_lineno = 851;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_22 = Py_False;
        tmp_args_element_name_23 = Py_False;
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 851;
        {
            PyObject *call_args[] = {tmp_args_element_name_21, tmp_args_element_name_22, tmp_args_element_name_23};
            tmp_call_result_13 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_6, call_args);
        }

        Py_DECREF(tmp_called_name_6);
        Py_DECREF(tmp_args_element_name_21);
        if (tmp_call_result_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 851;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_13);
    }
    {
        PyObject *tmp_called_name_7;
        PyObject *tmp_source_name_22;
        PyObject *tmp_call_result_14;
        PyObject *tmp_args_element_name_24;
        PyObject *tmp_source_name_23;
        PyObject *tmp_args_element_name_25;
        PyObject *tmp_args_element_name_26;
        CHECK_OBJECT(var_box);
        tmp_source_name_22 = var_box;
        tmp_called_name_7 = LOOKUP_ATTRIBUTE(tmp_source_name_22, const_str_plain_pack_end);
        if (tmp_called_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 852;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_source_name_23 = PyCell_GET(par_self);
        tmp_args_element_name_24 = LOOKUP_ATTRIBUTE(tmp_source_name_23, const_str_plain_wait_instr);
        if (tmp_args_element_name_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_7);

            exception_lineno = 852;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_25 = Py_False;
        tmp_args_element_name_26 = Py_False;
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 852;
        {
            PyObject *call_args[] = {tmp_args_element_name_24, tmp_args_element_name_25, tmp_args_element_name_26};
            tmp_call_result_14 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_7, call_args);
        }

        Py_DECREF(tmp_called_name_7);
        Py_DECREF(tmp_args_element_name_24);
        if (tmp_call_result_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 852;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_14);
    }
    {
        PyObject *tmp_called_instance_18;
        PyObject *tmp_call_result_15;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_called_instance_18 = PyCell_GET(par_self);
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 854;
        tmp_call_result_15 = CALL_METHOD_NO_ARGS(tmp_called_instance_18, const_str_plain_show_all);
        if (tmp_call_result_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 854;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_15);
    }
    {
        PyObject *tmp_called_instance_19;
        PyObject *tmp_source_name_24;
        PyObject *tmp_call_result_16;
        CHECK_OBJECT(PyCell_GET(par_self));
        tmp_source_name_24 = PyCell_GET(par_self);
        tmp_called_instance_19 = LOOKUP_ATTRIBUTE(tmp_source_name_24, const_str_plain_na_instr);
        if (tmp_called_instance_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 858;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        frame_3d85e9441e1fca82b0664c8186011a57->m_frame.f_lineno = 858;
        tmp_call_result_16 = CALL_METHOD_NO_ARGS(tmp_called_instance_19, const_str_plain_hide);
        Py_DECREF(tmp_called_instance_19);
        if (tmp_call_result_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 858;
            type_description_1 = "ccoooooco";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_16);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3d85e9441e1fca82b0664c8186011a57);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3d85e9441e1fca82b0664c8186011a57);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_3d85e9441e1fca82b0664c8186011a57, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_3d85e9441e1fca82b0664c8186011a57->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_3d85e9441e1fca82b0664c8186011a57, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3d85e9441e1fca82b0664c8186011a57,
        type_description_1,
        par_self,
        par_parent,
        var_box,
        var_usb_instr,
        var_usb_label,
        var_t1,
        var_button_box,
        var_cleanup,
        var_t1_run
    );


    // Release cached frame.
    if (frame_3d85e9441e1fca82b0664c8186011a57 == cache_frame_3d85e9441e1fca82b0664c8186011a57) {
        Py_DECREF(frame_3d85e9441e1fca82b0664c8186011a57);
    }
    cache_frame_3d85e9441e1fca82b0664c8186011a57 = NULL;

    assertFrameObject(frame_3d85e9441e1fca82b0664c8186011a57);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_19___init__);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_box);
    Py_DECREF(var_box);
    var_box = NULL;

    CHECK_OBJECT((PyObject *)var_usb_instr);
    Py_DECREF(var_usb_instr);
    var_usb_instr = NULL;

    CHECK_OBJECT((PyObject *)var_usb_label);
    Py_DECREF(var_usb_label);
    var_usb_label = NULL;

    CHECK_OBJECT((PyObject *)var_t1);
    Py_DECREF(var_t1);
    var_t1 = NULL;

    CHECK_OBJECT((PyObject *)var_button_box);
    Py_DECREF(var_button_box);
    var_button_box = NULL;

    CHECK_OBJECT((PyObject *)var_cleanup);
    Py_DECREF(var_cleanup);
    var_cleanup = NULL;

    CHECK_OBJECT((PyObject *)var_t1_run);
    Py_DECREF(var_t1_run);
    var_t1_run = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_box);
    var_box = NULL;

    Py_XDECREF(var_usb_instr);
    var_usb_instr = NULL;

    Py_XDECREF(var_usb_label);
    var_usb_label = NULL;

    Py_XDECREF(var_t1);
    var_t1 = NULL;

    Py_XDECREF(var_button_box);
    var_button_box = NULL;

    CHECK_OBJECT((PyObject *)var_cleanup);
    Py_DECREF(var_cleanup);
    var_cleanup = NULL;

    Py_XDECREF(var_t1_run);
    var_t1_run = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_19___init__);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_19___init__$$$function_1_t1_run(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *var_type_a = NULL;
    PyObject *var_list_u = NULL;
    PyObject *var_rgx = NULL;
    PyObject *var_usb_new = NULL;
    PyObject *var_m = NULL;
    PyObject *var_r2 = NULL;
    PyObject *var_s = NULL;
    PyObject *var_u = NULL;
    PyObject *var_m2 = NULL;
    PyObject *var_m1 = NULL;
    PyObject *var_txt = NULL;
    PyObject *var_txt1 = NULL;
    PyObject *var_txt2 = NULL;
    PyObject *var_txt3 = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_21fd2959b99fe54a3447114bd6e97730;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_21fd2959b99fe54a3447114bd6e97730 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = PyList_New(0);
        assert(var_usb_new == NULL);
        var_usb_new = tmp_assign_source_1;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_21fd2959b99fe54a3447114bd6e97730, codeobj_21fd2959b99fe54a3447114bd6e97730, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_21fd2959b99fe54a3447114bd6e97730 = cache_frame_21fd2959b99fe54a3447114bd6e97730;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_21fd2959b99fe54a3447114bd6e97730);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_21fd2959b99fe54a3447114bd6e97730) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        if (PyCell_GET(self->m_closure[1]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "parent");
            exception_tb = NULL;

            exception_lineno = 779;
            type_description_1 = "cNoNooooNoocooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = PyCell_GET(self->m_closure[1]);
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_DEV_OS);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 779;
            type_description_1 = "cNoNooooNoocooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_str_plain_Windows;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 779;
            type_description_1 = "cNoNooooNoocooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_right_name_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

            if (unlikely(tmp_mvar_value_1 == NULL)) {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
            }

            if (tmp_mvar_value_1 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
                exception_tb = NULL;

                exception_lineno = 781;
                type_description_1 = "cNoNooooNoocooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_2 = tmp_mvar_value_1;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_popen);
            if (tmp_called_name_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 781;
                type_description_1 = "cNoNooooNoocooooooo";
                goto frame_exception_exit_1;
            }
            if (PyCell_GET(self->m_closure[1]) == NULL) {
                Py_DECREF(tmp_called_name_1);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "parent");
                exception_tb = NULL;

                exception_lineno = 781;
                type_description_1 = "cNoNooooNoocooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_3 = PyCell_GET(self->m_closure[1]);
            tmp_left_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_prefix);
            if (tmp_left_name_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_1);

                exception_lineno = 781;
                type_description_1 = "cNoNooooNoocooooooo";
                goto frame_exception_exit_1;
            }
            tmp_right_name_1 = const_str_digest_8c96842b8b2bfd9741967a12c4a512ae;
            tmp_args_element_name_1 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_1, tmp_right_name_1);
            Py_DECREF(tmp_left_name_1);
            if (tmp_args_element_name_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_1);

                exception_lineno = 781;
                type_description_1 = "cNoNooooNoocooooooo";
                goto frame_exception_exit_1;
            }
            frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 781;
            tmp_called_instance_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_1);
            if (tmp_called_instance_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 781;
                type_description_1 = "cNoNooooNoocooooooo";
                goto frame_exception_exit_1;
            }
            frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 781;
            tmp_assign_source_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_read);
            Py_DECREF(tmp_called_instance_1);
            if (tmp_assign_source_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 781;
                type_description_1 = "cNoNooooNoocooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_txt == NULL);
            var_txt = tmp_assign_source_2;
        }
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_called_instance_2;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_args_element_name_3;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

            if (unlikely(tmp_mvar_value_2 == NULL)) {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
            }

            if (tmp_mvar_value_2 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
                exception_tb = NULL;

                exception_lineno = 787;
                type_description_1 = "cNoNooooNoocooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_2 = tmp_mvar_value_2;
            tmp_args_element_name_2 = const_str_digest_4b8d3f96b43e55a1f0ce0c23563c4be0;
            CHECK_OBJECT(var_txt);
            tmp_args_element_name_3 = var_txt;
            frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 787;
            {
                PyObject *call_args[] = {tmp_args_element_name_2, tmp_args_element_name_3};
                tmp_assign_source_3 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_2, const_str_plain_findall, call_args);
            }

            if (tmp_assign_source_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 787;
                type_description_1 = "cNoNooooNoocooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_usb_new;
                assert(old != NULL);
                var_usb_new = tmp_assign_source_3;
                Py_DECREF(old);
            }

        }
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            PyObject *tmp_source_name_4;
            if (PyCell_GET(self->m_closure[1]) == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "parent");
                exception_tb = NULL;

                exception_lineno = 788;
                type_description_1 = "cNoNooooNoocooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_4 = PyCell_GET(self->m_closure[1]);
            tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_DEV_OS);
            if (tmp_compexpr_left_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 788;
                type_description_1 = "cNoNooooNoocooooooo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_2 = const_str_plain_Linux;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
            Py_DECREF(tmp_compexpr_left_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 788;
                type_description_1 = "cNoNooooNoocooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
                goto branch_yes_2;
            } else {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assign_source_4;
                PyObject *tmp_called_instance_3;
                PyObject *tmp_called_instance_4;
                PyObject *tmp_mvar_value_3;
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

                if (unlikely(tmp_mvar_value_3 == NULL)) {
                    tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
                }

                if (tmp_mvar_value_3 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
                    exception_tb = NULL;

                    exception_lineno = 789;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_4 = tmp_mvar_value_3;
                frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 789;
                tmp_called_instance_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_popen, &PyTuple_GET_ITEM(const_tuple_str_digest_0c8d3c6eed5d4373e00b3d74bc2f9bc8_tuple, 0));

                if (tmp_called_instance_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 789;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto frame_exception_exit_1;
                }
                frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 789;
                tmp_assign_source_4 = CALL_METHOD_NO_ARGS(tmp_called_instance_3, const_str_plain_read);
                Py_DECREF(tmp_called_instance_3);
                if (tmp_assign_source_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 789;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto frame_exception_exit_1;
                }
                assert(var_txt == NULL);
                var_txt = tmp_assign_source_4;
            }
            {
                PyObject *tmp_assign_source_5;
                PyObject *tmp_called_instance_5;
                PyObject *tmp_mvar_value_4;
                PyObject *tmp_args_element_name_4;
                PyObject *tmp_args_element_name_5;
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

                if (unlikely(tmp_mvar_value_4 == NULL)) {
                    tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
                }

                if (tmp_mvar_value_4 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
                    exception_tb = NULL;

                    exception_lineno = 791;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_5 = tmp_mvar_value_4;
                tmp_args_element_name_4 = const_str_digest_66dc380ed6bde77ae6e7bb85e234ea0d;
                CHECK_OBJECT(var_txt);
                tmp_args_element_name_5 = var_txt;
                frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 791;
                {
                    PyObject *call_args[] = {tmp_args_element_name_4, tmp_args_element_name_5};
                    tmp_assign_source_5 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_5, const_str_plain_findall, call_args);
                }

                if (tmp_assign_source_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 791;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto frame_exception_exit_1;
                }
                assert(var_list_u == NULL);
                var_list_u = tmp_assign_source_5;
            }
            {
                PyObject *tmp_assign_source_6;
                PyObject *tmp_iter_arg_1;
                CHECK_OBJECT(var_list_u);
                tmp_iter_arg_1 = var_list_u;
                tmp_assign_source_6 = MAKE_ITERATOR(tmp_iter_arg_1);
                if (tmp_assign_source_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 792;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto frame_exception_exit_1;
                }
                assert(tmp_for_loop_1__for_iterator == NULL);
                tmp_for_loop_1__for_iterator = tmp_assign_source_6;
            }
            // Tried code:
            loop_start_1:;
            {
                PyObject *tmp_next_source_1;
                PyObject *tmp_assign_source_7;
                CHECK_OBJECT(tmp_for_loop_1__for_iterator);
                tmp_next_source_1 = tmp_for_loop_1__for_iterator;
                tmp_assign_source_7 = ITERATOR_NEXT(tmp_next_source_1);
                if (tmp_assign_source_7 == NULL) {
                    if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                        goto loop_end_1;
                    } else {

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        type_description_1 = "cNoNooooNoocooooooo";
                        exception_lineno = 792;
                        goto try_except_handler_2;
                    }
                }

                {
                    PyObject *old = tmp_for_loop_1__iter_value;
                    tmp_for_loop_1__iter_value = tmp_assign_source_7;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_8;
                CHECK_OBJECT(tmp_for_loop_1__iter_value);
                tmp_assign_source_8 = tmp_for_loop_1__iter_value;
                {
                    PyObject *old = var_u;
                    var_u = tmp_assign_source_8;
                    Py_INCREF(var_u);
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_9;
                PyObject *tmp_called_instance_6;
                PyObject *tmp_called_name_2;
                PyObject *tmp_source_name_5;
                PyObject *tmp_mvar_value_5;
                PyObject *tmp_args_element_name_6;
                PyObject *tmp_left_name_2;
                PyObject *tmp_source_name_6;
                PyObject *tmp_right_name_2;
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

                if (unlikely(tmp_mvar_value_5 == NULL)) {
                    tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
                }

                if (tmp_mvar_value_5 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
                    exception_tb = NULL;

                    exception_lineno = 793;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto try_except_handler_2;
                }

                tmp_source_name_5 = tmp_mvar_value_5;
                tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_popen);
                if (tmp_called_name_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 793;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto try_except_handler_2;
                }
                if (PyCell_GET(self->m_closure[1]) == NULL) {
                    Py_DECREF(tmp_called_name_2);
                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "parent");
                    exception_tb = NULL;

                    exception_lineno = 793;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto try_except_handler_2;
                }

                tmp_source_name_6 = PyCell_GET(self->m_closure[1]);
                tmp_left_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_prefix);
                if (tmp_left_name_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_2);

                    exception_lineno = 793;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto try_except_handler_2;
                }
                tmp_right_name_2 = const_str_plain_mount;
                tmp_args_element_name_6 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_2, tmp_right_name_2);
                Py_DECREF(tmp_left_name_2);
                if (tmp_args_element_name_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_2);

                    exception_lineno = 793;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto try_except_handler_2;
                }
                frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 793;
                tmp_called_instance_6 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_6);
                Py_DECREF(tmp_called_name_2);
                Py_DECREF(tmp_args_element_name_6);
                if (tmp_called_instance_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 793;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto try_except_handler_2;
                }
                frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 793;
                tmp_assign_source_9 = CALL_METHOD_NO_ARGS(tmp_called_instance_6, const_str_plain_read);
                Py_DECREF(tmp_called_instance_6);
                if (tmp_assign_source_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 793;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto try_except_handler_2;
                }
                {
                    PyObject *old = var_txt1;
                    var_txt1 = tmp_assign_source_9;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_10;
                PyObject *tmp_called_instance_7;
                PyObject *tmp_mvar_value_6;
                PyObject *tmp_args_element_name_7;
                PyObject *tmp_args_element_name_8;
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

                if (unlikely(tmp_mvar_value_6 == NULL)) {
                    tmp_mvar_value_6 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
                }

                if (tmp_mvar_value_6 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
                    exception_tb = NULL;

                    exception_lineno = 794;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto try_except_handler_2;
                }

                tmp_called_instance_7 = tmp_mvar_value_6;
                CHECK_OBJECT(var_u);
                tmp_args_element_name_7 = var_u;
                CHECK_OBJECT(var_txt1);
                tmp_args_element_name_8 = var_txt1;
                frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 794;
                {
                    PyObject *call_args[] = {tmp_args_element_name_7, tmp_args_element_name_8};
                    tmp_assign_source_10 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_7, const_str_plain_search, call_args);
                }

                if (tmp_assign_source_10 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 794;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto try_except_handler_2;
                }
                {
                    PyObject *old = var_m;
                    var_m = tmp_assign_source_10;
                    Py_XDECREF(old);
                }

            }
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_operand_name_1;
                CHECK_OBJECT(var_m);
                tmp_operand_name_1 = var_m;
                tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 795;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto try_except_handler_2;
                }
                tmp_condition_result_3 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_3;
                } else {
                    goto branch_no_3;
                }
                branch_yes_3:;
                {
                    PyObject *tmp_assign_source_11;
                    PyObject *tmp_called_instance_8;
                    PyObject *tmp_called_name_3;
                    PyObject *tmp_source_name_7;
                    PyObject *tmp_mvar_value_7;
                    PyObject *tmp_args_element_name_9;
                    PyObject *tmp_left_name_3;
                    PyObject *tmp_source_name_8;
                    PyObject *tmp_right_name_3;
                    tmp_mvar_value_7 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

                    if (unlikely(tmp_mvar_value_7 == NULL)) {
                        tmp_mvar_value_7 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
                    }

                    if (tmp_mvar_value_7 == NULL) {

                        exception_type = PyExc_NameError;
                        Py_INCREF(exception_type);
                        exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
                        exception_tb = NULL;

                        exception_lineno = 796;
                        type_description_1 = "cNoNooooNoocooooooo";
                        goto try_except_handler_2;
                    }

                    tmp_source_name_7 = tmp_mvar_value_7;
                    tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_popen);
                    if (tmp_called_name_3 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 796;
                        type_description_1 = "cNoNooooNoocooooooo";
                        goto try_except_handler_2;
                    }
                    if (PyCell_GET(self->m_closure[1]) == NULL) {
                        Py_DECREF(tmp_called_name_3);
                        exception_type = PyExc_NameError;
                        Py_INCREF(exception_type);
                        exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "parent");
                        exception_tb = NULL;

                        exception_lineno = 796;
                        type_description_1 = "cNoNooooNoocooooooo";
                        goto try_except_handler_2;
                    }

                    tmp_source_name_8 = PyCell_GET(self->m_closure[1]);
                    tmp_left_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_prefix);
                    if (tmp_left_name_3 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_3);

                        exception_lineno = 796;
                        type_description_1 = "cNoNooooNoocooooooo";
                        goto try_except_handler_2;
                    }
                    tmp_right_name_3 = const_str_plain_blkid;
                    tmp_args_element_name_9 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_3, tmp_right_name_3);
                    Py_DECREF(tmp_left_name_3);
                    if (tmp_args_element_name_9 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_3);

                        exception_lineno = 796;
                        type_description_1 = "cNoNooooNoocooooooo";
                        goto try_except_handler_2;
                    }
                    frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 796;
                    tmp_called_instance_8 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_9);
                    Py_DECREF(tmp_called_name_3);
                    Py_DECREF(tmp_args_element_name_9);
                    if (tmp_called_instance_8 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 796;
                        type_description_1 = "cNoNooooNoocooooooo";
                        goto try_except_handler_2;
                    }
                    frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 796;
                    tmp_assign_source_11 = CALL_METHOD_NO_ARGS(tmp_called_instance_8, const_str_plain_read);
                    Py_DECREF(tmp_called_instance_8);
                    if (tmp_assign_source_11 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 796;
                        type_description_1 = "cNoNooooNoocooooooo";
                        goto try_except_handler_2;
                    }
                    {
                        PyObject *old = var_txt2;
                        var_txt2 = tmp_assign_source_11;
                        Py_XDECREF(old);
                    }

                }
                {
                    PyObject *tmp_assign_source_12;
                    PyObject *tmp_left_name_4;
                    PyObject *tmp_right_name_4;
                    CHECK_OBJECT(var_u);
                    tmp_left_name_4 = var_u;
                    tmp_right_name_4 = const_str_digest_2a99f2106e37159d649e36cd642454d7;
                    tmp_assign_source_12 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_4, tmp_right_name_4);
                    if (tmp_assign_source_12 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 797;
                        type_description_1 = "cNoNooooNoocooooooo";
                        goto try_except_handler_2;
                    }
                    {
                        PyObject *old = var_rgx;
                        var_rgx = tmp_assign_source_12;
                        Py_XDECREF(old);
                    }

                }
                {
                    PyObject *tmp_assign_source_13;
                    PyObject *tmp_called_instance_9;
                    PyObject *tmp_mvar_value_8;
                    PyObject *tmp_args_element_name_10;
                    PyObject *tmp_args_element_name_11;
                    tmp_mvar_value_8 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

                    if (unlikely(tmp_mvar_value_8 == NULL)) {
                        tmp_mvar_value_8 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
                    }

                    if (tmp_mvar_value_8 == NULL) {

                        exception_type = PyExc_NameError;
                        Py_INCREF(exception_type);
                        exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
                        exception_tb = NULL;

                        exception_lineno = 798;
                        type_description_1 = "cNoNooooNoocooooooo";
                        goto try_except_handler_2;
                    }

                    tmp_called_instance_9 = tmp_mvar_value_8;
                    CHECK_OBJECT(var_rgx);
                    tmp_args_element_name_10 = var_rgx;
                    CHECK_OBJECT(var_txt2);
                    tmp_args_element_name_11 = var_txt2;
                    frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 798;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_10, tmp_args_element_name_11};
                        tmp_assign_source_13 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_9, const_str_plain_search, call_args);
                    }

                    if (tmp_assign_source_13 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 798;
                        type_description_1 = "cNoNooooNoocooooooo";
                        goto try_except_handler_2;
                    }
                    {
                        PyObject *old = var_m1;
                        var_m1 = tmp_assign_source_13;
                        Py_XDECREF(old);
                    }

                }
                {
                    nuitka_bool tmp_condition_result_4;
                    int tmp_truth_name_1;
                    CHECK_OBJECT(var_m1);
                    tmp_truth_name_1 = CHECK_IF_TRUE(var_m1);
                    if (tmp_truth_name_1 == -1) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 799;
                        type_description_1 = "cNoNooooNoocooooooo";
                        goto try_except_handler_2;
                    }
                    tmp_condition_result_4 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
                        goto branch_yes_4;
                    } else {
                        goto branch_no_4;
                    }
                    branch_yes_4:;
                    {
                        PyObject *tmp_assign_source_14;
                        tmp_assign_source_14 = const_str_digest_1573e6b4805ac8da2565b5c6f8345d3c;
                        {
                            PyObject *old = var_r2;
                            var_r2 = tmp_assign_source_14;
                            Py_INCREF(var_r2);
                            Py_XDECREF(old);
                        }

                    }
                    {
                        PyObject *tmp_assign_source_15;
                        PyObject *tmp_called_instance_10;
                        CHECK_OBJECT(var_m1);
                        tmp_called_instance_10 = var_m1;
                        frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 801;
                        tmp_assign_source_15 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_10, const_str_plain_group, &PyTuple_GET_ITEM(const_tuple_int_0_tuple, 0));

                        if (tmp_assign_source_15 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 801;
                            type_description_1 = "cNoNooooNoocooooooo";
                            goto try_except_handler_2;
                        }
                        {
                            PyObject *old = var_txt3;
                            var_txt3 = tmp_assign_source_15;
                            Py_XDECREF(old);
                        }

                    }
                    {
                        PyObject *tmp_assign_source_16;
                        PyObject *tmp_called_instance_11;
                        PyObject *tmp_mvar_value_9;
                        PyObject *tmp_args_element_name_12;
                        PyObject *tmp_args_element_name_13;
                        tmp_mvar_value_9 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

                        if (unlikely(tmp_mvar_value_9 == NULL)) {
                            tmp_mvar_value_9 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
                        }

                        if (tmp_mvar_value_9 == NULL) {

                            exception_type = PyExc_NameError;
                            Py_INCREF(exception_type);
                            exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
                            exception_tb = NULL;

                            exception_lineno = 802;
                            type_description_1 = "cNoNooooNoocooooooo";
                            goto try_except_handler_2;
                        }

                        tmp_called_instance_11 = tmp_mvar_value_9;
                        CHECK_OBJECT(var_r2);
                        tmp_args_element_name_12 = var_r2;
                        CHECK_OBJECT(var_txt3);
                        tmp_args_element_name_13 = var_txt3;
                        frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 802;
                        {
                            PyObject *call_args[] = {tmp_args_element_name_12, tmp_args_element_name_13};
                            tmp_assign_source_16 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_11, const_str_plain_search, call_args);
                        }

                        if (tmp_assign_source_16 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 802;
                            type_description_1 = "cNoNooooNoocooooooo";
                            goto try_except_handler_2;
                        }
                        {
                            PyObject *old = var_m2;
                            var_m2 = tmp_assign_source_16;
                            Py_XDECREF(old);
                        }

                    }
                    {
                        PyObject *tmp_assign_source_17;
                        PyObject *tmp_called_instance_12;
                        CHECK_OBJECT(var_m2);
                        tmp_called_instance_12 = var_m2;
                        frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 803;
                        tmp_assign_source_17 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_12, const_str_plain_group, &PyTuple_GET_ITEM(const_tuple_int_pos_1_tuple, 0));

                        if (tmp_assign_source_17 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 803;
                            type_description_1 = "cNoNooooNoocooooooo";
                            goto try_except_handler_2;
                        }
                        {
                            PyObject *old = var_type_a;
                            var_type_a = tmp_assign_source_17;
                            Py_XDECREF(old);
                        }

                    }
                    {
                        PyObject *tmp_assign_source_18;
                        PyObject *tmp_called_name_4;
                        PyObject *tmp_source_name_9;
                        PyObject *tmp_mvar_value_10;
                        PyObject *tmp_args_element_name_14;
                        PyObject *tmp_left_name_5;
                        PyObject *tmp_left_name_6;
                        PyObject *tmp_left_name_7;
                        PyObject *tmp_left_name_8;
                        PyObject *tmp_left_name_9;
                        PyObject *tmp_source_name_10;
                        PyObject *tmp_right_name_5;
                        PyObject *tmp_right_name_6;
                        PyObject *tmp_right_name_7;
                        PyObject *tmp_right_name_8;
                        PyObject *tmp_right_name_9;
                        tmp_mvar_value_10 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

                        if (unlikely(tmp_mvar_value_10 == NULL)) {
                            tmp_mvar_value_10 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
                        }

                        if (tmp_mvar_value_10 == NULL) {

                            exception_type = PyExc_NameError;
                            Py_INCREF(exception_type);
                            exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
                            exception_tb = NULL;

                            exception_lineno = 804;
                            type_description_1 = "cNoNooooNoocooooooo";
                            goto try_except_handler_2;
                        }

                        tmp_source_name_9 = tmp_mvar_value_10;
                        tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_system);
                        if (tmp_called_name_4 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 804;
                            type_description_1 = "cNoNooooNoocooooooo";
                            goto try_except_handler_2;
                        }
                        if (PyCell_GET(self->m_closure[1]) == NULL) {
                            Py_DECREF(tmp_called_name_4);
                            exception_type = PyExc_NameError;
                            Py_INCREF(exception_type);
                            exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "parent");
                            exception_tb = NULL;

                            exception_lineno = 804;
                            type_description_1 = "cNoNooooNoocooooooo";
                            goto try_except_handler_2;
                        }

                        tmp_source_name_10 = PyCell_GET(self->m_closure[1]);
                        tmp_left_name_9 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_prefix);
                        if (tmp_left_name_9 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_4);

                            exception_lineno = 804;
                            type_description_1 = "cNoNooooNoocooooooo";
                            goto try_except_handler_2;
                        }
                        tmp_right_name_5 = const_str_digest_f3d167b0dffa906401fa6c94639c194d;
                        tmp_left_name_8 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_9, tmp_right_name_5);
                        Py_DECREF(tmp_left_name_9);
                        if (tmp_left_name_8 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_4);

                            exception_lineno = 804;
                            type_description_1 = "cNoNooooNoocooooooo";
                            goto try_except_handler_2;
                        }
                        CHECK_OBJECT(var_type_a);
                        tmp_right_name_6 = var_type_a;
                        tmp_left_name_7 = BINARY_OPERATION_ADD_OBJECT_OBJECT(tmp_left_name_8, tmp_right_name_6);
                        Py_DECREF(tmp_left_name_8);
                        if (tmp_left_name_7 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_4);

                            exception_lineno = 804;
                            type_description_1 = "cNoNooooNoocooooooo";
                            goto try_except_handler_2;
                        }
                        tmp_right_name_7 = const_str_space;
                        tmp_left_name_6 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_7, tmp_right_name_7);
                        Py_DECREF(tmp_left_name_7);
                        if (tmp_left_name_6 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_4);

                            exception_lineno = 804;
                            type_description_1 = "cNoNooooNoocooooooo";
                            goto try_except_handler_2;
                        }
                        CHECK_OBJECT(var_u);
                        tmp_right_name_8 = var_u;
                        tmp_left_name_5 = BINARY_OPERATION_ADD_OBJECT_OBJECT(tmp_left_name_6, tmp_right_name_8);
                        Py_DECREF(tmp_left_name_6);
                        if (tmp_left_name_5 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_4);

                            exception_lineno = 804;
                            type_description_1 = "cNoNooooNoocooooooo";
                            goto try_except_handler_2;
                        }
                        tmp_right_name_9 = const_str_plain_1;
                        tmp_args_element_name_14 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_5, tmp_right_name_9);
                        Py_DECREF(tmp_left_name_5);
                        if (tmp_args_element_name_14 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_4);

                            exception_lineno = 804;
                            type_description_1 = "cNoNooooNoocooooooo";
                            goto try_except_handler_2;
                        }
                        frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 804;
                        tmp_assign_source_18 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_4, tmp_args_element_name_14);
                        Py_DECREF(tmp_called_name_4);
                        Py_DECREF(tmp_args_element_name_14);
                        if (tmp_assign_source_18 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 804;
                            type_description_1 = "cNoNooooNoocooooooo";
                            goto try_except_handler_2;
                        }
                        {
                            PyObject *old = var_s;
                            var_s = tmp_assign_source_18;
                            Py_XDECREF(old);
                        }

                    }
                    branch_no_4:;
                }
                branch_no_3:;
            }
            if (CONSIDER_THREADING() == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 792;
                type_description_1 = "cNoNooooNoocooooooo";
                goto try_except_handler_2;
            }
            goto loop_start_1;
            loop_end_1:;
            goto try_end_1;
            // Exception handler code:
            try_except_handler_2:;
            exception_keeper_type_1 = exception_type;
            exception_keeper_value_1 = exception_value;
            exception_keeper_tb_1 = exception_tb;
            exception_keeper_lineno_1 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF(tmp_for_loop_1__iter_value);
            tmp_for_loop_1__iter_value = NULL;

            CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
            Py_DECREF(tmp_for_loop_1__for_iterator);
            tmp_for_loop_1__for_iterator = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_1;
            exception_value = exception_keeper_value_1;
            exception_tb = exception_keeper_tb_1;
            exception_lineno = exception_keeper_lineno_1;

            goto frame_exception_exit_1;
            // End of try:
            try_end_1:;
            Py_XDECREF(tmp_for_loop_1__iter_value);
            tmp_for_loop_1__iter_value = NULL;

            CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
            Py_DECREF(tmp_for_loop_1__for_iterator);
            tmp_for_loop_1__for_iterator = NULL;

            {
                PyObject *tmp_assign_source_19;
                PyObject *tmp_called_instance_13;
                PyObject *tmp_called_instance_14;
                PyObject *tmp_mvar_value_11;
                tmp_mvar_value_11 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

                if (unlikely(tmp_mvar_value_11 == NULL)) {
                    tmp_mvar_value_11 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
                }

                if (tmp_mvar_value_11 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
                    exception_tb = NULL;

                    exception_lineno = 805;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_14 = tmp_mvar_value_11;
                frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 805;
                tmp_called_instance_13 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_14, const_str_plain_popen, &PyTuple_GET_ITEM(const_tuple_str_plain_mount_tuple, 0));

                if (tmp_called_instance_13 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 805;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto frame_exception_exit_1;
                }
                frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 805;
                tmp_assign_source_19 = CALL_METHOD_NO_ARGS(tmp_called_instance_13, const_str_plain_read);
                Py_DECREF(tmp_called_instance_13);
                if (tmp_assign_source_19 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 805;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_txt3;
                    var_txt3 = tmp_assign_source_19;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_20;
                PyObject *tmp_called_instance_15;
                PyObject *tmp_mvar_value_12;
                PyObject *tmp_args_element_name_15;
                PyObject *tmp_args_element_name_16;
                tmp_mvar_value_12 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

                if (unlikely(tmp_mvar_value_12 == NULL)) {
                    tmp_mvar_value_12 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
                }

                if (tmp_mvar_value_12 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
                    exception_tb = NULL;

                    exception_lineno = 808;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_15 = tmp_mvar_value_12;
                tmp_args_element_name_15 = const_str_digest_362b9c39b7be7164b4f637e29c9f8900;
                CHECK_OBJECT(var_txt3);
                tmp_args_element_name_16 = var_txt3;
                frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 808;
                {
                    PyObject *call_args[] = {tmp_args_element_name_15, tmp_args_element_name_16};
                    tmp_assign_source_20 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_15, const_str_plain_findall, call_args);
                }

                if (tmp_assign_source_20 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 808;
                    type_description_1 = "cNoNooooNoocooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_usb_new;
                    assert(old != NULL);
                    var_usb_new = tmp_assign_source_20;
                    Py_DECREF(old);
                }

            }
            branch_no_2:;
        }
        branch_end_1:;
    }
    {
        PyObject *tmp_called_name_5;
        PyObject *tmp_source_name_11;
        PyObject *tmp_mvar_value_13;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_17;
        PyObject *tmp_args_element_name_18;
        tmp_mvar_value_13 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gobject);

        if (unlikely(tmp_mvar_value_13 == NULL)) {
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gobject);
        }

        if (tmp_mvar_value_13 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 730 ], 36, 0);
            exception_tb = NULL;

            exception_lineno = 810;
            type_description_1 = "cNoNooooNoocooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_11 = tmp_mvar_value_13;
        tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_idle_add);
        if (tmp_called_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 810;
            type_description_1 = "cNoNooooNoocooooooo";
            goto frame_exception_exit_1;
        }
        if (PyCell_GET(self->m_closure[0]) == NULL) {
            Py_DECREF(tmp_called_name_5);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "cleanup");
            exception_tb = NULL;

            exception_lineno = 810;
            type_description_1 = "cNoNooooNoocooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_17 = PyCell_GET(self->m_closure[0]);
        if (var_usb_new == NULL) {
            Py_DECREF(tmp_called_name_5);
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF(exception_type);
            exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "usb_new");
            exception_tb = NULL;

            exception_lineno = 810;
            type_description_1 = "cNoNooooNoocooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_18 = var_usb_new;
        frame_21fd2959b99fe54a3447114bd6e97730->m_frame.f_lineno = 810;
        {
            PyObject *call_args[] = {tmp_args_element_name_17, tmp_args_element_name_18};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_5, call_args);
        }

        Py_DECREF(tmp_called_name_5);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 810;
            type_description_1 = "cNoNooooNoocooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_21fd2959b99fe54a3447114bd6e97730);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_21fd2959b99fe54a3447114bd6e97730);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_21fd2959b99fe54a3447114bd6e97730, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_21fd2959b99fe54a3447114bd6e97730->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_21fd2959b99fe54a3447114bd6e97730, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_21fd2959b99fe54a3447114bd6e97730,
        type_description_1,
        self->m_closure[1],
        NULL,
        var_type_a,
        NULL,
        var_list_u,
        var_rgx,
        var_usb_new,
        var_m,
        NULL,
        var_r2,
        var_s,
        self->m_closure[0],
        var_u,
        var_m2,
        var_m1,
        var_txt,
        var_txt1,
        var_txt2,
        var_txt3
    );


    // Release cached frame.
    if (frame_21fd2959b99fe54a3447114bd6e97730 == cache_frame_21fd2959b99fe54a3447114bd6e97730) {
        Py_DECREF(frame_21fd2959b99fe54a3447114bd6e97730);
    }
    cache_frame_21fd2959b99fe54a3447114bd6e97730 = NULL;

    assertFrameObject(frame_21fd2959b99fe54a3447114bd6e97730);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_19___init__$$$function_1_t1_run);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_type_a);
    var_type_a = NULL;

    Py_XDECREF(var_list_u);
    var_list_u = NULL;

    Py_XDECREF(var_rgx);
    var_rgx = NULL;

    Py_XDECREF(var_usb_new);
    var_usb_new = NULL;

    Py_XDECREF(var_m);
    var_m = NULL;

    Py_XDECREF(var_r2);
    var_r2 = NULL;

    Py_XDECREF(var_s);
    var_s = NULL;

    Py_XDECREF(var_u);
    var_u = NULL;

    Py_XDECREF(var_m2);
    var_m2 = NULL;

    Py_XDECREF(var_m1);
    var_m1 = NULL;

    Py_XDECREF(var_txt);
    var_txt = NULL;

    Py_XDECREF(var_txt1);
    var_txt1 = NULL;

    Py_XDECREF(var_txt2);
    var_txt2 = NULL;

    Py_XDECREF(var_txt3);
    var_txt3 = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_type_a);
    var_type_a = NULL;

    Py_XDECREF(var_list_u);
    var_list_u = NULL;

    Py_XDECREF(var_rgx);
    var_rgx = NULL;

    Py_XDECREF(var_usb_new);
    var_usb_new = NULL;

    Py_XDECREF(var_m);
    var_m = NULL;

    Py_XDECREF(var_r2);
    var_r2 = NULL;

    Py_XDECREF(var_s);
    var_s = NULL;

    Py_XDECREF(var_u);
    var_u = NULL;

    Py_XDECREF(var_m2);
    var_m2 = NULL;

    Py_XDECREF(var_m1);
    var_m1 = NULL;

    Py_XDECREF(var_txt);
    var_txt = NULL;

    Py_XDECREF(var_txt1);
    var_txt1 = NULL;

    Py_XDECREF(var_txt2);
    var_txt2 = NULL;

    Py_XDECREF(var_txt3);
    var_txt3 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_19___init__$$$function_1_t1_run);
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_19___init__$$$function_2_cleanup(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_usb_new = python_pars[0];
    PyObject *var_count = NULL;
    PyObject *var_d = NULL;
    PyObject *var_length = NULL;
    PyObject *var_usb_final = NULL;
    PyObject *var_mod = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_ef0067c30e640f9c83b22220d14d0767;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_ef0067c30e640f9c83b22220d14d0767 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_ef0067c30e640f9c83b22220d14d0767, codeobj_ef0067c30e640f9c83b22220d14d0767, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_ef0067c30e640f9c83b22220d14d0767 = cache_frame_ef0067c30e640f9c83b22220d14d0767;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ef0067c30e640f9c83b22220d14d0767);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ef0067c30e640f9c83b22220d14d0767) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT(par_usb_new);
        tmp_len_arg_1 = par_usb_new;
        tmp_assign_source_1 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 814;
            type_description_1 = "ooocooco";
            goto frame_exception_exit_1;
        }
        assert(var_length == NULL);
        var_length = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT(var_length);
        tmp_compexpr_left_1 = var_length;
        tmp_compexpr_right_1 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_INT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_2;
            tmp_assign_source_2 = const_int_0;
            assert(var_count == NULL);
            Py_INCREF(tmp_assign_source_2);
            var_count = tmp_assign_source_2;
        }
        {
            PyObject *tmp_assign_source_3;
            tmp_assign_source_3 = PyList_New(0);
            assert(var_usb_final == NULL);
            var_usb_final = tmp_assign_source_3;
        }
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_iter_arg_1;
            CHECK_OBJECT(par_usb_new);
            tmp_iter_arg_1 = par_usb_new;
            tmp_assign_source_4 = MAKE_ITERATOR(tmp_iter_arg_1);
            if (tmp_assign_source_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 820;
                type_description_1 = "ooocooco";
                goto frame_exception_exit_1;
            }
            assert(tmp_for_loop_1__for_iterator == NULL);
            tmp_for_loop_1__for_iterator = tmp_assign_source_4;
        }
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_5;
            CHECK_OBJECT(tmp_for_loop_1__for_iterator);
            tmp_next_source_1 = tmp_for_loop_1__for_iterator;
            tmp_assign_source_5 = ITERATOR_NEXT(tmp_next_source_1);
            if (tmp_assign_source_5 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_1;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_1 = "ooocooco";
                    exception_lineno = 820;
                    goto try_except_handler_2;
                }
            }

            {
                PyObject *old = tmp_for_loop_1__iter_value;
                tmp_for_loop_1__iter_value = tmp_assign_source_5;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_6;
            CHECK_OBJECT(tmp_for_loop_1__iter_value);
            tmp_assign_source_6 = tmp_for_loop_1__iter_value;
            {
                PyObject *old = var_d;
                var_d = tmp_assign_source_6;
                Py_INCREF(var_d);
                Py_XDECREF(old);
            }

        }
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            PyObject *tmp_source_name_1;
            if (PyCell_GET(self->m_closure[0]) == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "parent");
                exception_tb = NULL;

                exception_lineno = 822;
                type_description_1 = "ooocooco";
                goto try_except_handler_2;
            }

            tmp_source_name_1 = PyCell_GET(self->m_closure[0]);
            tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_DEV_OS);
            if (tmp_compexpr_left_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 822;
                type_description_1 = "ooocooco";
                goto try_except_handler_2;
            }
            tmp_compexpr_right_2 = const_str_plain_Windows;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
            Py_DECREF(tmp_compexpr_left_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 822;
                type_description_1 = "ooocooco";
                goto try_except_handler_2;
            }
            tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
                goto branch_yes_2;
            } else {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assign_source_7;
                PyObject *tmp_left_name_1;
                PyObject *tmp_right_name_1;
                PyObject *tmp_subscribed_name_1;
                PyObject *tmp_subscript_name_1;
                tmp_left_name_1 = const_str_digest_860d00cf321643e9e9ab82de992e8e2f;
                CHECK_OBJECT(var_d);
                tmp_subscribed_name_1 = var_d;
                tmp_subscript_name_1 = const_int_pos_1;
                tmp_right_name_1 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_1, tmp_subscript_name_1, 1);
                if (tmp_right_name_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 823;
                    type_description_1 = "ooocooco";
                    goto try_except_handler_2;
                }
                tmp_assign_source_7 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_1, tmp_right_name_1);
                Py_DECREF(tmp_right_name_1);
                if (tmp_assign_source_7 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 823;
                    type_description_1 = "ooocooco";
                    goto try_except_handler_2;
                }
                {
                    PyObject *old = var_mod;
                    var_mod = tmp_assign_source_7;
                    Py_XDECREF(old);
                }

            }
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_compexpr_left_3;
                PyObject *tmp_compexpr_right_3;
                PyObject *tmp_source_name_2;
                CHECK_OBJECT(var_mod);
                tmp_compexpr_left_3 = var_mod;
                if (PyCell_GET(self->m_closure[0]) == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "parent");
                    exception_tb = NULL;

                    exception_lineno = 824;
                    type_description_1 = "ooocooco";
                    goto try_except_handler_2;
                }

                tmp_source_name_2 = PyCell_GET(self->m_closure[0]);
                tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_devs_list);
                if (tmp_compexpr_right_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 824;
                    type_description_1 = "ooocooco";
                    goto try_except_handler_2;
                }
                tmp_res = PySequence_Contains(tmp_compexpr_right_3, tmp_compexpr_left_3);
                Py_DECREF(tmp_compexpr_right_3);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 824;
                    type_description_1 = "ooocooco";
                    goto try_except_handler_2;
                }
                tmp_condition_result_3 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_3;
                } else {
                    goto branch_no_3;
                }
                branch_yes_3:;
                {
                    PyObject *tmp_called_name_1;
                    PyObject *tmp_source_name_3;
                    PyObject *tmp_source_name_4;
                    PyObject *tmp_call_result_1;
                    PyObject *tmp_args_element_name_1;
                    PyObject *tmp_subscribed_name_2;
                    PyObject *tmp_subscript_name_2;
                    if (PyCell_GET(self->m_closure[1]) == NULL) {

                        exception_type = PyExc_NameError;
                        Py_INCREF(exception_type);
                        exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
                        exception_tb = NULL;

                        exception_lineno = 825;
                        type_description_1 = "ooocooco";
                        goto try_except_handler_2;
                    }

                    tmp_source_name_4 = PyCell_GET(self->m_closure[1]);
                    tmp_source_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_usb_menu);
                    if (tmp_source_name_3 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 825;
                        type_description_1 = "ooocooco";
                        goto try_except_handler_2;
                    }
                    tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_append_text);
                    Py_DECREF(tmp_source_name_3);
                    if (tmp_called_name_1 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 825;
                        type_description_1 = "ooocooco";
                        goto try_except_handler_2;
                    }
                    CHECK_OBJECT(var_d);
                    tmp_subscribed_name_2 = var_d;
                    tmp_subscript_name_2 = const_int_0;
                    tmp_args_element_name_1 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_2, tmp_subscript_name_2, 0);
                    if (tmp_args_element_name_1 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_1);

                        exception_lineno = 825;
                        type_description_1 = "ooocooco";
                        goto try_except_handler_2;
                    }
                    frame_ef0067c30e640f9c83b22220d14d0767->m_frame.f_lineno = 825;
                    tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
                    Py_DECREF(tmp_called_name_1);
                    Py_DECREF(tmp_args_element_name_1);
                    if (tmp_call_result_1 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 825;
                        type_description_1 = "ooocooco";
                        goto try_except_handler_2;
                    }
                    Py_DECREF(tmp_call_result_1);
                }
                {
                    PyObject *tmp_called_instance_1;
                    PyObject *tmp_call_result_2;
                    PyObject *tmp_args_element_name_2;
                    CHECK_OBJECT(var_usb_final);
                    tmp_called_instance_1 = var_usb_final;
                    CHECK_OBJECT(var_d);
                    tmp_args_element_name_2 = var_d;
                    frame_ef0067c30e640f9c83b22220d14d0767->m_frame.f_lineno = 826;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_2};
                        tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_append, call_args);
                    }

                    if (tmp_call_result_2 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 826;
                        type_description_1 = "ooocooco";
                        goto try_except_handler_2;
                    }
                    Py_DECREF(tmp_call_result_2);
                }
                {
                    PyObject *tmp_assign_source_8;
                    PyObject *tmp_left_name_2;
                    PyObject *tmp_right_name_2;
                    if (var_count == NULL) {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF(exception_type);
                        exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "count");
                        exception_tb = NULL;

                        exception_lineno = 827;
                        type_description_1 = "ooocooco";
                        goto try_except_handler_2;
                    }

                    tmp_left_name_2 = var_count;
                    tmp_right_name_2 = const_int_pos_1;
                    tmp_assign_source_8 = BINARY_OPERATION_ADD_OBJECT_INT(tmp_left_name_2, tmp_right_name_2);
                    if (tmp_assign_source_8 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 827;
                        type_description_1 = "ooocooco";
                        goto try_except_handler_2;
                    }
                    {
                        PyObject *old = var_count;
                        var_count = tmp_assign_source_8;
                        Py_XDECREF(old);
                    }

                }
                branch_no_3:;
            }
            goto branch_end_2;
            branch_no_2:;
            {
                nuitka_bool tmp_condition_result_4;
                PyObject *tmp_compexpr_left_4;
                PyObject *tmp_compexpr_right_4;
                PyObject *tmp_source_name_5;
                if (PyCell_GET(self->m_closure[0]) == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "parent");
                    exception_tb = NULL;

                    exception_lineno = 828;
                    type_description_1 = "ooocooco";
                    goto try_except_handler_2;
                }

                tmp_source_name_5 = PyCell_GET(self->m_closure[0]);
                tmp_compexpr_left_4 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_DEV_OS);
                if (tmp_compexpr_left_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 828;
                    type_description_1 = "ooocooco";
                    goto try_except_handler_2;
                }
                tmp_compexpr_right_4 = const_str_plain_Linux;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_4, tmp_compexpr_right_4);
                Py_DECREF(tmp_compexpr_left_4);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 828;
                    type_description_1 = "ooocooco";
                    goto try_except_handler_2;
                }
                tmp_condition_result_4 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_4;
                } else {
                    goto branch_no_4;
                }
                branch_yes_4:;
                {
                    nuitka_bool tmp_condition_result_5;
                    PyObject *tmp_compexpr_left_5;
                    PyObject *tmp_compexpr_right_5;
                    PyObject *tmp_subscribed_name_3;
                    PyObject *tmp_subscript_name_3;
                    PyObject *tmp_source_name_6;
                    CHECK_OBJECT(var_d);
                    tmp_subscribed_name_3 = var_d;
                    tmp_subscript_name_3 = const_int_0;
                    tmp_compexpr_left_5 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_3, tmp_subscript_name_3, 0);
                    if (tmp_compexpr_left_5 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 829;
                        type_description_1 = "ooocooco";
                        goto try_except_handler_2;
                    }
                    if (PyCell_GET(self->m_closure[0]) == NULL) {
                        Py_DECREF(tmp_compexpr_left_5);
                        exception_type = PyExc_NameError;
                        Py_INCREF(exception_type);
                        exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "parent");
                        exception_tb = NULL;

                        exception_lineno = 829;
                        type_description_1 = "ooocooco";
                        goto try_except_handler_2;
                    }

                    tmp_source_name_6 = PyCell_GET(self->m_closure[0]);
                    tmp_compexpr_right_5 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_devs_list);
                    if (tmp_compexpr_right_5 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_compexpr_left_5);

                        exception_lineno = 829;
                        type_description_1 = "ooocooco";
                        goto try_except_handler_2;
                    }
                    tmp_res = PySequence_Contains(tmp_compexpr_right_5, tmp_compexpr_left_5);
                    Py_DECREF(tmp_compexpr_left_5);
                    Py_DECREF(tmp_compexpr_right_5);
                    if (tmp_res == -1) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 829;
                        type_description_1 = "ooocooco";
                        goto try_except_handler_2;
                    }
                    tmp_condition_result_5 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
                        goto branch_yes_5;
                    } else {
                        goto branch_no_5;
                    }
                    branch_yes_5:;
                    {
                        PyObject *tmp_called_name_2;
                        PyObject *tmp_source_name_7;
                        PyObject *tmp_source_name_8;
                        PyObject *tmp_call_result_3;
                        PyObject *tmp_args_element_name_3;
                        PyObject *tmp_subscribed_name_4;
                        PyObject *tmp_subscript_name_4;
                        if (PyCell_GET(self->m_closure[1]) == NULL) {

                            exception_type = PyExc_NameError;
                            Py_INCREF(exception_type);
                            exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
                            exception_tb = NULL;

                            exception_lineno = 830;
                            type_description_1 = "ooocooco";
                            goto try_except_handler_2;
                        }

                        tmp_source_name_8 = PyCell_GET(self->m_closure[1]);
                        tmp_source_name_7 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_usb_menu);
                        if (tmp_source_name_7 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 830;
                            type_description_1 = "ooocooco";
                            goto try_except_handler_2;
                        }
                        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_append_text);
                        Py_DECREF(tmp_source_name_7);
                        if (tmp_called_name_2 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 830;
                            type_description_1 = "ooocooco";
                            goto try_except_handler_2;
                        }
                        CHECK_OBJECT(var_d);
                        tmp_subscribed_name_4 = var_d;
                        tmp_subscript_name_4 = const_int_0;
                        tmp_args_element_name_3 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_4, tmp_subscript_name_4, 0);
                        if (tmp_args_element_name_3 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_2);

                            exception_lineno = 830;
                            type_description_1 = "ooocooco";
                            goto try_except_handler_2;
                        }
                        frame_ef0067c30e640f9c83b22220d14d0767->m_frame.f_lineno = 830;
                        tmp_call_result_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_3);
                        Py_DECREF(tmp_called_name_2);
                        Py_DECREF(tmp_args_element_name_3);
                        if (tmp_call_result_3 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 830;
                            type_description_1 = "ooocooco";
                            goto try_except_handler_2;
                        }
                        Py_DECREF(tmp_call_result_3);
                    }
                    {
                        PyObject *tmp_called_instance_2;
                        PyObject *tmp_call_result_4;
                        PyObject *tmp_args_element_name_4;
                        CHECK_OBJECT(var_usb_final);
                        tmp_called_instance_2 = var_usb_final;
                        CHECK_OBJECT(var_d);
                        tmp_args_element_name_4 = var_d;
                        frame_ef0067c30e640f9c83b22220d14d0767->m_frame.f_lineno = 831;
                        {
                            PyObject *call_args[] = {tmp_args_element_name_4};
                            tmp_call_result_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_append, call_args);
                        }

                        if (tmp_call_result_4 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 831;
                            type_description_1 = "ooocooco";
                            goto try_except_handler_2;
                        }
                        Py_DECREF(tmp_call_result_4);
                    }
                    {
                        PyObject *tmp_assign_source_9;
                        PyObject *tmp_left_name_3;
                        PyObject *tmp_right_name_3;
                        if (var_count == NULL) {

                            exception_type = PyExc_UnboundLocalError;
                            Py_INCREF(exception_type);
                            exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "count");
                            exception_tb = NULL;

                            exception_lineno = 832;
                            type_description_1 = "ooocooco";
                            goto try_except_handler_2;
                        }

                        tmp_left_name_3 = var_count;
                        tmp_right_name_3 = const_int_pos_1;
                        tmp_assign_source_9 = BINARY_OPERATION_ADD_OBJECT_INT(tmp_left_name_3, tmp_right_name_3);
                        if (tmp_assign_source_9 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 832;
                            type_description_1 = "ooocooco";
                            goto try_except_handler_2;
                        }
                        {
                            PyObject *old = var_count;
                            var_count = tmp_assign_source_9;
                            Py_XDECREF(old);
                        }

                    }
                    branch_no_5:;
                }
                branch_no_4:;
            }
            branch_end_2:;
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 820;
            type_description_1 = "ooocooco";
            goto try_except_handler_2;
        }
        goto loop_start_1;
        loop_end_1:;
        goto try_end_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_for_loop_1__iter_value);
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
        Py_DECREF(tmp_for_loop_1__for_iterator);
        tmp_for_loop_1__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto frame_exception_exit_1;
        // End of try:
        try_end_1:;
        Py_XDECREF(tmp_for_loop_1__iter_value);
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
        Py_DECREF(tmp_for_loop_1__for_iterator);
        tmp_for_loop_1__for_iterator = NULL;

        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            CHECK_OBJECT(var_usb_final);
            tmp_assattr_name_1 = var_usb_final;
            if (PyCell_GET(self->m_closure[0]) == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "parent");
                exception_tb = NULL;

                exception_lineno = 833;
                type_description_1 = "ooocooco";
                goto frame_exception_exit_1;
            }

            tmp_assattr_target_1 = PyCell_GET(self->m_closure[0]);
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_usb_list, tmp_assattr_name_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 833;
                type_description_1 = "ooocooco";
                goto frame_exception_exit_1;
            }
        }
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_compexpr_left_6;
            PyObject *tmp_compexpr_right_6;
            if (var_count == NULL) {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF(exception_type);
                exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "count");
                exception_tb = NULL;

                exception_lineno = 835;
                type_description_1 = "ooocooco";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_left_6 = var_count;
            tmp_compexpr_right_6 = const_int_0;
            tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_INT(tmp_compexpr_left_6, tmp_compexpr_right_6);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 835;
                type_description_1 = "ooocooco";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_6 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
                goto branch_yes_6;
            } else {
                goto branch_no_6;
            }
            branch_yes_6:;
            {
                PyObject *tmp_called_instance_3;
                PyObject *tmp_source_name_9;
                PyObject *tmp_call_result_5;
                if (PyCell_GET(self->m_closure[1]) == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
                    exception_tb = NULL;

                    exception_lineno = 836;
                    type_description_1 = "ooocooco";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_9 = PyCell_GET(self->m_closure[1]);
                tmp_called_instance_3 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_usb_menu);
                if (tmp_called_instance_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 836;
                    type_description_1 = "ooocooco";
                    goto frame_exception_exit_1;
                }
                frame_ef0067c30e640f9c83b22220d14d0767->m_frame.f_lineno = 836;
                tmp_call_result_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_3, const_str_plain_set_active, &PyTuple_GET_ITEM(const_tuple_int_0_tuple, 0));

                Py_DECREF(tmp_called_instance_3);
                if (tmp_call_result_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 836;
                    type_description_1 = "ooocooco";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_5);
            }
            goto branch_end_6;
            branch_no_6:;
            {
                PyObject *tmp_called_instance_4;
                PyObject *tmp_source_name_10;
                PyObject *tmp_call_result_6;
                if (PyCell_GET(self->m_closure[1]) == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
                    exception_tb = NULL;

                    exception_lineno = 838;
                    type_description_1 = "ooocooco";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_10 = PyCell_GET(self->m_closure[1]);
                tmp_called_instance_4 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_na_instr);
                if (tmp_called_instance_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 838;
                    type_description_1 = "ooocooco";
                    goto frame_exception_exit_1;
                }
                frame_ef0067c30e640f9c83b22220d14d0767->m_frame.f_lineno = 838;
                tmp_call_result_6 = CALL_METHOD_NO_ARGS(tmp_called_instance_4, const_str_plain_show);
                Py_DECREF(tmp_called_instance_4);
                if (tmp_call_result_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 838;
                    type_description_1 = "ooocooco";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_6);
            }
            branch_end_6:;
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_called_instance_5;
            PyObject *tmp_source_name_11;
            PyObject *tmp_call_result_7;
            if (PyCell_GET(self->m_closure[1]) == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
                exception_tb = NULL;

                exception_lineno = 840;
                type_description_1 = "ooocooco";
                goto frame_exception_exit_1;
            }

            tmp_source_name_11 = PyCell_GET(self->m_closure[1]);
            tmp_called_instance_5 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_na_instr);
            if (tmp_called_instance_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 840;
                type_description_1 = "ooocooco";
                goto frame_exception_exit_1;
            }
            frame_ef0067c30e640f9c83b22220d14d0767->m_frame.f_lineno = 840;
            tmp_call_result_7 = CALL_METHOD_NO_ARGS(tmp_called_instance_5, const_str_plain_show);
            Py_DECREF(tmp_called_instance_5);
            if (tmp_call_result_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 840;
                type_description_1 = "ooocooco";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_7);
        }
        branch_end_1:;
    }
    {
        PyObject *tmp_called_instance_6;
        PyObject *tmp_source_name_12;
        PyObject *tmp_call_result_8;
        if (PyCell_GET(self->m_closure[1]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;

            exception_lineno = 841;
            type_description_1 = "ooocooco";
            goto frame_exception_exit_1;
        }

        tmp_source_name_12 = PyCell_GET(self->m_closure[1]);
        tmp_called_instance_6 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_wait_instr);
        if (tmp_called_instance_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 841;
            type_description_1 = "ooocooco";
            goto frame_exception_exit_1;
        }
        frame_ef0067c30e640f9c83b22220d14d0767->m_frame.f_lineno = 841;
        tmp_call_result_8 = CALL_METHOD_NO_ARGS(tmp_called_instance_6, const_str_plain_hide);
        Py_DECREF(tmp_called_instance_6);
        if (tmp_call_result_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 841;
            type_description_1 = "ooocooco";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_8);
    }
    {
        PyObject *tmp_called_instance_7;
        PyObject *tmp_source_name_13;
        PyObject *tmp_call_result_9;
        if (PyCell_GET(self->m_closure[1]) == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = PyString_FromFormat("free variable '%s' referenced before assignment in enclosing scope", "self");
            exception_tb = NULL;

            exception_lineno = 842;
            type_description_1 = "ooocooco";
            goto frame_exception_exit_1;
        }

        tmp_source_name_13 = PyCell_GET(self->m_closure[1]);
        tmp_called_instance_7 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain_refresh_button);
        if (tmp_called_instance_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 842;
            type_description_1 = "ooocooco";
            goto frame_exception_exit_1;
        }
        frame_ef0067c30e640f9c83b22220d14d0767->m_frame.f_lineno = 842;
        tmp_call_result_9 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_7, const_str_plain_set_sensitive, &PyTuple_GET_ITEM(const_tuple_true_tuple, 0));

        Py_DECREF(tmp_called_instance_7);
        if (tmp_call_result_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 842;
            type_description_1 = "ooocooco";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_9);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ef0067c30e640f9c83b22220d14d0767);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ef0067c30e640f9c83b22220d14d0767);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ef0067c30e640f9c83b22220d14d0767, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_ef0067c30e640f9c83b22220d14d0767->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ef0067c30e640f9c83b22220d14d0767, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ef0067c30e640f9c83b22220d14d0767,
        type_description_1,
        par_usb_new,
        var_count,
        var_d,
        self->m_closure[0],
        var_length,
        var_usb_final,
        self->m_closure[1],
        var_mod
    );


    // Release cached frame.
    if (frame_ef0067c30e640f9c83b22220d14d0767 == cache_frame_ef0067c30e640f9c83b22220d14d0767) {
        Py_DECREF(frame_ef0067c30e640f9c83b22220d14d0767);
    }
    cache_frame_ef0067c30e640f9c83b22220d14d0767 = NULL;

    assertFrameObject(frame_ef0067c30e640f9c83b22220d14d0767);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_19___init__$$$function_2_cleanup);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_count);
    var_count = NULL;

    Py_XDECREF(var_d);
    var_d = NULL;

    CHECK_OBJECT((PyObject *)var_length);
    Py_DECREF(var_length);
    var_length = NULL;

    Py_XDECREF(var_usb_final);
    var_usb_final = NULL;

    Py_XDECREF(var_mod);
    var_mod = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_count);
    var_count = NULL;

    Py_XDECREF(var_d);
    var_d = NULL;

    Py_XDECREF(var_length);
    var_length = NULL;

    Py_XDECREF(var_usb_final);
    var_usb_final = NULL;

    Py_XDECREF(var_mod);
    var_mod = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_19___init__$$$function_2_cleanup);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_usb_new);
    Py_DECREF(par_usb_new);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_usb_new);
    Py_DECREF(par_usb_new);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_20_refreshUSB(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_button = python_pars[1];
    PyObject *par_parent = python_pars[2];
    PyObject *var_list_u = NULL;
    PyObject *var_dl_len = NULL;
    PyObject *var_list_d = NULL;
    PyObject *var_txt = NULL;
    PyObject *var_row = NULL;
    PyObject *var_rgx = NULL;
    PyObject *var_length = NULL;
    PyObject *var_m1 = NULL;
    PyObject *var_m2 = NULL;
    PyObject *var_type_a = NULL;
    PyObject *var_mod = NULL;
    PyObject *var_count = NULL;
    PyObject *var_d = NULL;
    PyObject *var_r2 = NULL;
    PyObject *var_m = NULL;
    PyObject *var_iter = NULL;
    PyObject *var_s = NULL;
    PyObject *var_txt_s = NULL;
    PyObject *var_u = NULL;
    PyObject *var_usb_final = NULL;
    PyObject *var_x = NULL;
    PyObject *var_model = NULL;
    PyObject *var_txt1 = NULL;
    PyObject *var_txt2 = NULL;
    PyObject *var_txt3 = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_for_loop_5__for_iterator = NULL;
    PyObject *tmp_for_loop_5__iter_value = NULL;
    struct Nuitka_FrameObject *frame_60373512ef7346ec75af4b60640e5729;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    bool tmp_result;
    int tmp_res;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    static struct Nuitka_FrameObject *cache_frame_60373512ef7346ec75af4b60640e5729 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_60373512ef7346ec75af4b60640e5729, codeobj_60373512ef7346ec75af4b60640e5729, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_60373512ef7346ec75af4b60640e5729 = cache_frame_60373512ef7346ec75af4b60640e5729;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_60373512ef7346ec75af4b60640e5729);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_60373512ef7346ec75af4b60640e5729) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_self);
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_refresh_button);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 861;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 861;
        tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_set_sensitive, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 861;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT(par_self);
        tmp_source_name_2 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_usb_menu);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 862;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 862;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_get_model);
        Py_DECREF(tmp_called_instance_2);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 862;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_model == NULL);
        var_model = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 864;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_1;
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_TreeIter);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 864;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_iter == NULL);
        var_iter = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT(var_model);
        tmp_iter_arg_1 = var_model;
        tmp_assign_source_3 = MAKE_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 865;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_3;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_4 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_4 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                exception_lineno = 865;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_5 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_row;
            var_row = tmp_assign_source_5;
            Py_INCREF(var_row);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_4;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT(var_model);
        tmp_source_name_4 = var_model;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_remove);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 866;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_row);
        tmp_source_name_5 = var_row;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_iter);
        if (tmp_args_element_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);

            exception_lineno = 866;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto try_except_handler_2;
        }
        frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 866;
        tmp_call_result_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_1);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_1);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 866;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_2);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 865;
        type_description_1 = "oooNNooNooooooooooooooooooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT((PyObject *)tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_name_1 = PyList_New(0);
        CHECK_OBJECT(par_parent);
        tmp_assattr_target_1 = par_parent;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_usb_list, tmp_assattr_name_1);
        Py_DECREF(tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 868;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_6;
        CHECK_OBJECT(par_parent);
        tmp_source_name_6 = par_parent;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_DEV_OS);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 870;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_str_plain_Windows;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 870;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_called_instance_3;
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_7;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_left_name_1;
            PyObject *tmp_source_name_8;
            PyObject *tmp_right_name_1;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

            if (unlikely(tmp_mvar_value_2 == NULL)) {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
            }

            if (tmp_mvar_value_2 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
                exception_tb = NULL;

                exception_lineno = 871;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_7 = tmp_mvar_value_2;
            tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_popen);
            if (tmp_called_name_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 871;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_parent);
            tmp_source_name_8 = par_parent;
            tmp_left_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_prefix);
            if (tmp_left_name_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_2);

                exception_lineno = 871;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_right_name_1 = const_str_digest_8c96842b8b2bfd9741967a12c4a512ae;
            tmp_args_element_name_2 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_1, tmp_right_name_1);
            Py_DECREF(tmp_left_name_1);
            if (tmp_args_element_name_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_2);

                exception_lineno = 871;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 871;
            tmp_called_instance_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_2);
            Py_DECREF(tmp_called_name_2);
            Py_DECREF(tmp_args_element_name_2);
            if (tmp_called_instance_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 871;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 871;
            tmp_assign_source_6 = CALL_METHOD_NO_ARGS(tmp_called_instance_3, const_str_plain_read);
            Py_DECREF(tmp_called_instance_3);
            if (tmp_assign_source_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 871;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_txt == NULL);
            var_txt = tmp_assign_source_6;
        }
        {
            PyObject *tmp_assattr_name_2;
            PyObject *tmp_called_instance_4;
            PyObject *tmp_mvar_value_3;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_assattr_target_2;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

            if (unlikely(tmp_mvar_value_3 == NULL)) {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
            }

            if (tmp_mvar_value_3 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
                exception_tb = NULL;

                exception_lineno = 873;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_4 = tmp_mvar_value_3;
            tmp_args_element_name_3 = const_str_digest_4b8d3f96b43e55a1f0ce0c23563c4be0;
            CHECK_OBJECT(var_txt);
            tmp_args_element_name_4 = var_txt;
            frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 873;
            {
                PyObject *call_args[] = {tmp_args_element_name_3, tmp_args_element_name_4};
                tmp_assattr_name_2 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_4, const_str_plain_findall, call_args);
            }

            if (tmp_assattr_name_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 873;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_parent);
            tmp_assattr_target_2 = par_parent;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_usb_list, tmp_assattr_name_2);
            Py_DECREF(tmp_assattr_name_2);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 873;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            PyObject *tmp_source_name_9;
            CHECK_OBJECT(par_parent);
            tmp_source_name_9 = par_parent;
            tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_DEV_OS);
            if (tmp_compexpr_left_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 874;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_2 = const_str_plain_Linux;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_2, tmp_compexpr_right_2);
            Py_DECREF(tmp_compexpr_left_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 874;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
                goto branch_yes_2;
            } else {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assign_source_7;
                PyObject *tmp_called_instance_5;
                PyObject *tmp_called_instance_6;
                PyObject *tmp_mvar_value_4;
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

                if (unlikely(tmp_mvar_value_4 == NULL)) {
                    tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
                }

                if (tmp_mvar_value_4 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
                    exception_tb = NULL;

                    exception_lineno = 875;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_6 = tmp_mvar_value_4;
                frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 875;
                tmp_called_instance_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_6, const_str_plain_popen, &PyTuple_GET_ITEM(const_tuple_str_digest_0c8d3c6eed5d4373e00b3d74bc2f9bc8_tuple, 0));

                if (tmp_called_instance_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 875;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 875;
                tmp_assign_source_7 = CALL_METHOD_NO_ARGS(tmp_called_instance_5, const_str_plain_read);
                Py_DECREF(tmp_called_instance_5);
                if (tmp_assign_source_7 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 875;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert(var_txt == NULL);
                var_txt = tmp_assign_source_7;
            }
            {
                PyObject *tmp_assign_source_8;
                PyObject *tmp_called_instance_7;
                PyObject *tmp_mvar_value_5;
                PyObject *tmp_args_element_name_5;
                PyObject *tmp_args_element_name_6;
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

                if (unlikely(tmp_mvar_value_5 == NULL)) {
                    tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
                }

                if (tmp_mvar_value_5 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
                    exception_tb = NULL;

                    exception_lineno = 877;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_7 = tmp_mvar_value_5;
                tmp_args_element_name_5 = const_str_digest_66dc380ed6bde77ae6e7bb85e234ea0d;
                CHECK_OBJECT(var_txt);
                tmp_args_element_name_6 = var_txt;
                frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 877;
                {
                    PyObject *call_args[] = {tmp_args_element_name_5, tmp_args_element_name_6};
                    tmp_assign_source_8 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_7, const_str_plain_findall, call_args);
                }

                if (tmp_assign_source_8 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 877;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert(var_list_u == NULL);
                var_list_u = tmp_assign_source_8;
            }
            {
                PyObject *tmp_assign_source_9;
                PyObject *tmp_iter_arg_2;
                CHECK_OBJECT(var_list_u);
                tmp_iter_arg_2 = var_list_u;
                tmp_assign_source_9 = MAKE_ITERATOR(tmp_iter_arg_2);
                if (tmp_assign_source_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 878;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert(tmp_for_loop_2__for_iterator == NULL);
                tmp_for_loop_2__for_iterator = tmp_assign_source_9;
            }
            // Tried code:
            loop_start_2:;
            {
                PyObject *tmp_next_source_2;
                PyObject *tmp_assign_source_10;
                CHECK_OBJECT(tmp_for_loop_2__for_iterator);
                tmp_next_source_2 = tmp_for_loop_2__for_iterator;
                tmp_assign_source_10 = ITERATOR_NEXT(tmp_next_source_2);
                if (tmp_assign_source_10 == NULL) {
                    if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                        goto loop_end_2;
                    } else {

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        exception_lineno = 878;
                        goto try_except_handler_3;
                    }
                }

                {
                    PyObject *old = tmp_for_loop_2__iter_value;
                    tmp_for_loop_2__iter_value = tmp_assign_source_10;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_11;
                CHECK_OBJECT(tmp_for_loop_2__iter_value);
                tmp_assign_source_11 = tmp_for_loop_2__iter_value;
                {
                    PyObject *old = var_u;
                    var_u = tmp_assign_source_11;
                    Py_INCREF(var_u);
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_12;
                PyObject *tmp_called_instance_8;
                PyObject *tmp_called_name_3;
                PyObject *tmp_source_name_10;
                PyObject *tmp_mvar_value_6;
                PyObject *tmp_args_element_name_7;
                PyObject *tmp_left_name_2;
                PyObject *tmp_source_name_11;
                PyObject *tmp_right_name_2;
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

                if (unlikely(tmp_mvar_value_6 == NULL)) {
                    tmp_mvar_value_6 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
                }

                if (tmp_mvar_value_6 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
                    exception_tb = NULL;

                    exception_lineno = 879;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto try_except_handler_3;
                }

                tmp_source_name_10 = tmp_mvar_value_6;
                tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_popen);
                if (tmp_called_name_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 879;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto try_except_handler_3;
                }
                CHECK_OBJECT(par_parent);
                tmp_source_name_11 = par_parent;
                tmp_left_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_prefix);
                if (tmp_left_name_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_3);

                    exception_lineno = 879;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto try_except_handler_3;
                }
                tmp_right_name_2 = const_str_plain_mount;
                tmp_args_element_name_7 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_2, tmp_right_name_2);
                Py_DECREF(tmp_left_name_2);
                if (tmp_args_element_name_7 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_name_3);

                    exception_lineno = 879;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto try_except_handler_3;
                }
                frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 879;
                tmp_called_instance_8 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_7);
                Py_DECREF(tmp_called_name_3);
                Py_DECREF(tmp_args_element_name_7);
                if (tmp_called_instance_8 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 879;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto try_except_handler_3;
                }
                frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 879;
                tmp_assign_source_12 = CALL_METHOD_NO_ARGS(tmp_called_instance_8, const_str_plain_read);
                Py_DECREF(tmp_called_instance_8);
                if (tmp_assign_source_12 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 879;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto try_except_handler_3;
                }
                {
                    PyObject *old = var_txt1;
                    var_txt1 = tmp_assign_source_12;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_13;
                PyObject *tmp_called_instance_9;
                PyObject *tmp_mvar_value_7;
                PyObject *tmp_args_element_name_8;
                PyObject *tmp_args_element_name_9;
                tmp_mvar_value_7 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

                if (unlikely(tmp_mvar_value_7 == NULL)) {
                    tmp_mvar_value_7 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
                }

                if (tmp_mvar_value_7 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
                    exception_tb = NULL;

                    exception_lineno = 880;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto try_except_handler_3;
                }

                tmp_called_instance_9 = tmp_mvar_value_7;
                CHECK_OBJECT(var_u);
                tmp_args_element_name_8 = var_u;
                CHECK_OBJECT(var_txt1);
                tmp_args_element_name_9 = var_txt1;
                frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 880;
                {
                    PyObject *call_args[] = {tmp_args_element_name_8, tmp_args_element_name_9};
                    tmp_assign_source_13 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_9, const_str_plain_search, call_args);
                }

                if (tmp_assign_source_13 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 880;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto try_except_handler_3;
                }
                {
                    PyObject *old = var_m;
                    var_m = tmp_assign_source_13;
                    Py_XDECREF(old);
                }

            }
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_operand_name_1;
                CHECK_OBJECT(var_m);
                tmp_operand_name_1 = var_m;
                tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 881;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto try_except_handler_3;
                }
                tmp_condition_result_3 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_3;
                } else {
                    goto branch_no_3;
                }
                branch_yes_3:;
                {
                    PyObject *tmp_assign_source_14;
                    PyObject *tmp_called_instance_10;
                    PyObject *tmp_called_name_4;
                    PyObject *tmp_source_name_12;
                    PyObject *tmp_mvar_value_8;
                    PyObject *tmp_args_element_name_10;
                    PyObject *tmp_left_name_3;
                    PyObject *tmp_source_name_13;
                    PyObject *tmp_right_name_3;
                    tmp_mvar_value_8 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

                    if (unlikely(tmp_mvar_value_8 == NULL)) {
                        tmp_mvar_value_8 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
                    }

                    if (tmp_mvar_value_8 == NULL) {

                        exception_type = PyExc_NameError;
                        Py_INCREF(exception_type);
                        exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
                        exception_tb = NULL;

                        exception_lineno = 882;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_3;
                    }

                    tmp_source_name_12 = tmp_mvar_value_8;
                    tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_popen);
                    if (tmp_called_name_4 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 882;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_3;
                    }
                    CHECK_OBJECT(par_parent);
                    tmp_source_name_13 = par_parent;
                    tmp_left_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain_prefix);
                    if (tmp_left_name_3 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_4);

                        exception_lineno = 882;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_3;
                    }
                    tmp_right_name_3 = const_str_plain_blkid;
                    tmp_args_element_name_10 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_3, tmp_right_name_3);
                    Py_DECREF(tmp_left_name_3);
                    if (tmp_args_element_name_10 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_4);

                        exception_lineno = 882;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_3;
                    }
                    frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 882;
                    tmp_called_instance_10 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_4, tmp_args_element_name_10);
                    Py_DECREF(tmp_called_name_4);
                    Py_DECREF(tmp_args_element_name_10);
                    if (tmp_called_instance_10 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 882;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_3;
                    }
                    frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 882;
                    tmp_assign_source_14 = CALL_METHOD_NO_ARGS(tmp_called_instance_10, const_str_plain_read);
                    Py_DECREF(tmp_called_instance_10);
                    if (tmp_assign_source_14 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 882;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_3;
                    }
                    {
                        PyObject *old = var_txt2;
                        var_txt2 = tmp_assign_source_14;
                        Py_XDECREF(old);
                    }

                }
                {
                    PyObject *tmp_assign_source_15;
                    PyObject *tmp_left_name_4;
                    PyObject *tmp_right_name_4;
                    CHECK_OBJECT(var_u);
                    tmp_left_name_4 = var_u;
                    tmp_right_name_4 = const_str_digest_2a99f2106e37159d649e36cd642454d7;
                    tmp_assign_source_15 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_4, tmp_right_name_4);
                    if (tmp_assign_source_15 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 883;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_3;
                    }
                    {
                        PyObject *old = var_rgx;
                        var_rgx = tmp_assign_source_15;
                        Py_XDECREF(old);
                    }

                }
                {
                    PyObject *tmp_assign_source_16;
                    PyObject *tmp_called_instance_11;
                    PyObject *tmp_mvar_value_9;
                    PyObject *tmp_args_element_name_11;
                    PyObject *tmp_args_element_name_12;
                    tmp_mvar_value_9 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

                    if (unlikely(tmp_mvar_value_9 == NULL)) {
                        tmp_mvar_value_9 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
                    }

                    if (tmp_mvar_value_9 == NULL) {

                        exception_type = PyExc_NameError;
                        Py_INCREF(exception_type);
                        exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
                        exception_tb = NULL;

                        exception_lineno = 884;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_3;
                    }

                    tmp_called_instance_11 = tmp_mvar_value_9;
                    CHECK_OBJECT(var_rgx);
                    tmp_args_element_name_11 = var_rgx;
                    CHECK_OBJECT(var_txt2);
                    tmp_args_element_name_12 = var_txt2;
                    frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 884;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_11, tmp_args_element_name_12};
                        tmp_assign_source_16 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_11, const_str_plain_search, call_args);
                    }

                    if (tmp_assign_source_16 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 884;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_3;
                    }
                    {
                        PyObject *old = var_m1;
                        var_m1 = tmp_assign_source_16;
                        Py_XDECREF(old);
                    }

                }
                {
                    nuitka_bool tmp_condition_result_4;
                    int tmp_truth_name_1;
                    CHECK_OBJECT(var_m1);
                    tmp_truth_name_1 = CHECK_IF_TRUE(var_m1);
                    if (tmp_truth_name_1 == -1) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 885;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_3;
                    }
                    tmp_condition_result_4 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
                        goto branch_yes_4;
                    } else {
                        goto branch_no_4;
                    }
                    branch_yes_4:;
                    {
                        PyObject *tmp_assign_source_17;
                        tmp_assign_source_17 = const_str_digest_1573e6b4805ac8da2565b5c6f8345d3c;
                        {
                            PyObject *old = var_r2;
                            var_r2 = tmp_assign_source_17;
                            Py_INCREF(var_r2);
                            Py_XDECREF(old);
                        }

                    }
                    {
                        PyObject *tmp_assign_source_18;
                        PyObject *tmp_called_instance_12;
                        CHECK_OBJECT(var_m1);
                        tmp_called_instance_12 = var_m1;
                        frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 887;
                        tmp_assign_source_18 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_12, const_str_plain_group, &PyTuple_GET_ITEM(const_tuple_int_0_tuple, 0));

                        if (tmp_assign_source_18 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 887;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        {
                            PyObject *old = var_txt3;
                            var_txt3 = tmp_assign_source_18;
                            Py_XDECREF(old);
                        }

                    }
                    {
                        PyObject *tmp_assign_source_19;
                        PyObject *tmp_called_instance_13;
                        PyObject *tmp_mvar_value_10;
                        PyObject *tmp_args_element_name_13;
                        PyObject *tmp_args_element_name_14;
                        tmp_mvar_value_10 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

                        if (unlikely(tmp_mvar_value_10 == NULL)) {
                            tmp_mvar_value_10 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
                        }

                        if (tmp_mvar_value_10 == NULL) {

                            exception_type = PyExc_NameError;
                            Py_INCREF(exception_type);
                            exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
                            exception_tb = NULL;

                            exception_lineno = 888;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_3;
                        }

                        tmp_called_instance_13 = tmp_mvar_value_10;
                        CHECK_OBJECT(var_r2);
                        tmp_args_element_name_13 = var_r2;
                        CHECK_OBJECT(var_txt3);
                        tmp_args_element_name_14 = var_txt3;
                        frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 888;
                        {
                            PyObject *call_args[] = {tmp_args_element_name_13, tmp_args_element_name_14};
                            tmp_assign_source_19 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_13, const_str_plain_search, call_args);
                        }

                        if (tmp_assign_source_19 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 888;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        {
                            PyObject *old = var_m2;
                            var_m2 = tmp_assign_source_19;
                            Py_XDECREF(old);
                        }

                    }
                    {
                        PyObject *tmp_assign_source_20;
                        PyObject *tmp_called_instance_14;
                        CHECK_OBJECT(var_m2);
                        tmp_called_instance_14 = var_m2;
                        frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 889;
                        tmp_assign_source_20 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_14, const_str_plain_group, &PyTuple_GET_ITEM(const_tuple_int_pos_1_tuple, 0));

                        if (tmp_assign_source_20 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 889;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        {
                            PyObject *old = var_type_a;
                            var_type_a = tmp_assign_source_20;
                            Py_XDECREF(old);
                        }

                    }
                    {
                        PyObject *tmp_assign_source_21;
                        PyObject *tmp_called_name_5;
                        PyObject *tmp_source_name_14;
                        PyObject *tmp_mvar_value_11;
                        PyObject *tmp_args_element_name_15;
                        PyObject *tmp_left_name_5;
                        PyObject *tmp_left_name_6;
                        PyObject *tmp_left_name_7;
                        PyObject *tmp_left_name_8;
                        PyObject *tmp_left_name_9;
                        PyObject *tmp_source_name_15;
                        PyObject *tmp_right_name_5;
                        PyObject *tmp_right_name_6;
                        PyObject *tmp_right_name_7;
                        PyObject *tmp_right_name_8;
                        PyObject *tmp_right_name_9;
                        tmp_mvar_value_11 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

                        if (unlikely(tmp_mvar_value_11 == NULL)) {
                            tmp_mvar_value_11 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
                        }

                        if (tmp_mvar_value_11 == NULL) {

                            exception_type = PyExc_NameError;
                            Py_INCREF(exception_type);
                            exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
                            exception_tb = NULL;

                            exception_lineno = 890;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_3;
                        }

                        tmp_source_name_14 = tmp_mvar_value_11;
                        tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_14, const_str_plain_system);
                        if (tmp_called_name_5 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 890;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        CHECK_OBJECT(par_parent);
                        tmp_source_name_15 = par_parent;
                        tmp_left_name_9 = LOOKUP_ATTRIBUTE(tmp_source_name_15, const_str_plain_prefix);
                        if (tmp_left_name_9 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_5);

                            exception_lineno = 890;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        tmp_right_name_5 = const_str_digest_f3d167b0dffa906401fa6c94639c194d;
                        tmp_left_name_8 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_9, tmp_right_name_5);
                        Py_DECREF(tmp_left_name_9);
                        if (tmp_left_name_8 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_5);

                            exception_lineno = 890;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        CHECK_OBJECT(var_type_a);
                        tmp_right_name_6 = var_type_a;
                        tmp_left_name_7 = BINARY_OPERATION_ADD_OBJECT_OBJECT(tmp_left_name_8, tmp_right_name_6);
                        Py_DECREF(tmp_left_name_8);
                        if (tmp_left_name_7 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_5);

                            exception_lineno = 890;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        tmp_right_name_7 = const_str_space;
                        tmp_left_name_6 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_7, tmp_right_name_7);
                        Py_DECREF(tmp_left_name_7);
                        if (tmp_left_name_6 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_5);

                            exception_lineno = 890;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        CHECK_OBJECT(var_u);
                        tmp_right_name_8 = var_u;
                        tmp_left_name_5 = BINARY_OPERATION_ADD_OBJECT_OBJECT(tmp_left_name_6, tmp_right_name_8);
                        Py_DECREF(tmp_left_name_6);
                        if (tmp_left_name_5 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_5);

                            exception_lineno = 890;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        tmp_right_name_9 = const_str_plain_1;
                        tmp_args_element_name_15 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_5, tmp_right_name_9);
                        Py_DECREF(tmp_left_name_5);
                        if (tmp_args_element_name_15 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_5);

                            exception_lineno = 890;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 890;
                        tmp_assign_source_21 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_5, tmp_args_element_name_15);
                        Py_DECREF(tmp_called_name_5);
                        Py_DECREF(tmp_args_element_name_15);
                        if (tmp_assign_source_21 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 890;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_3;
                        }
                        {
                            PyObject *old = var_s;
                            var_s = tmp_assign_source_21;
                            Py_XDECREF(old);
                        }

                    }
                    branch_no_4:;
                }
                branch_no_3:;
            }
            if (CONSIDER_THREADING() == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 878;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto try_except_handler_3;
            }
            goto loop_start_2;
            loop_end_2:;
            goto try_end_2;
            // Exception handler code:
            try_except_handler_3:;
            exception_keeper_type_2 = exception_type;
            exception_keeper_value_2 = exception_value;
            exception_keeper_tb_2 = exception_tb;
            exception_keeper_lineno_2 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF(tmp_for_loop_2__iter_value);
            tmp_for_loop_2__iter_value = NULL;

            CHECK_OBJECT((PyObject *)tmp_for_loop_2__for_iterator);
            Py_DECREF(tmp_for_loop_2__for_iterator);
            tmp_for_loop_2__for_iterator = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_2;
            exception_value = exception_keeper_value_2;
            exception_tb = exception_keeper_tb_2;
            exception_lineno = exception_keeper_lineno_2;

            goto frame_exception_exit_1;
            // End of try:
            try_end_2:;
            Py_XDECREF(tmp_for_loop_2__iter_value);
            tmp_for_loop_2__iter_value = NULL;

            CHECK_OBJECT((PyObject *)tmp_for_loop_2__for_iterator);
            Py_DECREF(tmp_for_loop_2__for_iterator);
            tmp_for_loop_2__for_iterator = NULL;

            {
                PyObject *tmp_assign_source_22;
                PyObject *tmp_called_instance_15;
                PyObject *tmp_called_instance_16;
                PyObject *tmp_mvar_value_12;
                tmp_mvar_value_12 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

                if (unlikely(tmp_mvar_value_12 == NULL)) {
                    tmp_mvar_value_12 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
                }

                if (tmp_mvar_value_12 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
                    exception_tb = NULL;

                    exception_lineno = 891;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_16 = tmp_mvar_value_12;
                frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 891;
                tmp_called_instance_15 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_16, const_str_plain_popen, &PyTuple_GET_ITEM(const_tuple_str_plain_mount_tuple, 0));

                if (tmp_called_instance_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 891;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 891;
                tmp_assign_source_22 = CALL_METHOD_NO_ARGS(tmp_called_instance_15, const_str_plain_read);
                Py_DECREF(tmp_called_instance_15);
                if (tmp_assign_source_22 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 891;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_txt3;
                    var_txt3 = tmp_assign_source_22;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assattr_name_3;
                PyObject *tmp_called_instance_17;
                PyObject *tmp_mvar_value_13;
                PyObject *tmp_args_element_name_16;
                PyObject *tmp_args_element_name_17;
                PyObject *tmp_assattr_target_3;
                tmp_mvar_value_13 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

                if (unlikely(tmp_mvar_value_13 == NULL)) {
                    tmp_mvar_value_13 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
                }

                if (tmp_mvar_value_13 == NULL) {

                    exception_type = PyExc_NameError;
                    Py_INCREF(exception_type);
                    exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
                    exception_tb = NULL;

                    exception_lineno = 893;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_17 = tmp_mvar_value_13;
                tmp_args_element_name_16 = const_str_digest_362b9c39b7be7164b4f637e29c9f8900;
                CHECK_OBJECT(var_txt3);
                tmp_args_element_name_17 = var_txt3;
                frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 893;
                {
                    PyObject *call_args[] = {tmp_args_element_name_16, tmp_args_element_name_17};
                    tmp_assattr_name_3 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_17, const_str_plain_findall, call_args);
                }

                if (tmp_assattr_name_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 893;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT(par_parent);
                tmp_assattr_target_3 = par_parent;
                tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, const_str_plain_usb_list, tmp_assattr_name_3);
                Py_DECREF(tmp_assattr_name_3);
                if (tmp_result == false) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 893;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
            }
            branch_no_2:;
        }
        branch_end_1:;
    }
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_source_name_16;
        CHECK_OBJECT(par_parent);
        tmp_source_name_16 = par_parent;
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE(tmp_source_name_16, const_str_plain_usb_list);
        if (tmp_len_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 895;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_23 = BUILTIN_LEN(tmp_len_arg_1);
        Py_DECREF(tmp_len_arg_1);
        if (tmp_assign_source_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 895;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_length == NULL);
        var_length = tmp_assign_source_23;
    }
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        CHECK_OBJECT(var_length);
        tmp_compexpr_left_3 = var_length;
        tmp_compexpr_right_3 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_INT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        assert(!(tmp_res == -1));
        tmp_condition_result_5 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            PyObject *tmp_assign_source_24;
            tmp_assign_source_24 = const_int_0;
            assert(var_count == NULL);
            Py_INCREF(tmp_assign_source_24);
            var_count = tmp_assign_source_24;
        }
        {
            PyObject *tmp_assign_source_25;
            tmp_assign_source_25 = PyList_New(0);
            assert(var_usb_final == NULL);
            var_usb_final = tmp_assign_source_25;
        }
        {
            PyObject *tmp_assign_source_26;
            PyObject *tmp_len_arg_2;
            PyObject *tmp_source_name_17;
            CHECK_OBJECT(par_parent);
            tmp_source_name_17 = par_parent;
            tmp_len_arg_2 = LOOKUP_ATTRIBUTE(tmp_source_name_17, const_str_plain_devs_list);
            if (tmp_len_arg_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 900;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_26 = BUILTIN_LEN(tmp_len_arg_2);
            Py_DECREF(tmp_len_arg_2);
            if (tmp_assign_source_26 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 900;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_dl_len == NULL);
            var_dl_len = tmp_assign_source_26;
        }
        {
            PyObject *tmp_assign_source_27;
            PyObject *tmp_iter_arg_3;
            PyObject *tmp_range_arg_1;
            CHECK_OBJECT(var_dl_len);
            tmp_range_arg_1 = var_dl_len;
            tmp_iter_arg_3 = BUILTIN_RANGE(tmp_range_arg_1);
            if (tmp_iter_arg_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 901;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_27 = MAKE_ITERATOR(tmp_iter_arg_3);
            Py_DECREF(tmp_iter_arg_3);
            if (tmp_assign_source_27 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 901;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(tmp_for_loop_3__for_iterator == NULL);
            tmp_for_loop_3__for_iterator = tmp_assign_source_27;
        }
        // Tried code:
        loop_start_3:;
        {
            PyObject *tmp_next_source_3;
            PyObject *tmp_assign_source_28;
            CHECK_OBJECT(tmp_for_loop_3__for_iterator);
            tmp_next_source_3 = tmp_for_loop_3__for_iterator;
            tmp_assign_source_28 = ITERATOR_NEXT(tmp_next_source_3);
            if (tmp_assign_source_28 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_3;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    exception_lineno = 901;
                    goto try_except_handler_4;
                }
            }

            {
                PyObject *old = tmp_for_loop_3__iter_value;
                tmp_for_loop_3__iter_value = tmp_assign_source_28;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_29;
            CHECK_OBJECT(tmp_for_loop_3__iter_value);
            tmp_assign_source_29 = tmp_for_loop_3__iter_value;
            {
                PyObject *old = var_x;
                var_x = tmp_assign_source_29;
                Py_INCREF(var_x);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_called_instance_18;
            PyObject *tmp_mvar_value_14;
            PyObject *tmp_call_result_3;
            PyObject *tmp_args_element_name_18;
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_runop);

            if (unlikely(tmp_mvar_value_14 == NULL)) {
                tmp_mvar_value_14 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_runop);
            }

            if (tmp_mvar_value_14 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 490 ], 34, 0);
                exception_tb = NULL;

                exception_lineno = 902;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto try_except_handler_4;
            }

            tmp_called_instance_18 = tmp_mvar_value_14;
            CHECK_OBJECT(var_x);
            tmp_args_element_name_18 = var_x;
            frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 902;
            {
                PyObject *call_args[] = {tmp_args_element_name_18};
                tmp_call_result_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_18, const_str_plain_prelock, call_args);
            }

            if (tmp_call_result_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 902;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto try_except_handler_4;
            }
            Py_DECREF(tmp_call_result_3);
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 901;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto try_except_handler_4;
        }
        goto loop_start_3;
        loop_end_3:;
        goto try_end_3;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_for_loop_3__iter_value);
        tmp_for_loop_3__iter_value = NULL;

        CHECK_OBJECT((PyObject *)tmp_for_loop_3__for_iterator);
        Py_DECREF(tmp_for_loop_3__for_iterator);
        tmp_for_loop_3__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto frame_exception_exit_1;
        // End of try:
        try_end_3:;
        Py_XDECREF(tmp_for_loop_3__iter_value);
        tmp_for_loop_3__iter_value = NULL;

        CHECK_OBJECT((PyObject *)tmp_for_loop_3__for_iterator);
        Py_DECREF(tmp_for_loop_3__for_iterator);
        tmp_for_loop_3__for_iterator = NULL;

        {
            PyObject *tmp_assign_source_30;
            PyObject *tmp_called_instance_19;
            PyObject *tmp_called_name_6;
            PyObject *tmp_source_name_18;
            PyObject *tmp_mvar_value_15;
            PyObject *tmp_args_element_name_19;
            PyObject *tmp_left_name_10;
            PyObject *tmp_source_name_19;
            PyObject *tmp_right_name_10;
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

            if (unlikely(tmp_mvar_value_15 == NULL)) {
                tmp_mvar_value_15 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
            }

            if (tmp_mvar_value_15 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
                exception_tb = NULL;

                exception_lineno = 903;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_18 = tmp_mvar_value_15;
            tmp_called_name_6 = LOOKUP_ATTRIBUTE(tmp_source_name_18, const_str_plain_popen);
            if (tmp_called_name_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 903;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_parent);
            tmp_source_name_19 = par_parent;
            tmp_left_name_10 = LOOKUP_ATTRIBUTE(tmp_source_name_19, const_str_plain_prefix);
            if (tmp_left_name_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_6);

                exception_lineno = 903;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_right_name_10 = const_str_digest_500f14b62f4ffa958f482307aaaeaaa0;
            tmp_args_element_name_19 = BINARY_OPERATION_ADD_OBJECT_STR(tmp_left_name_10, tmp_right_name_10);
            Py_DECREF(tmp_left_name_10);
            if (tmp_args_element_name_19 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_6);

                exception_lineno = 903;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 903;
            tmp_called_instance_19 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_6, tmp_args_element_name_19);
            Py_DECREF(tmp_called_name_6);
            Py_DECREF(tmp_args_element_name_19);
            if (tmp_called_instance_19 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 903;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 903;
            tmp_assign_source_30 = CALL_METHOD_NO_ARGS(tmp_called_instance_19, const_str_plain_read);
            Py_DECREF(tmp_called_instance_19);
            if (tmp_assign_source_30 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 903;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_txt_s == NULL);
            var_txt_s = tmp_assign_source_30;
        }
        {
            PyObject *tmp_assign_source_31;
            PyObject *tmp_iter_arg_4;
            PyObject *tmp_range_arg_2;
            CHECK_OBJECT(var_dl_len);
            tmp_range_arg_2 = var_dl_len;
            tmp_iter_arg_4 = BUILTIN_RANGE(tmp_range_arg_2);
            if (tmp_iter_arg_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 904;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_31 = MAKE_ITERATOR(tmp_iter_arg_4);
            Py_DECREF(tmp_iter_arg_4);
            if (tmp_assign_source_31 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 904;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(tmp_for_loop_4__for_iterator == NULL);
            tmp_for_loop_4__for_iterator = tmp_assign_source_31;
        }
        // Tried code:
        loop_start_4:;
        {
            PyObject *tmp_next_source_4;
            PyObject *tmp_assign_source_32;
            CHECK_OBJECT(tmp_for_loop_4__for_iterator);
            tmp_next_source_4 = tmp_for_loop_4__for_iterator;
            tmp_assign_source_32 = ITERATOR_NEXT(tmp_next_source_4);
            if (tmp_assign_source_32 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_4;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    exception_lineno = 904;
                    goto try_except_handler_5;
                }
            }

            {
                PyObject *old = tmp_for_loop_4__iter_value;
                tmp_for_loop_4__iter_value = tmp_assign_source_32;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_33;
            CHECK_OBJECT(tmp_for_loop_4__iter_value);
            tmp_assign_source_33 = tmp_for_loop_4__iter_value;
            {
                PyObject *old = var_x;
                var_x = tmp_assign_source_33;
                Py_INCREF(var_x);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_called_instance_20;
            PyObject *tmp_mvar_value_16;
            PyObject *tmp_call_result_4;
            PyObject *tmp_args_element_name_20;
            tmp_mvar_value_16 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_runop);

            if (unlikely(tmp_mvar_value_16 == NULL)) {
                tmp_mvar_value_16 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_runop);
            }

            if (tmp_mvar_value_16 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 490 ], 34, 0);
                exception_tb = NULL;

                exception_lineno = 905;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto try_except_handler_5;
            }

            tmp_called_instance_20 = tmp_mvar_value_16;
            CHECK_OBJECT(var_x);
            tmp_args_element_name_20 = var_x;
            frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 905;
            {
                PyObject *call_args[] = {tmp_args_element_name_20};
                tmp_call_result_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_20, const_str_plain_postlock, call_args);
            }

            if (tmp_call_result_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 905;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto try_except_handler_5;
            }
            Py_DECREF(tmp_call_result_4);
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 904;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        goto loop_start_4;
        loop_end_4:;
        goto try_end_4;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_for_loop_4__iter_value);
        tmp_for_loop_4__iter_value = NULL;

        CHECK_OBJECT((PyObject *)tmp_for_loop_4__for_iterator);
        Py_DECREF(tmp_for_loop_4__for_iterator);
        tmp_for_loop_4__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto frame_exception_exit_1;
        // End of try:
        try_end_4:;
        Py_XDECREF(tmp_for_loop_4__iter_value);
        tmp_for_loop_4__iter_value = NULL;

        CHECK_OBJECT((PyObject *)tmp_for_loop_4__for_iterator);
        Py_DECREF(tmp_for_loop_4__for_iterator);
        tmp_for_loop_4__for_iterator = NULL;

        Py_XDECREF(var_rgx);
        var_rgx = NULL;

        {
            PyObject *tmp_assign_source_34;
            PyObject *tmp_called_instance_21;
            PyObject *tmp_mvar_value_17;
            PyObject *tmp_args_element_name_21;
            PyObject *tmp_args_element_name_22;
            tmp_mvar_value_17 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

            if (unlikely(tmp_mvar_value_17 == NULL)) {
                tmp_mvar_value_17 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
            }

            if (tmp_mvar_value_17 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
                exception_tb = NULL;

                exception_lineno = 907;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_21 = tmp_mvar_value_17;
            tmp_args_element_name_21 = const_str_digest_1b45e1898e1dfabec322865372bbd4e7;
            CHECK_OBJECT(var_txt_s);
            tmp_args_element_name_22 = var_txt_s;
            frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 907;
            {
                PyObject *call_args[] = {tmp_args_element_name_21, tmp_args_element_name_22};
                tmp_assign_source_34 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_21, const_str_plain_findall, call_args);
            }

            if (tmp_assign_source_34 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 907;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_list_d == NULL);
            var_list_d = tmp_assign_source_34;
        }
        {
            PyObject *tmp_assign_source_35;
            PyObject *tmp_iter_arg_5;
            PyObject *tmp_source_name_20;
            CHECK_OBJECT(par_parent);
            tmp_source_name_20 = par_parent;
            tmp_iter_arg_5 = LOOKUP_ATTRIBUTE(tmp_source_name_20, const_str_plain_usb_list);
            if (tmp_iter_arg_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 908;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_35 = MAKE_ITERATOR(tmp_iter_arg_5);
            Py_DECREF(tmp_iter_arg_5);
            if (tmp_assign_source_35 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 908;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(tmp_for_loop_5__for_iterator == NULL);
            tmp_for_loop_5__for_iterator = tmp_assign_source_35;
        }
        // Tried code:
        loop_start_5:;
        {
            PyObject *tmp_next_source_5;
            PyObject *tmp_assign_source_36;
            CHECK_OBJECT(tmp_for_loop_5__for_iterator);
            tmp_next_source_5 = tmp_for_loop_5__for_iterator;
            tmp_assign_source_36 = ITERATOR_NEXT(tmp_next_source_5);
            if (tmp_assign_source_36 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_5;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    exception_lineno = 908;
                    goto try_except_handler_6;
                }
            }

            {
                PyObject *old = tmp_for_loop_5__iter_value;
                tmp_for_loop_5__iter_value = tmp_assign_source_36;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_37;
            CHECK_OBJECT(tmp_for_loop_5__iter_value);
            tmp_assign_source_37 = tmp_for_loop_5__iter_value;
            {
                PyObject *old = var_d;
                var_d = tmp_assign_source_37;
                Py_INCREF(var_d);
                Py_XDECREF(old);
            }

        }
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            PyObject *tmp_source_name_21;
            CHECK_OBJECT(par_parent);
            tmp_source_name_21 = par_parent;
            tmp_compexpr_left_4 = LOOKUP_ATTRIBUTE(tmp_source_name_21, const_str_plain_DEV_OS);
            if (tmp_compexpr_left_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 910;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto try_except_handler_6;
            }
            tmp_compexpr_right_4 = const_str_plain_Windows;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_4, tmp_compexpr_right_4);
            Py_DECREF(tmp_compexpr_left_4);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 910;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto try_except_handler_6;
            }
            tmp_condition_result_6 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
                goto branch_yes_6;
            } else {
                goto branch_no_6;
            }
            branch_yes_6:;
            {
                PyObject *tmp_assign_source_38;
                PyObject *tmp_left_name_11;
                PyObject *tmp_right_name_11;
                PyObject *tmp_subscribed_name_1;
                PyObject *tmp_subscript_name_1;
                tmp_left_name_11 = const_str_digest_860d00cf321643e9e9ab82de992e8e2f;
                CHECK_OBJECT(var_d);
                tmp_subscribed_name_1 = var_d;
                tmp_subscript_name_1 = const_int_pos_1;
                tmp_right_name_11 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_1, tmp_subscript_name_1, 1);
                if (tmp_right_name_11 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 911;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto try_except_handler_6;
                }
                tmp_assign_source_38 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_11, tmp_right_name_11);
                Py_DECREF(tmp_right_name_11);
                if (tmp_assign_source_38 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 911;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto try_except_handler_6;
                }
                {
                    PyObject *old = var_mod;
                    var_mod = tmp_assign_source_38;
                    Py_XDECREF(old);
                }

            }
            {
                nuitka_bool tmp_condition_result_7;
                PyObject *tmp_compexpr_left_5;
                PyObject *tmp_compexpr_right_5;
                CHECK_OBJECT(var_mod);
                tmp_compexpr_left_5 = var_mod;
                CHECK_OBJECT(var_list_d);
                tmp_compexpr_right_5 = var_list_d;
                tmp_res = PySequence_Contains(tmp_compexpr_right_5, tmp_compexpr_left_5);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 912;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto try_except_handler_6;
                }
                tmp_condition_result_7 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_7;
                } else {
                    goto branch_no_7;
                }
                branch_yes_7:;
                {
                    PyObject *tmp_called_name_7;
                    PyObject *tmp_source_name_22;
                    PyObject *tmp_source_name_23;
                    PyObject *tmp_call_result_5;
                    PyObject *tmp_args_element_name_23;
                    PyObject *tmp_subscribed_name_2;
                    PyObject *tmp_subscript_name_2;
                    CHECK_OBJECT(par_self);
                    tmp_source_name_23 = par_self;
                    tmp_source_name_22 = LOOKUP_ATTRIBUTE(tmp_source_name_23, const_str_plain_usb_menu);
                    if (tmp_source_name_22 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 913;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_6;
                    }
                    tmp_called_name_7 = LOOKUP_ATTRIBUTE(tmp_source_name_22, const_str_plain_append_text);
                    Py_DECREF(tmp_source_name_22);
                    if (tmp_called_name_7 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 913;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_6;
                    }
                    CHECK_OBJECT(var_d);
                    tmp_subscribed_name_2 = var_d;
                    tmp_subscript_name_2 = const_int_0;
                    tmp_args_element_name_23 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_2, tmp_subscript_name_2, 0);
                    if (tmp_args_element_name_23 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_name_7);

                        exception_lineno = 913;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_6;
                    }
                    frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 913;
                    tmp_call_result_5 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_7, tmp_args_element_name_23);
                    Py_DECREF(tmp_called_name_7);
                    Py_DECREF(tmp_args_element_name_23);
                    if (tmp_call_result_5 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 913;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_6;
                    }
                    Py_DECREF(tmp_call_result_5);
                }
                {
                    PyObject *tmp_called_instance_22;
                    PyObject *tmp_call_result_6;
                    PyObject *tmp_args_element_name_24;
                    CHECK_OBJECT(var_usb_final);
                    tmp_called_instance_22 = var_usb_final;
                    CHECK_OBJECT(var_d);
                    tmp_args_element_name_24 = var_d;
                    frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 916;
                    {
                        PyObject *call_args[] = {tmp_args_element_name_24};
                        tmp_call_result_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_22, const_str_plain_append, call_args);
                    }

                    if (tmp_call_result_6 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 916;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_6;
                    }
                    Py_DECREF(tmp_call_result_6);
                }
                {
                    PyObject *tmp_assign_source_39;
                    PyObject *tmp_left_name_12;
                    PyObject *tmp_right_name_12;
                    if (var_count == NULL) {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF(exception_type);
                        exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "count");
                        exception_tb = NULL;

                        exception_lineno = 917;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_6;
                    }

                    tmp_left_name_12 = var_count;
                    tmp_right_name_12 = const_int_pos_1;
                    tmp_assign_source_39 = BINARY_OPERATION_ADD_OBJECT_INT(tmp_left_name_12, tmp_right_name_12);
                    if (tmp_assign_source_39 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 917;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_6;
                    }
                    {
                        PyObject *old = var_count;
                        var_count = tmp_assign_source_39;
                        Py_XDECREF(old);
                    }

                }
                branch_no_7:;
            }
            goto branch_end_6;
            branch_no_6:;
            {
                nuitka_bool tmp_condition_result_8;
                PyObject *tmp_compexpr_left_6;
                PyObject *tmp_compexpr_right_6;
                PyObject *tmp_source_name_24;
                CHECK_OBJECT(par_parent);
                tmp_source_name_24 = par_parent;
                tmp_compexpr_left_6 = LOOKUP_ATTRIBUTE(tmp_source_name_24, const_str_plain_DEV_OS);
                if (tmp_compexpr_left_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 918;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto try_except_handler_6;
                }
                tmp_compexpr_right_6 = const_str_plain_Linux;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_6, tmp_compexpr_right_6);
                Py_DECREF(tmp_compexpr_left_6);
                if (tmp_res == -1) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 918;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto try_except_handler_6;
                }
                tmp_condition_result_8 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
                    goto branch_yes_8;
                } else {
                    goto branch_no_8;
                }
                branch_yes_8:;
                {
                    nuitka_bool tmp_condition_result_9;
                    PyObject *tmp_compexpr_left_7;
                    PyObject *tmp_compexpr_right_7;
                    PyObject *tmp_subscribed_name_3;
                    PyObject *tmp_subscript_name_3;
                    CHECK_OBJECT(var_d);
                    tmp_subscribed_name_3 = var_d;
                    tmp_subscript_name_3 = const_int_0;
                    tmp_compexpr_left_7 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_3, tmp_subscript_name_3, 0);
                    if (tmp_compexpr_left_7 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 919;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_6;
                    }
                    CHECK_OBJECT(var_list_d);
                    tmp_compexpr_right_7 = var_list_d;
                    tmp_res = PySequence_Contains(tmp_compexpr_right_7, tmp_compexpr_left_7);
                    Py_DECREF(tmp_compexpr_left_7);
                    if (tmp_res == -1) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 919;
                        type_description_1 = "oooNNooNooooooooooooooooooooooo";
                        goto try_except_handler_6;
                    }
                    tmp_condition_result_9 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
                        goto branch_yes_9;
                    } else {
                        goto branch_no_9;
                    }
                    branch_yes_9:;
                    {
                        PyObject *tmp_called_name_8;
                        PyObject *tmp_source_name_25;
                        PyObject *tmp_source_name_26;
                        PyObject *tmp_call_result_7;
                        PyObject *tmp_args_element_name_25;
                        PyObject *tmp_subscribed_name_4;
                        PyObject *tmp_subscript_name_4;
                        CHECK_OBJECT(par_self);
                        tmp_source_name_26 = par_self;
                        tmp_source_name_25 = LOOKUP_ATTRIBUTE(tmp_source_name_26, const_str_plain_usb_menu);
                        if (tmp_source_name_25 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 920;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_6;
                        }
                        tmp_called_name_8 = LOOKUP_ATTRIBUTE(tmp_source_name_25, const_str_plain_append_text);
                        Py_DECREF(tmp_source_name_25);
                        if (tmp_called_name_8 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 920;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_6;
                        }
                        CHECK_OBJECT(var_d);
                        tmp_subscribed_name_4 = var_d;
                        tmp_subscript_name_4 = const_int_0;
                        tmp_args_element_name_25 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_4, tmp_subscript_name_4, 0);
                        if (tmp_args_element_name_25 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_called_name_8);

                            exception_lineno = 920;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_6;
                        }
                        frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 920;
                        tmp_call_result_7 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_8, tmp_args_element_name_25);
                        Py_DECREF(tmp_called_name_8);
                        Py_DECREF(tmp_args_element_name_25);
                        if (tmp_call_result_7 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 920;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_6;
                        }
                        Py_DECREF(tmp_call_result_7);
                    }
                    {
                        PyObject *tmp_called_instance_23;
                        PyObject *tmp_call_result_8;
                        PyObject *tmp_args_element_name_26;
                        CHECK_OBJECT(var_usb_final);
                        tmp_called_instance_23 = var_usb_final;
                        CHECK_OBJECT(var_d);
                        tmp_args_element_name_26 = var_d;
                        frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 921;
                        {
                            PyObject *call_args[] = {tmp_args_element_name_26};
                            tmp_call_result_8 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_23, const_str_plain_append, call_args);
                        }

                        if (tmp_call_result_8 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 921;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_6;
                        }
                        Py_DECREF(tmp_call_result_8);
                    }
                    {
                        PyObject *tmp_assign_source_40;
                        PyObject *tmp_left_name_13;
                        PyObject *tmp_right_name_13;
                        if (var_count == NULL) {

                            exception_type = PyExc_UnboundLocalError;
                            Py_INCREF(exception_type);
                            exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "count");
                            exception_tb = NULL;

                            exception_lineno = 922;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_6;
                        }

                        tmp_left_name_13 = var_count;
                        tmp_right_name_13 = const_int_pos_1;
                        tmp_assign_source_40 = BINARY_OPERATION_ADD_OBJECT_INT(tmp_left_name_13, tmp_right_name_13);
                        if (tmp_assign_source_40 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 922;
                            type_description_1 = "oooNNooNooooooooooooooooooooooo";
                            goto try_except_handler_6;
                        }
                        {
                            PyObject *old = var_count;
                            var_count = tmp_assign_source_40;
                            Py_XDECREF(old);
                        }

                    }
                    branch_no_9:;
                }
                branch_no_8:;
            }
            branch_end_6:;
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 908;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
        goto loop_start_5;
        loop_end_5:;
        goto try_end_5;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_for_loop_5__iter_value);
        tmp_for_loop_5__iter_value = NULL;

        CHECK_OBJECT((PyObject *)tmp_for_loop_5__for_iterator);
        Py_DECREF(tmp_for_loop_5__for_iterator);
        tmp_for_loop_5__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto frame_exception_exit_1;
        // End of try:
        try_end_5:;
        Py_XDECREF(tmp_for_loop_5__iter_value);
        tmp_for_loop_5__iter_value = NULL;

        CHECK_OBJECT((PyObject *)tmp_for_loop_5__for_iterator);
        Py_DECREF(tmp_for_loop_5__for_iterator);
        tmp_for_loop_5__for_iterator = NULL;

        {
            PyObject *tmp_assattr_name_4;
            PyObject *tmp_assattr_target_4;
            CHECK_OBJECT(var_usb_final);
            tmp_assattr_name_4 = var_usb_final;
            CHECK_OBJECT(par_parent);
            tmp_assattr_target_4 = par_parent;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, const_str_plain_usb_list, tmp_assattr_name_4);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 923;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            nuitka_bool tmp_condition_result_10;
            PyObject *tmp_compexpr_left_8;
            PyObject *tmp_compexpr_right_8;
            if (var_count == NULL) {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF(exception_type);
                exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "count");
                exception_tb = NULL;

                exception_lineno = 924;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_left_8 = var_count;
            tmp_compexpr_right_8 = const_int_0;
            tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_INT(tmp_compexpr_left_8, tmp_compexpr_right_8);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 924;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_10 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
                goto branch_yes_10;
            } else {
                goto branch_no_10;
            }
            branch_yes_10:;
            {
                PyObject *tmp_called_instance_24;
                PyObject *tmp_source_name_27;
                PyObject *tmp_call_result_9;
                CHECK_OBJECT(par_self);
                tmp_source_name_27 = par_self;
                tmp_called_instance_24 = LOOKUP_ATTRIBUTE(tmp_source_name_27, const_str_plain_usb_menu);
                if (tmp_called_instance_24 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 925;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 925;
                tmp_call_result_9 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_24, const_str_plain_set_active, &PyTuple_GET_ITEM(const_tuple_int_0_tuple, 0));

                Py_DECREF(tmp_called_instance_24);
                if (tmp_call_result_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 925;
                    type_description_1 = "oooNNooNooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_9);
            }
            branch_no_10:;
        }
        branch_no_5:;
    }
    {
        nuitka_bool tmp_condition_result_11;
        PyObject *tmp_compexpr_left_9;
        PyObject *tmp_compexpr_right_9;
        PyObject *tmp_len_arg_3;
        PyObject *tmp_source_name_28;
        CHECK_OBJECT(par_parent);
        tmp_source_name_28 = par_parent;
        tmp_len_arg_3 = LOOKUP_ATTRIBUTE(tmp_source_name_28, const_str_plain_usb_list);
        if (tmp_len_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 926;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_left_9 = BUILTIN_LEN(tmp_len_arg_3);
        Py_DECREF(tmp_len_arg_3);
        if (tmp_compexpr_left_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 926;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_9 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_INT(tmp_compexpr_left_9, tmp_compexpr_right_9);
        Py_DECREF(tmp_compexpr_left_9);
        assert(!(tmp_res == -1));
        tmp_condition_result_11 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_11 == NUITKA_BOOL_TRUE) {
            goto branch_yes_11;
        } else {
            goto branch_no_11;
        }
        branch_yes_11:;
        {
            PyObject *tmp_called_instance_25;
            PyObject *tmp_source_name_29;
            PyObject *tmp_call_result_10;
            CHECK_OBJECT(par_self);
            tmp_source_name_29 = par_self;
            tmp_called_instance_25 = LOOKUP_ATTRIBUTE(tmp_source_name_29, const_str_plain_na_instr);
            if (tmp_called_instance_25 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 927;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 927;
            tmp_call_result_10 = CALL_METHOD_NO_ARGS(tmp_called_instance_25, const_str_plain_hide);
            Py_DECREF(tmp_called_instance_25);
            if (tmp_call_result_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 927;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_10);
        }
        goto branch_end_11;
        branch_no_11:;
        {
            PyObject *tmp_called_instance_26;
            PyObject *tmp_source_name_30;
            PyObject *tmp_call_result_11;
            CHECK_OBJECT(par_self);
            tmp_source_name_30 = par_self;
            tmp_called_instance_26 = LOOKUP_ATTRIBUTE(tmp_source_name_30, const_str_plain_na_instr);
            if (tmp_called_instance_26 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 929;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 929;
            tmp_call_result_11 = CALL_METHOD_NO_ARGS(tmp_called_instance_26, const_str_plain_show);
            Py_DECREF(tmp_called_instance_26);
            if (tmp_call_result_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 929;
                type_description_1 = "oooNNooNooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_11);
        }
        branch_end_11:;
    }
    {
        PyObject *tmp_called_instance_27;
        PyObject *tmp_source_name_31;
        PyObject *tmp_call_result_12;
        CHECK_OBJECT(par_self);
        tmp_source_name_31 = par_self;
        tmp_called_instance_27 = LOOKUP_ATTRIBUTE(tmp_source_name_31, const_str_plain_refresh_button);
        if (tmp_called_instance_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 930;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_60373512ef7346ec75af4b60640e5729->m_frame.f_lineno = 930;
        tmp_call_result_12 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_27, const_str_plain_set_sensitive, &PyTuple_GET_ITEM(const_tuple_true_tuple, 0));

        Py_DECREF(tmp_called_instance_27);
        if (tmp_call_result_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 930;
            type_description_1 = "oooNNooNooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_12);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_60373512ef7346ec75af4b60640e5729);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_60373512ef7346ec75af4b60640e5729);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_60373512ef7346ec75af4b60640e5729, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_60373512ef7346ec75af4b60640e5729->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_60373512ef7346ec75af4b60640e5729, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_60373512ef7346ec75af4b60640e5729,
        type_description_1,
        par_self,
        par_button,
        par_parent,
        NULL,
        NULL,
        var_list_u,
        var_dl_len,
        NULL,
        var_list_d,
        var_txt,
        var_row,
        var_rgx,
        var_length,
        var_m1,
        var_m2,
        var_type_a,
        var_mod,
        var_count,
        var_d,
        var_r2,
        var_m,
        var_iter,
        var_s,
        var_txt_s,
        var_u,
        var_usb_final,
        var_x,
        var_model,
        var_txt1,
        var_txt2,
        var_txt3
    );


    // Release cached frame.
    if (frame_60373512ef7346ec75af4b60640e5729 == cache_frame_60373512ef7346ec75af4b60640e5729) {
        Py_DECREF(frame_60373512ef7346ec75af4b60640e5729);
    }
    cache_frame_60373512ef7346ec75af4b60640e5729 = NULL;

    assertFrameObject(frame_60373512ef7346ec75af4b60640e5729);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_20_refreshUSB);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_list_u);
    var_list_u = NULL;

    Py_XDECREF(var_dl_len);
    var_dl_len = NULL;

    Py_XDECREF(var_list_d);
    var_list_d = NULL;

    Py_XDECREF(var_txt);
    var_txt = NULL;

    Py_XDECREF(var_row);
    var_row = NULL;

    Py_XDECREF(var_rgx);
    var_rgx = NULL;

    CHECK_OBJECT((PyObject *)var_length);
    Py_DECREF(var_length);
    var_length = NULL;

    Py_XDECREF(var_m1);
    var_m1 = NULL;

    Py_XDECREF(var_m2);
    var_m2 = NULL;

    Py_XDECREF(var_type_a);
    var_type_a = NULL;

    Py_XDECREF(var_mod);
    var_mod = NULL;

    Py_XDECREF(var_count);
    var_count = NULL;

    Py_XDECREF(var_d);
    var_d = NULL;

    Py_XDECREF(var_r2);
    var_r2 = NULL;

    Py_XDECREF(var_m);
    var_m = NULL;

    CHECK_OBJECT((PyObject *)var_iter);
    Py_DECREF(var_iter);
    var_iter = NULL;

    Py_XDECREF(var_s);
    var_s = NULL;

    Py_XDECREF(var_txt_s);
    var_txt_s = NULL;

    Py_XDECREF(var_u);
    var_u = NULL;

    Py_XDECREF(var_usb_final);
    var_usb_final = NULL;

    Py_XDECREF(var_x);
    var_x = NULL;

    CHECK_OBJECT((PyObject *)var_model);
    Py_DECREF(var_model);
    var_model = NULL;

    Py_XDECREF(var_txt1);
    var_txt1 = NULL;

    Py_XDECREF(var_txt2);
    var_txt2 = NULL;

    Py_XDECREF(var_txt3);
    var_txt3 = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_list_u);
    var_list_u = NULL;

    Py_XDECREF(var_dl_len);
    var_dl_len = NULL;

    Py_XDECREF(var_list_d);
    var_list_d = NULL;

    Py_XDECREF(var_txt);
    var_txt = NULL;

    Py_XDECREF(var_row);
    var_row = NULL;

    Py_XDECREF(var_rgx);
    var_rgx = NULL;

    Py_XDECREF(var_length);
    var_length = NULL;

    Py_XDECREF(var_m1);
    var_m1 = NULL;

    Py_XDECREF(var_m2);
    var_m2 = NULL;

    Py_XDECREF(var_type_a);
    var_type_a = NULL;

    Py_XDECREF(var_mod);
    var_mod = NULL;

    Py_XDECREF(var_count);
    var_count = NULL;

    Py_XDECREF(var_d);
    var_d = NULL;

    Py_XDECREF(var_r2);
    var_r2 = NULL;

    Py_XDECREF(var_m);
    var_m = NULL;

    Py_XDECREF(var_iter);
    var_iter = NULL;

    Py_XDECREF(var_s);
    var_s = NULL;

    Py_XDECREF(var_txt_s);
    var_txt_s = NULL;

    Py_XDECREF(var_u);
    var_u = NULL;

    Py_XDECREF(var_usb_final);
    var_usb_final = NULL;

    Py_XDECREF(var_x);
    var_x = NULL;

    Py_XDECREF(var_model);
    var_model = NULL;

    Py_XDECREF(var_txt1);
    var_txt1 = NULL;

    Py_XDECREF(var_txt2);
    var_txt2 = NULL;

    Py_XDECREF(var_txt3);
    var_txt3 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_20_refreshUSB);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_21_show_about(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_button = python_pars[0];
    PyObject *par_parent = python_pars[1];
    PyObject *par_args = python_pars[2];
    PyObject *var_txtVersion = NULL;
    PyObject *var_aboutWin = NULL;
    PyObject *var_m = NULL;
    PyObject *var_ver_parse = NULL;
    PyObject *var_prefix = NULL;
    struct Nuitka_FrameObject *frame_a35f124764436ec53911585e0d461dbe;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_a35f124764436ec53911585e0d461dbe = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_a35f124764436ec53911585e0d461dbe, codeobj_a35f124764436ec53911585e0d461dbe, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_a35f124764436ec53911585e0d461dbe = cache_frame_a35f124764436ec53911585e0d461dbe;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a35f124764436ec53911585e0d461dbe);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a35f124764436ec53911585e0d461dbe) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_verify);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_verify);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 236 ], 35, 0);
            exception_tb = NULL;

            exception_lineno = 934;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_parent);
        tmp_args_element_name_1 = par_parent;
        frame_a35f124764436ec53911585e0d461dbe->m_frame.f_lineno = 934;
        {
            PyObject *call_args[] = {tmp_args_element_name_1};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_licCheck, call_args);
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 934;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_2 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 935;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_2 = tmp_mvar_value_2;
        frame_a35f124764436ec53911585e0d461dbe->m_frame.f_lineno = 935;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_AboutDialog);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 935;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        assert(var_aboutWin == NULL);
        var_aboutWin = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(var_aboutWin);
        tmp_called_instance_3 = var_aboutWin;
        frame_a35f124764436ec53911585e0d461dbe->m_frame.f_lineno = 936;
        tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_3, const_str_plain_set_program_name, &PyTuple_GET_ITEM(const_tuple_str_digest_e0918082bb79330390ecdc3474343538_tuple, 0));

        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 936;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = const_str_empty;
        assert(var_prefix == NULL);
        Py_INCREF(tmp_assign_source_2);
        var_prefix = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT(par_parent);
        tmp_source_name_1 = par_parent;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_DEV_OS);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 939;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_str_plain_Windows;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 939;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_3;
            tmp_assign_source_3 = const_str_digest_6eafc10dc53a14e93f58728969233d1d;
            {
                PyObject *old = var_prefix;
                assert(old != NULL);
                var_prefix = tmp_assign_source_3;
                Py_INCREF(var_prefix);
                Py_DECREF(old);
            }

        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
        }

        if (tmp_mvar_value_3 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
            exception_tb = NULL;

            exception_lineno = 942;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_3;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_popen);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 942;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_prefix);
        tmp_left_name_1 = var_prefix;
        tmp_right_name_1 = const_str_digest_8ed007d8f5811bd916325aedd8c52048;
        tmp_args_element_name_2 = BINARY_OPERATION_ADD_STR_STR(tmp_left_name_1, tmp_right_name_1);
        assert(!(tmp_args_element_name_2 == NULL));
        frame_a35f124764436ec53911585e0d461dbe->m_frame.f_lineno = 942;
        tmp_called_instance_4 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_1, tmp_args_element_name_2);
        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_2);
        if (tmp_called_instance_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 942;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        frame_a35f124764436ec53911585e0d461dbe->m_frame.f_lineno = 942;
        tmp_assign_source_4 = CALL_METHOD_NO_ARGS(tmp_called_instance_4, const_str_plain_read);
        Py_DECREF(tmp_called_instance_4);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 942;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        assert(var_txtVersion == NULL);
        var_txtVersion = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re);

        if (unlikely(tmp_mvar_value_4 == NULL)) {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_re);
        }

        if (tmp_mvar_value_4 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 699 ], 31, 0);
            exception_tb = NULL;

            exception_lineno = 944;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_5 = tmp_mvar_value_4;
        tmp_args_element_name_3 = const_str_digest_36b49885ef15d0fc3127586409e4f1cb;
        CHECK_OBJECT(var_txtVersion);
        tmp_args_element_name_4 = var_txtVersion;
        frame_a35f124764436ec53911585e0d461dbe->m_frame.f_lineno = 944;
        {
            PyObject *call_args[] = {tmp_args_element_name_3, tmp_args_element_name_4};
            tmp_assign_source_5 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_5, const_str_plain_search, call_args);
        }

        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 944;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        assert(var_m == NULL);
        var_m = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_instance_6;
        CHECK_OBJECT(var_m);
        tmp_called_instance_6 = var_m;
        frame_a35f124764436ec53911585e0d461dbe->m_frame.f_lineno = 945;
        tmp_assign_source_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_6, const_str_plain_group, &PyTuple_GET_ITEM(const_tuple_int_pos_1_tuple, 0));

        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 945;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        assert(var_ver_parse == NULL);
        var_ver_parse = tmp_assign_source_6;
    }
    {
        PyObject *tmp_called_instance_7;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT(var_aboutWin);
        tmp_called_instance_7 = var_aboutWin;
        frame_a35f124764436ec53911585e0d461dbe->m_frame.f_lineno = 947;
        tmp_call_result_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_7, const_str_plain_set_version, &PyTuple_GET_ITEM(const_tuple_str_digest_246de0b2ff3271acdef9f30298fa1a45_tuple, 0));

        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 947;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        CHECK_OBJECT(var_aboutWin);
        tmp_source_name_3 = var_aboutWin;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_set_comments);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 948;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_left_name_2 = const_str_digest_43d00fe656fff759355f5b736d587b4e;
        CHECK_OBJECT(var_ver_parse);
        tmp_right_name_2 = var_ver_parse;
        tmp_args_element_name_5 = BINARY_OPERATION_ADD_STR_OBJECT(tmp_left_name_2, tmp_right_name_2);
        if (tmp_args_element_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 948;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        frame_a35f124764436ec53911585e0d461dbe->m_frame.f_lineno = 948;
        tmp_call_result_4 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_5);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_5);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 948;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    {
        PyObject *tmp_called_instance_8;
        PyObject *tmp_call_result_5;
        CHECK_OBJECT(var_aboutWin);
        tmp_called_instance_8 = var_aboutWin;
        frame_a35f124764436ec53911585e0d461dbe->m_frame.f_lineno = 949;
        tmp_call_result_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_8, const_str_plain_set_copyright, &PyTuple_GET_ITEM(const_tuple_str_digest_7d37d74a7159da5b1ebaf27e1cfa555e_tuple, 0));

        if (tmp_call_result_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 949;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_5);
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_source_name_4;
        CHECK_OBJECT(par_parent);
        tmp_source_name_4 = par_parent;
        tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_VERSION);
        if (tmp_compexpr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 950;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_INT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        Py_DECREF(tmp_compexpr_left_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 950;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_5;
            PyObject *tmp_call_result_6;
            PyObject *tmp_args_element_name_6;
            PyObject *tmp_called_instance_9;
            PyObject *tmp_source_name_6;
            PyObject *tmp_mvar_value_5;
            CHECK_OBJECT(var_aboutWin);
            tmp_source_name_5 = var_aboutWin;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_set_logo);
            if (tmp_called_name_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 951;
                type_description_1 = "ooooooooN";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_5 == NULL)) {
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_5 == NULL) {
                Py_DECREF(tmp_called_name_3);
                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 951;
                type_description_1 = "ooooooooN";
                goto frame_exception_exit_1;
            }

            tmp_source_name_6 = tmp_mvar_value_5;
            tmp_called_instance_9 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_gdk);
            if (tmp_called_instance_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_3);

                exception_lineno = 951;
                type_description_1 = "ooooooooN";
                goto frame_exception_exit_1;
            }
            frame_a35f124764436ec53911585e0d461dbe->m_frame.f_lineno = 951;
            tmp_args_element_name_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_9, const_str_plain_pixbuf_new_from_file, &PyTuple_GET_ITEM(const_tuple_str_digest_5cf6c02bf201b8ae03ca790b05911675_tuple, 0));

            Py_DECREF(tmp_called_instance_9);
            if (tmp_args_element_name_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_name_3);

                exception_lineno = 951;
                type_description_1 = "ooooooooN";
                goto frame_exception_exit_1;
            }
            frame_a35f124764436ec53911585e0d461dbe->m_frame.f_lineno = 951;
            tmp_call_result_6 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_6);
            Py_DECREF(tmp_called_name_3);
            Py_DECREF(tmp_args_element_name_6);
            if (tmp_call_result_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 951;
                type_description_1 = "ooooooooN";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_6);
        }
        branch_no_2:;
    }
    {
        PyObject *tmp_called_instance_10;
        PyObject *tmp_call_result_7;
        CHECK_OBJECT(var_aboutWin);
        tmp_called_instance_10 = var_aboutWin;
        frame_a35f124764436ec53911585e0d461dbe->m_frame.f_lineno = 955;
        tmp_call_result_7 = CALL_METHOD_NO_ARGS(tmp_called_instance_10, const_str_plain_run);
        if (tmp_call_result_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 955;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_7);
    }
    {
        PyObject *tmp_called_instance_11;
        PyObject *tmp_call_result_8;
        CHECK_OBJECT(var_aboutWin);
        tmp_called_instance_11 = var_aboutWin;
        frame_a35f124764436ec53911585e0d461dbe->m_frame.f_lineno = 957;
        tmp_call_result_8 = CALL_METHOD_NO_ARGS(tmp_called_instance_11, const_str_plain_destroy);
        if (tmp_call_result_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 957;
            type_description_1 = "ooooooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_8);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a35f124764436ec53911585e0d461dbe);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a35f124764436ec53911585e0d461dbe);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a35f124764436ec53911585e0d461dbe, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_a35f124764436ec53911585e0d461dbe->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a35f124764436ec53911585e0d461dbe, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a35f124764436ec53911585e0d461dbe,
        type_description_1,
        par_button,
        par_parent,
        par_args,
        var_txtVersion,
        var_aboutWin,
        var_m,
        var_ver_parse,
        var_prefix,
        NULL
    );


    // Release cached frame.
    if (frame_a35f124764436ec53911585e0d461dbe == cache_frame_a35f124764436ec53911585e0d461dbe) {
        Py_DECREF(frame_a35f124764436ec53911585e0d461dbe);
    }
    cache_frame_a35f124764436ec53911585e0d461dbe = NULL;

    assertFrameObject(frame_a35f124764436ec53911585e0d461dbe);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_21_show_about);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_txtVersion);
    Py_DECREF(var_txtVersion);
    var_txtVersion = NULL;

    CHECK_OBJECT((PyObject *)var_aboutWin);
    Py_DECREF(var_aboutWin);
    var_aboutWin = NULL;

    CHECK_OBJECT((PyObject *)var_m);
    Py_DECREF(var_m);
    var_m = NULL;

    CHECK_OBJECT((PyObject *)var_ver_parse);
    Py_DECREF(var_ver_parse);
    var_ver_parse = NULL;

    CHECK_OBJECT((PyObject *)var_prefix);
    Py_DECREF(var_prefix);
    var_prefix = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_txtVersion);
    var_txtVersion = NULL;

    Py_XDECREF(var_aboutWin);
    var_aboutWin = NULL;

    Py_XDECREF(var_m);
    var_m = NULL;

    Py_XDECREF(var_ver_parse);
    var_ver_parse = NULL;

    Py_XDECREF(var_prefix);
    var_prefix = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_21_show_about);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_22___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_parent = python_pars[1];
    PyObject *par_mode = python_pars[2];
    PyObject *var_hbox4 = NULL;
    PyObject *var_lid_label = NULL;
    PyObject *var_hbox2 = NULL;
    PyObject *var_hbox0 = NULL;
    PyObject *var_hbox1 = NULL;
    PyObject *var_settings = NULL;
    PyObject *var_pb_label = NULL;
    PyObject *var_hbox3 = NULL;
    PyObject *var_screen_label = NULL;
    PyObject *var_vbox = NULL;
    PyObject *var_sb_label = NULL;
    PyObject *var_hbox5 = NULL;
    PyObject *var_sleep_label = NULL;
    PyObject *var_pwr_instr = NULL;
    PyObject *var_hib_label = NULL;
    struct Nuitka_FrameObject *frame_8c8667ffbd7ea33207e44e91b413156a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_8c8667ffbd7ea33207e44e91b413156a = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_8c8667ffbd7ea33207e44e91b413156a, codeobj_8c8667ffbd7ea33207e44e91b413156a, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_8c8667ffbd7ea33207e44e91b413156a = cache_frame_8c8667ffbd7ea33207e44e91b413156a;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_8c8667ffbd7ea33207e44e91b413156a);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_8c8667ffbd7ea33207e44e91b413156a) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 961;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_1;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_2, const_str_plain_Dialog);
        if (tmp_source_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 961;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain___init__);
        Py_DECREF(tmp_source_name_1);
        if (tmp_called_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 961;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_args_element_name_1 = par_self;
        tmp_args_element_name_2 = const_str_digest_8442ffa8f2dbdc6caf51afff829e942d;
        CHECK_OBJECT(par_parent);
        tmp_args_element_name_3 = par_parent;
        tmp_args_element_name_4 = const_int_0;
        tmp_tuple_element_1 = const_str_digest_e92f018ad67cc5143a4b3d6cd42928fa;
        tmp_args_element_name_5 = PyTuple_New(2);
        Py_INCREF(tmp_tuple_element_1);
        PyTuple_SET_ITEM(tmp_args_element_name_5, 0, tmp_tuple_element_1);
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_2 == NULL) {
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_5);
            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 961;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_2;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_RESPONSE_APPLY);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_1);
            Py_DECREF(tmp_args_element_name_5);

            exception_lineno = 961;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM(tmp_args_element_name_5, 1, tmp_tuple_element_1);
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 961;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS5(tmp_called_name_1, call_args);
        }

        Py_DECREF(tmp_called_name_1);
        Py_DECREF(tmp_args_element_name_5);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 961;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 963;
        tmp_call_result_2 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_1, const_str_plain_set_default_size, &PyTuple_GET_ITEM(const_tuple_int_pos_300_int_pos_300_tuple, 0));

        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT(par_self);
        tmp_called_instance_2 = par_self;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 965;
        tmp_call_result_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_2, const_str_plain_set_border_width, &PyTuple_GET_ITEM(const_tuple_int_pos_10_tuple, 0));

        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 965;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_call_result_4;
        int tmp_truth_name_1;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_os);
        }

        if (tmp_mvar_value_3 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 348 ], 31, 0);
            exception_tb = NULL;

            exception_lineno = 966;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_3;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE(tmp_source_name_4, const_str_plain_path);
        if (tmp_called_instance_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 966;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 966;
        tmp_call_result_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_3, const_str_plain_isfile, &PyTuple_GET_ITEM(const_tuple_str_digest_5cf6c02bf201b8ae03ca790b05911675_tuple, 0));

        Py_DECREF(tmp_called_instance_3);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 966;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_4);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_4);

            exception_lineno = 966;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_call_result_4);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_call_result_5;
            CHECK_OBJECT(par_self);
            tmp_called_instance_4 = par_self;
            frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 967;
            tmp_call_result_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_set_icon_from_file, &PyTuple_GET_ITEM(const_tuple_str_digest_5cf6c02bf201b8ae03ca790b05911675_tuple, 0));

            if (tmp_call_result_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 967;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF(tmp_call_result_5);
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_5;
        CHECK_OBJECT(par_self);
        tmp_called_instance_5 = par_self;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 968;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_5, const_str_plain_get_content_area);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 968;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_vbox == NULL);
        var_vbox = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT(par_mode);
        tmp_compexpr_left_1 = par_mode;
        tmp_compexpr_right_1 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 970;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_called_instance_6;
            PyObject *tmp_mvar_value_4;
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_4 == NULL)) {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_4 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 971;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_6 = tmp_mvar_value_4;
            frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 971;
            tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_6, const_str_plain_Label, &PyTuple_GET_ITEM(const_tuple_str_digest_ca01d9d8c75f9046de79826ecd4724fc_tuple, 0));

            if (tmp_assign_source_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 971;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_pwr_instr == NULL);
            var_pwr_instr = tmp_assign_source_2;
        }
        goto branch_end_2;
        branch_no_2:;
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_called_instance_7;
            PyObject *tmp_mvar_value_5;
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_5 == NULL)) {
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_5 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 973;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_7 = tmp_mvar_value_5;
            frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 973;
            tmp_assign_source_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_7, const_str_plain_Label, &PyTuple_GET_ITEM(const_tuple_str_digest_53e0b3338d9460ce17900f4e6d482773_tuple, 0));

            if (tmp_assign_source_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 973;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert(var_pwr_instr == NULL);
            var_pwr_instr = tmp_assign_source_3;
        }
        branch_end_2:;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_instance_8;
        PyObject *tmp_mvar_value_6;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_6 == NULL)) {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_6 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 974;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_8 = tmp_mvar_value_6;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 974;
        tmp_assign_source_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_8, const_str_plain_Label, &PyTuple_GET_ITEM(const_tuple_str_digest_f8d7aee47f5e3ab6510ac70ff73039eb_tuple, 0));

        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 974;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_screen_label == NULL);
        var_screen_label = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_name_1 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, const_str_plain_screen_menu, tmp_assattr_name_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 975;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_instance_9;
        PyObject *tmp_mvar_value_7;
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_7 == NULL)) {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_7 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 976;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_9 = tmp_mvar_value_7;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 976;
        tmp_assign_source_5 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_9, const_str_plain_Label, &PyTuple_GET_ITEM(const_tuple_str_digest_9fb6c95c52c6329788e4855cdcbf1225_tuple, 0));

        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 976;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_hib_label == NULL);
        var_hib_label = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_name_2 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, const_str_plain_hib_menu, tmp_assattr_name_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 977;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_instance_10;
        PyObject *tmp_mvar_value_8;
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_8 == NULL)) {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_8 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 978;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_10 = tmp_mvar_value_8;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 978;
        tmp_assign_source_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_10, const_str_plain_Label, &PyTuple_GET_ITEM(const_tuple_str_digest_ec3b6b379ac030707422d5ef953a3b39_tuple, 0));

        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 978;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_sleep_label == NULL);
        var_sleep_label = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_name_3 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, const_str_plain_sleep_menu, tmp_assattr_name_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 979;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_instance_11;
        PyObject *tmp_mvar_value_9;
        tmp_mvar_value_9 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_9 == NULL)) {
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_9 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 980;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_11 = tmp_mvar_value_9;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 980;
        tmp_assign_source_7 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_11, const_str_plain_Label, &PyTuple_GET_ITEM(const_tuple_str_digest_e64489b595c1d15899d5ce5863638a89_tuple, 0));

        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 980;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_pb_label == NULL);
        var_pb_label = tmp_assign_source_7;
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_assattr_target_4;
        tmp_assattr_name_4 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, const_str_plain_pb_menu, tmp_assattr_name_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 981;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_called_instance_12;
        PyObject *tmp_mvar_value_10;
        tmp_mvar_value_10 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_10 == NULL)) {
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_10 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 982;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_12 = tmp_mvar_value_10;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 982;
        tmp_assign_source_8 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_12, const_str_plain_Label, &PyTuple_GET_ITEM(const_tuple_str_digest_e974b93f125c788389bc994528457aa9_tuple, 0));

        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 982;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_sb_label == NULL);
        var_sb_label = tmp_assign_source_8;
    }
    {
        PyObject *tmp_assattr_name_5;
        PyObject *tmp_assattr_target_5;
        tmp_assattr_name_5 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_5, const_str_plain_sb_menu, tmp_assattr_name_5);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 983;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_called_instance_13;
        PyObject *tmp_mvar_value_11;
        tmp_mvar_value_11 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_11 == NULL)) {
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_11 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 984;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_13 = tmp_mvar_value_11;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 984;
        tmp_assign_source_9 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_13, const_str_plain_Label, &PyTuple_GET_ITEM(const_tuple_str_digest_e7e6c5a1c1999b699ec49e94b0ae1a17_tuple, 0));

        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 984;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_lid_label == NULL);
        var_lid_label = tmp_assign_source_9;
    }
    {
        PyObject *tmp_assattr_name_6;
        PyObject *tmp_assattr_target_6;
        tmp_assattr_name_6 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_6, const_str_plain_lid_menu, tmp_assattr_name_6);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 985;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_5;
        PyObject *tmp_mvar_value_12;
        PyObject *tmp_subscript_name_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_source_name_6;
        PyObject *tmp_mvar_value_13;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_source_name_7;
        PyObject *tmp_mvar_value_14;
        PyObject *tmp_subscript_name_3;
        tmp_mvar_value_12 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_12 == NULL)) {
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_12 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 987;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_5 = tmp_mvar_value_12;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_gtk_version);
        if (tmp_subscribed_name_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 987;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_pos_1;
        tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_1, tmp_subscript_name_1, 1);
        Py_DECREF(tmp_subscribed_name_1);
        if (tmp_compexpr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 987;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = const_int_pos_24;
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_INT(tmp_compexpr_left_2, tmp_compexpr_right_2);
        Py_DECREF(tmp_compexpr_left_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 987;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        tmp_mvar_value_13 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_13 == NULL)) {
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_13 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 988;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_6 = tmp_mvar_value_13;
        tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_6, const_str_plain_gtk_version);
        if (tmp_subscribed_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_2 = const_int_pos_1;
        tmp_compexpr_left_3 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_2, tmp_subscript_name_2, 1);
        Py_DECREF(tmp_subscribed_name_2);
        if (tmp_compexpr_left_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_3 = const_int_pos_24;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_3, tmp_compexpr_right_3);
        Py_DECREF(tmp_compexpr_left_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        tmp_mvar_value_14 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_14 == NULL)) {
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_14 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 988;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_7 = tmp_mvar_value_14;
        tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_gtk_version);
        if (tmp_subscribed_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_3 = const_int_pos_2;
        tmp_compexpr_left_4 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_3, tmp_subscript_name_3, 2);
        Py_DECREF(tmp_subscribed_name_3);
        if (tmp_compexpr_left_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_4 = const_int_pos_28;
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_INT(tmp_compexpr_left_4, tmp_compexpr_right_4);
        Py_DECREF(tmp_compexpr_left_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_right_value_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_or_right_value_1 = tmp_and_left_value_1;
        and_end_1:;
        tmp_condition_result_3 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_3 = tmp_or_left_value_1;
        or_end_1:;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_assattr_name_7;
            PyObject *tmp_called_instance_14;
            PyObject *tmp_mvar_value_15;
            PyObject *tmp_assattr_target_7;
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_15 == NULL)) {
                tmp_mvar_value_15 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_15 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 989;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_14 = tmp_mvar_value_15;
            frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 989;
            tmp_assattr_name_7 = CALL_METHOD_NO_ARGS(tmp_called_instance_14, const_str_plain_ComboBox);
            if (tmp_assattr_name_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 989;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_assattr_target_7 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_7, const_str_plain_screen_menu, tmp_assattr_name_7);
            Py_DECREF(tmp_assattr_name_7);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 989;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_8;
            PyObject *tmp_called_instance_15;
            PyObject *tmp_mvar_value_16;
            PyObject *tmp_assattr_target_8;
            tmp_mvar_value_16 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_16 == NULL)) {
                tmp_mvar_value_16 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_16 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 990;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_15 = tmp_mvar_value_16;
            frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 990;
            tmp_assattr_name_8 = CALL_METHOD_NO_ARGS(tmp_called_instance_15, const_str_plain_ComboBox);
            if (tmp_assattr_name_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 990;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_assattr_target_8 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_8, const_str_plain_hib_menu, tmp_assattr_name_8);
            Py_DECREF(tmp_assattr_name_8);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 990;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_9;
            PyObject *tmp_called_instance_16;
            PyObject *tmp_mvar_value_17;
            PyObject *tmp_assattr_target_9;
            tmp_mvar_value_17 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_17 == NULL)) {
                tmp_mvar_value_17 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_17 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 991;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_16 = tmp_mvar_value_17;
            frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 991;
            tmp_assattr_name_9 = CALL_METHOD_NO_ARGS(tmp_called_instance_16, const_str_plain_ComboBox);
            if (tmp_assattr_name_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 991;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_assattr_target_9 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_9, const_str_plain_sleep_menu, tmp_assattr_name_9);
            Py_DECREF(tmp_assattr_name_9);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 991;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_10;
            PyObject *tmp_called_instance_17;
            PyObject *tmp_mvar_value_18;
            PyObject *tmp_assattr_target_10;
            tmp_mvar_value_18 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_18 == NULL)) {
                tmp_mvar_value_18 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_18 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 992;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_17 = tmp_mvar_value_18;
            frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 992;
            tmp_assattr_name_10 = CALL_METHOD_NO_ARGS(tmp_called_instance_17, const_str_plain_ComboBox);
            if (tmp_assattr_name_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 992;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_assattr_target_10 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_10, const_str_plain_pb_menu, tmp_assattr_name_10);
            Py_DECREF(tmp_assattr_name_10);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 992;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_11;
            PyObject *tmp_called_instance_18;
            PyObject *tmp_mvar_value_19;
            PyObject *tmp_assattr_target_11;
            tmp_mvar_value_19 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_19 == NULL)) {
                tmp_mvar_value_19 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_19 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 993;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_18 = tmp_mvar_value_19;
            frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 993;
            tmp_assattr_name_11 = CALL_METHOD_NO_ARGS(tmp_called_instance_18, const_str_plain_ComboBox);
            if (tmp_assattr_name_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 993;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_assattr_target_11 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_11, const_str_plain_sb_menu, tmp_assattr_name_11);
            Py_DECREF(tmp_assattr_name_11);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 993;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_12;
            PyObject *tmp_called_instance_19;
            PyObject *tmp_mvar_value_20;
            PyObject *tmp_assattr_target_12;
            tmp_mvar_value_20 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_20 == NULL)) {
                tmp_mvar_value_20 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_20 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 994;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_19 = tmp_mvar_value_20;
            frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 994;
            tmp_assattr_name_12 = CALL_METHOD_NO_ARGS(tmp_called_instance_19, const_str_plain_ComboBox);
            if (tmp_assattr_name_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 994;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_assattr_target_12 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_12, const_str_plain_lid_menu, tmp_assattr_name_12);
            Py_DECREF(tmp_assattr_name_12);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 994;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        goto branch_end_3;
        branch_no_3:;
        {
            PyObject *tmp_assattr_name_13;
            PyObject *tmp_called_instance_20;
            PyObject *tmp_mvar_value_21;
            PyObject *tmp_assattr_target_13;
            tmp_mvar_value_21 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_21 == NULL)) {
                tmp_mvar_value_21 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_21 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 996;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_20 = tmp_mvar_value_21;
            frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 996;
            tmp_assattr_name_13 = CALL_METHOD_NO_ARGS(tmp_called_instance_20, const_str_plain_combo_box_new_text);
            if (tmp_assattr_name_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 996;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_assattr_target_13 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_13, const_str_plain_screen_menu, tmp_assattr_name_13);
            Py_DECREF(tmp_assattr_name_13);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 996;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_14;
            PyObject *tmp_called_instance_21;
            PyObject *tmp_mvar_value_22;
            PyObject *tmp_assattr_target_14;
            tmp_mvar_value_22 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_22 == NULL)) {
                tmp_mvar_value_22 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_22 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 997;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_21 = tmp_mvar_value_22;
            frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 997;
            tmp_assattr_name_14 = CALL_METHOD_NO_ARGS(tmp_called_instance_21, const_str_plain_combo_box_new_text);
            if (tmp_assattr_name_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 997;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_assattr_target_14 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_14, const_str_plain_hib_menu, tmp_assattr_name_14);
            Py_DECREF(tmp_assattr_name_14);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 997;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_15;
            PyObject *tmp_called_instance_22;
            PyObject *tmp_mvar_value_23;
            PyObject *tmp_assattr_target_15;
            tmp_mvar_value_23 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_23 == NULL)) {
                tmp_mvar_value_23 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_23 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 998;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_22 = tmp_mvar_value_23;
            frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 998;
            tmp_assattr_name_15 = CALL_METHOD_NO_ARGS(tmp_called_instance_22, const_str_plain_combo_box_new_text);
            if (tmp_assattr_name_15 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 998;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_assattr_target_15 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_15, const_str_plain_sleep_menu, tmp_assattr_name_15);
            Py_DECREF(tmp_assattr_name_15);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 998;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_16;
            PyObject *tmp_called_instance_23;
            PyObject *tmp_mvar_value_24;
            PyObject *tmp_assattr_target_16;
            tmp_mvar_value_24 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_24 == NULL)) {
                tmp_mvar_value_24 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_24 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 999;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_23 = tmp_mvar_value_24;
            frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 999;
            tmp_assattr_name_16 = CALL_METHOD_NO_ARGS(tmp_called_instance_23, const_str_plain_combo_box_new_text);
            if (tmp_assattr_name_16 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 999;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_assattr_target_16 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_16, const_str_plain_pb_menu, tmp_assattr_name_16);
            Py_DECREF(tmp_assattr_name_16);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 999;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_17;
            PyObject *tmp_called_instance_24;
            PyObject *tmp_mvar_value_25;
            PyObject *tmp_assattr_target_17;
            tmp_mvar_value_25 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_25 == NULL)) {
                tmp_mvar_value_25 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_25 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 1000;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_24 = tmp_mvar_value_25;
            frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1000;
            tmp_assattr_name_17 = CALL_METHOD_NO_ARGS(tmp_called_instance_24, const_str_plain_combo_box_new_text);
            if (tmp_assattr_name_17 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1000;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_assattr_target_17 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_17, const_str_plain_sb_menu, tmp_assattr_name_17);
            Py_DECREF(tmp_assattr_name_17);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1000;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_18;
            PyObject *tmp_called_instance_25;
            PyObject *tmp_mvar_value_26;
            PyObject *tmp_assattr_target_18;
            tmp_mvar_value_26 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

            if (unlikely(tmp_mvar_value_26 == NULL)) {
                tmp_mvar_value_26 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
            }

            if (tmp_mvar_value_26 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
                exception_tb = NULL;

                exception_lineno = 1001;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_25 = tmp_mvar_value_26;
            frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1001;
            tmp_assattr_name_18 = CALL_METHOD_NO_ARGS(tmp_called_instance_25, const_str_plain_combo_box_new_text);
            if (tmp_assattr_name_18 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1001;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_assattr_target_18 = par_self;
            tmp_result = SET_ATTRIBUTE(tmp_assattr_target_18, const_str_plain_lid_menu, tmp_assattr_name_18);
            Py_DECREF(tmp_assattr_name_18);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1001;
                type_description_1 = "oooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_end_3:;
    }
    {
        PyObject *tmp_called_instance_26;
        PyObject *tmp_source_name_8;
        PyObject *tmp_call_result_6;
        CHECK_OBJECT(par_self);
        tmp_source_name_8 = par_self;
        tmp_called_instance_26 = LOOKUP_ATTRIBUTE(tmp_source_name_8, const_str_plain_screen_menu);
        if (tmp_called_instance_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1003;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1003;
        tmp_call_result_6 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_26, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_47f300fb89e60cc15fc91f359a4d61b8_tuple, 0));

        Py_DECREF(tmp_called_instance_26);
        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1003;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_6);
    }
    {
        PyObject *tmp_called_instance_27;
        PyObject *tmp_source_name_9;
        PyObject *tmp_call_result_7;
        CHECK_OBJECT(par_self);
        tmp_source_name_9 = par_self;
        tmp_called_instance_27 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_screen_menu);
        if (tmp_called_instance_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1004;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1004;
        tmp_call_result_7 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_27, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_e1c3282c2c49230ab34cbbb48ee72001_tuple, 0));

        Py_DECREF(tmp_called_instance_27);
        if (tmp_call_result_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1004;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_7);
    }
    {
        PyObject *tmp_called_instance_28;
        PyObject *tmp_source_name_10;
        PyObject *tmp_call_result_8;
        CHECK_OBJECT(par_self);
        tmp_source_name_10 = par_self;
        tmp_called_instance_28 = LOOKUP_ATTRIBUTE(tmp_source_name_10, const_str_plain_screen_menu);
        if (tmp_called_instance_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1005;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1005;
        tmp_call_result_8 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_28, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_ed068c6c7c551f50a83720a12f12dc27_tuple, 0));

        Py_DECREF(tmp_called_instance_28);
        if (tmp_call_result_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1005;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_8);
    }
    {
        PyObject *tmp_called_instance_29;
        PyObject *tmp_source_name_11;
        PyObject *tmp_call_result_9;
        CHECK_OBJECT(par_self);
        tmp_source_name_11 = par_self;
        tmp_called_instance_29 = LOOKUP_ATTRIBUTE(tmp_source_name_11, const_str_plain_screen_menu);
        if (tmp_called_instance_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1006;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1006;
        tmp_call_result_9 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_29, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_d6fa2950567d74d72b795980149cec37_tuple, 0));

        Py_DECREF(tmp_called_instance_29);
        if (tmp_call_result_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1006;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_9);
    }
    {
        PyObject *tmp_called_instance_30;
        PyObject *tmp_source_name_12;
        PyObject *tmp_call_result_10;
        CHECK_OBJECT(par_self);
        tmp_source_name_12 = par_self;
        tmp_called_instance_30 = LOOKUP_ATTRIBUTE(tmp_source_name_12, const_str_plain_screen_menu);
        if (tmp_called_instance_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1007;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1007;
        tmp_call_result_10 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_30, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_8974007cd1bd5af74f0b391a825ef662_tuple, 0));

        Py_DECREF(tmp_called_instance_30);
        if (tmp_call_result_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1007;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_10);
    }
    {
        PyObject *tmp_called_instance_31;
        PyObject *tmp_source_name_13;
        PyObject *tmp_call_result_11;
        CHECK_OBJECT(par_self);
        tmp_source_name_13 = par_self;
        tmp_called_instance_31 = LOOKUP_ATTRIBUTE(tmp_source_name_13, const_str_plain_screen_menu);
        if (tmp_called_instance_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1008;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1008;
        tmp_call_result_11 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_31, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_0752589c12ccb235f08434890c781f69_tuple, 0));

        Py_DECREF(tmp_called_instance_31);
        if (tmp_call_result_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1008;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_11);
    }
    {
        PyObject *tmp_called_instance_32;
        PyObject *tmp_source_name_14;
        PyObject *tmp_call_result_12;
        CHECK_OBJECT(par_self);
        tmp_source_name_14 = par_self;
        tmp_called_instance_32 = LOOKUP_ATTRIBUTE(tmp_source_name_14, const_str_plain_screen_menu);
        if (tmp_called_instance_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1009;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1009;
        tmp_call_result_12 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_32, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_52d57da239d408b2f5b4528b30de22f2_tuple, 0));

        Py_DECREF(tmp_called_instance_32);
        if (tmp_call_result_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1009;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_12);
    }
    {
        PyObject *tmp_called_instance_33;
        PyObject *tmp_source_name_15;
        PyObject *tmp_call_result_13;
        CHECK_OBJECT(par_self);
        tmp_source_name_15 = par_self;
        tmp_called_instance_33 = LOOKUP_ATTRIBUTE(tmp_source_name_15, const_str_plain_screen_menu);
        if (tmp_called_instance_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1010;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1010;
        tmp_call_result_13 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_33, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_9af85d5d90688acaaf51a2f76a9f32c8_tuple, 0));

        Py_DECREF(tmp_called_instance_33);
        if (tmp_call_result_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1010;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_13);
    }
    {
        PyObject *tmp_called_instance_34;
        PyObject *tmp_source_name_16;
        PyObject *tmp_call_result_14;
        CHECK_OBJECT(par_self);
        tmp_source_name_16 = par_self;
        tmp_called_instance_34 = LOOKUP_ATTRIBUTE(tmp_source_name_16, const_str_plain_screen_menu);
        if (tmp_called_instance_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1011;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1011;
        tmp_call_result_14 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_34, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_2005eab6d6f19375dfb4b5850d6066f2_tuple, 0));

        Py_DECREF(tmp_called_instance_34);
        if (tmp_call_result_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1011;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_14);
    }
    {
        PyObject *tmp_called_instance_35;
        PyObject *tmp_source_name_17;
        PyObject *tmp_call_result_15;
        CHECK_OBJECT(par_self);
        tmp_source_name_17 = par_self;
        tmp_called_instance_35 = LOOKUP_ATTRIBUTE(tmp_source_name_17, const_str_plain_screen_menu);
        if (tmp_called_instance_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1012;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1012;
        tmp_call_result_15 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_35, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_8cda9c36930fe1d24d1f13365d80ce3b_tuple, 0));

        Py_DECREF(tmp_called_instance_35);
        if (tmp_call_result_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1012;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_15);
    }
    {
        PyObject *tmp_called_instance_36;
        PyObject *tmp_source_name_18;
        PyObject *tmp_call_result_16;
        CHECK_OBJECT(par_self);
        tmp_source_name_18 = par_self;
        tmp_called_instance_36 = LOOKUP_ATTRIBUTE(tmp_source_name_18, const_str_plain_screen_menu);
        if (tmp_called_instance_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1013;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1013;
        tmp_call_result_16 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_36, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_301503d632e956819fe431035d3bf52a_tuple, 0));

        Py_DECREF(tmp_called_instance_36);
        if (tmp_call_result_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1013;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_16);
    }
    {
        PyObject *tmp_called_instance_37;
        PyObject *tmp_source_name_19;
        PyObject *tmp_call_result_17;
        CHECK_OBJECT(par_self);
        tmp_source_name_19 = par_self;
        tmp_called_instance_37 = LOOKUP_ATTRIBUTE(tmp_source_name_19, const_str_plain_screen_menu);
        if (tmp_called_instance_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1014;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1014;
        tmp_call_result_17 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_37, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_a1d4a5f21f2d424de7fcc6b4e390d5e8_tuple, 0));

        Py_DECREF(tmp_called_instance_37);
        if (tmp_call_result_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1014;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_17);
    }
    {
        PyObject *tmp_called_instance_38;
        PyObject *tmp_source_name_20;
        PyObject *tmp_call_result_18;
        CHECK_OBJECT(par_self);
        tmp_source_name_20 = par_self;
        tmp_called_instance_38 = LOOKUP_ATTRIBUTE(tmp_source_name_20, const_str_plain_screen_menu);
        if (tmp_called_instance_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1015;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1015;
        tmp_call_result_18 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_38, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_5715360694973afef6f17611e4e2c2a0_tuple, 0));

        Py_DECREF(tmp_called_instance_38);
        if (tmp_call_result_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1015;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_18);
    }
    {
        PyObject *tmp_called_instance_39;
        PyObject *tmp_source_name_21;
        PyObject *tmp_call_result_19;
        CHECK_OBJECT(par_self);
        tmp_source_name_21 = par_self;
        tmp_called_instance_39 = LOOKUP_ATTRIBUTE(tmp_source_name_21, const_str_plain_screen_menu);
        if (tmp_called_instance_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1016;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1016;
        tmp_call_result_19 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_39, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_da4537c2731e3ef82022c7083e54e3d5_tuple, 0));

        Py_DECREF(tmp_called_instance_39);
        if (tmp_call_result_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1016;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_19);
    }
    {
        PyObject *tmp_called_instance_40;
        PyObject *tmp_source_name_22;
        PyObject *tmp_call_result_20;
        CHECK_OBJECT(par_self);
        tmp_source_name_22 = par_self;
        tmp_called_instance_40 = LOOKUP_ATTRIBUTE(tmp_source_name_22, const_str_plain_screen_menu);
        if (tmp_called_instance_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1017;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1017;
        tmp_call_result_20 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_40, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_efb720df302d651bbfa97f25f0fc0525_tuple, 0));

        Py_DECREF(tmp_called_instance_40);
        if (tmp_call_result_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1017;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_20);
    }
    {
        PyObject *tmp_called_instance_41;
        PyObject *tmp_source_name_23;
        PyObject *tmp_call_result_21;
        CHECK_OBJECT(par_self);
        tmp_source_name_23 = par_self;
        tmp_called_instance_41 = LOOKUP_ATTRIBUTE(tmp_source_name_23, const_str_plain_screen_menu);
        if (tmp_called_instance_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1018;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1018;
        tmp_call_result_21 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_41, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_plain_Never_tuple, 0));

        Py_DECREF(tmp_called_instance_41);
        if (tmp_call_result_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1018;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_21);
    }
    {
        PyObject *tmp_called_instance_42;
        PyObject *tmp_source_name_24;
        PyObject *tmp_call_result_22;
        CHECK_OBJECT(par_self);
        tmp_source_name_24 = par_self;
        tmp_called_instance_42 = LOOKUP_ATTRIBUTE(tmp_source_name_24, const_str_plain_hib_menu);
        if (tmp_called_instance_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1020;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1020;
        tmp_call_result_22 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_42, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_d6fa2950567d74d72b795980149cec37_tuple, 0));

        Py_DECREF(tmp_called_instance_42);
        if (tmp_call_result_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1020;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_22);
    }
    {
        PyObject *tmp_called_instance_43;
        PyObject *tmp_source_name_25;
        PyObject *tmp_call_result_23;
        CHECK_OBJECT(par_self);
        tmp_source_name_25 = par_self;
        tmp_called_instance_43 = LOOKUP_ATTRIBUTE(tmp_source_name_25, const_str_plain_hib_menu);
        if (tmp_called_instance_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1021;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1021;
        tmp_call_result_23 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_43, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_8974007cd1bd5af74f0b391a825ef662_tuple, 0));

        Py_DECREF(tmp_called_instance_43);
        if (tmp_call_result_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1021;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_23);
    }
    {
        PyObject *tmp_called_instance_44;
        PyObject *tmp_source_name_26;
        PyObject *tmp_call_result_24;
        CHECK_OBJECT(par_self);
        tmp_source_name_26 = par_self;
        tmp_called_instance_44 = LOOKUP_ATTRIBUTE(tmp_source_name_26, const_str_plain_hib_menu);
        if (tmp_called_instance_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1022;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1022;
        tmp_call_result_24 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_44, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_0752589c12ccb235f08434890c781f69_tuple, 0));

        Py_DECREF(tmp_called_instance_44);
        if (tmp_call_result_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1022;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_24);
    }
    {
        PyObject *tmp_called_instance_45;
        PyObject *tmp_source_name_27;
        PyObject *tmp_call_result_25;
        CHECK_OBJECT(par_self);
        tmp_source_name_27 = par_self;
        tmp_called_instance_45 = LOOKUP_ATTRIBUTE(tmp_source_name_27, const_str_plain_hib_menu);
        if (tmp_called_instance_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1023;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1023;
        tmp_call_result_25 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_45, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_52d57da239d408b2f5b4528b30de22f2_tuple, 0));

        Py_DECREF(tmp_called_instance_45);
        if (tmp_call_result_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1023;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_25);
    }
    {
        PyObject *tmp_called_instance_46;
        PyObject *tmp_source_name_28;
        PyObject *tmp_call_result_26;
        CHECK_OBJECT(par_self);
        tmp_source_name_28 = par_self;
        tmp_called_instance_46 = LOOKUP_ATTRIBUTE(tmp_source_name_28, const_str_plain_hib_menu);
        if (tmp_called_instance_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1024;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1024;
        tmp_call_result_26 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_46, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_9af85d5d90688acaaf51a2f76a9f32c8_tuple, 0));

        Py_DECREF(tmp_called_instance_46);
        if (tmp_call_result_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1024;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_26);
    }
    {
        PyObject *tmp_called_instance_47;
        PyObject *tmp_source_name_29;
        PyObject *tmp_call_result_27;
        CHECK_OBJECT(par_self);
        tmp_source_name_29 = par_self;
        tmp_called_instance_47 = LOOKUP_ATTRIBUTE(tmp_source_name_29, const_str_plain_hib_menu);
        if (tmp_called_instance_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1025;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1025;
        tmp_call_result_27 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_47, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_2005eab6d6f19375dfb4b5850d6066f2_tuple, 0));

        Py_DECREF(tmp_called_instance_47);
        if (tmp_call_result_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1025;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_27);
    }
    {
        PyObject *tmp_called_instance_48;
        PyObject *tmp_source_name_30;
        PyObject *tmp_call_result_28;
        CHECK_OBJECT(par_self);
        tmp_source_name_30 = par_self;
        tmp_called_instance_48 = LOOKUP_ATTRIBUTE(tmp_source_name_30, const_str_plain_hib_menu);
        if (tmp_called_instance_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1026;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1026;
        tmp_call_result_28 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_48, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_8cda9c36930fe1d24d1f13365d80ce3b_tuple, 0));

        Py_DECREF(tmp_called_instance_48);
        if (tmp_call_result_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1026;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_28);
    }
    {
        PyObject *tmp_called_instance_49;
        PyObject *tmp_source_name_31;
        PyObject *tmp_call_result_29;
        CHECK_OBJECT(par_self);
        tmp_source_name_31 = par_self;
        tmp_called_instance_49 = LOOKUP_ATTRIBUTE(tmp_source_name_31, const_str_plain_hib_menu);
        if (tmp_called_instance_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1027;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1027;
        tmp_call_result_29 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_49, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_301503d632e956819fe431035d3bf52a_tuple, 0));

        Py_DECREF(tmp_called_instance_49);
        if (tmp_call_result_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1027;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_29);
    }
    {
        PyObject *tmp_called_instance_50;
        PyObject *tmp_source_name_32;
        PyObject *tmp_call_result_30;
        CHECK_OBJECT(par_self);
        tmp_source_name_32 = par_self;
        tmp_called_instance_50 = LOOKUP_ATTRIBUTE(tmp_source_name_32, const_str_plain_hib_menu);
        if (tmp_called_instance_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1028;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1028;
        tmp_call_result_30 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_50, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_a1d4a5f21f2d424de7fcc6b4e390d5e8_tuple, 0));

        Py_DECREF(tmp_called_instance_50);
        if (tmp_call_result_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1028;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_30);
    }
    {
        PyObject *tmp_called_instance_51;
        PyObject *tmp_source_name_33;
        PyObject *tmp_call_result_31;
        CHECK_OBJECT(par_self);
        tmp_source_name_33 = par_self;
        tmp_called_instance_51 = LOOKUP_ATTRIBUTE(tmp_source_name_33, const_str_plain_hib_menu);
        if (tmp_called_instance_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1029;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1029;
        tmp_call_result_31 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_51, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_5715360694973afef6f17611e4e2c2a0_tuple, 0));

        Py_DECREF(tmp_called_instance_51);
        if (tmp_call_result_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1029;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_31);
    }
    {
        PyObject *tmp_called_instance_52;
        PyObject *tmp_source_name_34;
        PyObject *tmp_call_result_32;
        CHECK_OBJECT(par_self);
        tmp_source_name_34 = par_self;
        tmp_called_instance_52 = LOOKUP_ATTRIBUTE(tmp_source_name_34, const_str_plain_hib_menu);
        if (tmp_called_instance_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1030;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1030;
        tmp_call_result_32 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_52, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_da4537c2731e3ef82022c7083e54e3d5_tuple, 0));

        Py_DECREF(tmp_called_instance_52);
        if (tmp_call_result_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1030;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_32);
    }
    {
        PyObject *tmp_called_instance_53;
        PyObject *tmp_source_name_35;
        PyObject *tmp_call_result_33;
        CHECK_OBJECT(par_self);
        tmp_source_name_35 = par_self;
        tmp_called_instance_53 = LOOKUP_ATTRIBUTE(tmp_source_name_35, const_str_plain_hib_menu);
        if (tmp_called_instance_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1031;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1031;
        tmp_call_result_33 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_53, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_efb720df302d651bbfa97f25f0fc0525_tuple, 0));

        Py_DECREF(tmp_called_instance_53);
        if (tmp_call_result_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1031;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_33);
    }
    {
        PyObject *tmp_called_instance_54;
        PyObject *tmp_source_name_36;
        PyObject *tmp_call_result_34;
        CHECK_OBJECT(par_self);
        tmp_source_name_36 = par_self;
        tmp_called_instance_54 = LOOKUP_ATTRIBUTE(tmp_source_name_36, const_str_plain_hib_menu);
        if (tmp_called_instance_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1032;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1032;
        tmp_call_result_34 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_54, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_plain_Never_tuple, 0));

        Py_DECREF(tmp_called_instance_54);
        if (tmp_call_result_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1032;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_34);
    }
    {
        PyObject *tmp_called_instance_55;
        PyObject *tmp_source_name_37;
        PyObject *tmp_call_result_35;
        CHECK_OBJECT(par_self);
        tmp_source_name_37 = par_self;
        tmp_called_instance_55 = LOOKUP_ATTRIBUTE(tmp_source_name_37, const_str_plain_sleep_menu);
        if (tmp_called_instance_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1034;
        tmp_call_result_35 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_55, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_plain_Never_tuple, 0));

        Py_DECREF(tmp_called_instance_55);
        if (tmp_call_result_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_35);
    }
    {
        PyObject *tmp_called_instance_56;
        PyObject *tmp_source_name_38;
        PyObject *tmp_call_result_36;
        CHECK_OBJECT(par_self);
        tmp_source_name_38 = par_self;
        tmp_called_instance_56 = LOOKUP_ATTRIBUTE(tmp_source_name_38, const_str_plain_pb_menu);
        if (tmp_called_instance_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1036;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1036;
        tmp_call_result_36 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_56, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_4263c7efeab2c98f9cdfa519ae1cebba_tuple, 0));

        Py_DECREF(tmp_called_instance_56);
        if (tmp_call_result_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1036;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_36);
    }
    {
        PyObject *tmp_called_instance_57;
        PyObject *tmp_source_name_39;
        PyObject *tmp_call_result_37;
        CHECK_OBJECT(par_self);
        tmp_source_name_39 = par_self;
        tmp_called_instance_57 = LOOKUP_ATTRIBUTE(tmp_source_name_39, const_str_plain_pb_menu);
        if (tmp_called_instance_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1037;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1037;
        tmp_call_result_37 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_57, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_plain_Hibernate_tuple, 0));

        Py_DECREF(tmp_called_instance_57);
        if (tmp_call_result_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1037;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_37);
    }
    {
        PyObject *tmp_called_instance_58;
        PyObject *tmp_source_name_40;
        PyObject *tmp_call_result_38;
        CHECK_OBJECT(par_self);
        tmp_source_name_40 = par_self;
        tmp_called_instance_58 = LOOKUP_ATTRIBUTE(tmp_source_name_40, const_str_plain_pb_menu);
        if (tmp_called_instance_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1038;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1038;
        tmp_call_result_38 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_58, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_1d5f53675f242c5f0d4f06c176e121a1_tuple, 0));

        Py_DECREF(tmp_called_instance_58);
        if (tmp_call_result_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1038;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_38);
    }
    {
        PyObject *tmp_called_instance_59;
        PyObject *tmp_source_name_41;
        PyObject *tmp_call_result_39;
        CHECK_OBJECT(par_self);
        tmp_source_name_41 = par_self;
        tmp_called_instance_59 = LOOKUP_ATTRIBUTE(tmp_source_name_41, const_str_plain_pb_menu);
        if (tmp_called_instance_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1039;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1039;
        tmp_call_result_39 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_59, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_034ef5cc8ce1d72812e691dc1283ea5a_tuple, 0));

        Py_DECREF(tmp_called_instance_59);
        if (tmp_call_result_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1039;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_39);
    }
    {
        PyObject *tmp_called_instance_60;
        PyObject *tmp_source_name_42;
        PyObject *tmp_call_result_40;
        CHECK_OBJECT(par_self);
        tmp_source_name_42 = par_self;
        tmp_called_instance_60 = LOOKUP_ATTRIBUTE(tmp_source_name_42, const_str_plain_sb_menu);
        if (tmp_called_instance_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1041;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1041;
        tmp_call_result_40 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_60, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_4263c7efeab2c98f9cdfa519ae1cebba_tuple, 0));

        Py_DECREF(tmp_called_instance_60);
        if (tmp_call_result_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1041;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_40);
    }
    {
        PyObject *tmp_called_instance_61;
        PyObject *tmp_source_name_43;
        PyObject *tmp_call_result_41;
        CHECK_OBJECT(par_self);
        tmp_source_name_43 = par_self;
        tmp_called_instance_61 = LOOKUP_ATTRIBUTE(tmp_source_name_43, const_str_plain_sb_menu);
        if (tmp_called_instance_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1042;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1042;
        tmp_call_result_41 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_61, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_plain_Hibernate_tuple, 0));

        Py_DECREF(tmp_called_instance_61);
        if (tmp_call_result_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1042;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_41);
    }
    {
        PyObject *tmp_called_instance_62;
        PyObject *tmp_source_name_44;
        PyObject *tmp_call_result_42;
        CHECK_OBJECT(par_self);
        tmp_source_name_44 = par_self;
        tmp_called_instance_62 = LOOKUP_ATTRIBUTE(tmp_source_name_44, const_str_plain_sb_menu);
        if (tmp_called_instance_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1043;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1043;
        tmp_call_result_42 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_62, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_1d5f53675f242c5f0d4f06c176e121a1_tuple, 0));

        Py_DECREF(tmp_called_instance_62);
        if (tmp_call_result_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1043;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_42);
    }
    {
        PyObject *tmp_called_instance_63;
        PyObject *tmp_source_name_45;
        PyObject *tmp_call_result_43;
        CHECK_OBJECT(par_self);
        tmp_source_name_45 = par_self;
        tmp_called_instance_63 = LOOKUP_ATTRIBUTE(tmp_source_name_45, const_str_plain_sb_menu);
        if (tmp_called_instance_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1044;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1044;
        tmp_call_result_43 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_63, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_034ef5cc8ce1d72812e691dc1283ea5a_tuple, 0));

        Py_DECREF(tmp_called_instance_63);
        if (tmp_call_result_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1044;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_43);
    }
    {
        PyObject *tmp_called_instance_64;
        PyObject *tmp_source_name_46;
        PyObject *tmp_call_result_44;
        CHECK_OBJECT(par_self);
        tmp_source_name_46 = par_self;
        tmp_called_instance_64 = LOOKUP_ATTRIBUTE(tmp_source_name_46, const_str_plain_lid_menu);
        if (tmp_called_instance_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1046;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1046;
        tmp_call_result_44 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_64, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_4263c7efeab2c98f9cdfa519ae1cebba_tuple, 0));

        Py_DECREF(tmp_called_instance_64);
        if (tmp_call_result_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1046;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_44);
    }
    {
        PyObject *tmp_called_instance_65;
        PyObject *tmp_source_name_47;
        PyObject *tmp_call_result_45;
        CHECK_OBJECT(par_self);
        tmp_source_name_47 = par_self;
        tmp_called_instance_65 = LOOKUP_ATTRIBUTE(tmp_source_name_47, const_str_plain_lid_menu);
        if (tmp_called_instance_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1047;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1047;
        tmp_call_result_45 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_65, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_plain_Hibernate_tuple, 0));

        Py_DECREF(tmp_called_instance_65);
        if (tmp_call_result_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1047;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_45);
    }
    {
        PyObject *tmp_called_instance_66;
        PyObject *tmp_source_name_48;
        PyObject *tmp_call_result_46;
        CHECK_OBJECT(par_self);
        tmp_source_name_48 = par_self;
        tmp_called_instance_66 = LOOKUP_ATTRIBUTE(tmp_source_name_48, const_str_plain_lid_menu);
        if (tmp_called_instance_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1048;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1048;
        tmp_call_result_46 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_66, const_str_plain_append_text, &PyTuple_GET_ITEM(const_tuple_str_digest_1d5f53675f242c5f0d4f06c176e121a1_tuple, 0));

        Py_DECREF(tmp_called_instance_66);
        if (tmp_call_result_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1048;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_46);
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_called_instance_67;
        PyObject *tmp_mvar_value_27;
        tmp_mvar_value_27 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_powerset);

        if (unlikely(tmp_mvar_value_27 == NULL)) {
            tmp_mvar_value_27 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_powerset);
        }

        if (tmp_mvar_value_27 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 1490 ], 37, 0);
            exception_tb = NULL;

            exception_lineno = 1050;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_67 = tmp_mvar_value_27;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1050;
        tmp_assign_source_10 = CALL_METHOD_NO_ARGS(tmp_called_instance_67, const_str_plain_get_power);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1050;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_settings == NULL);
        var_settings = tmp_assign_source_10;
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_49;
        PyObject *tmp_source_name_50;
        PyObject *tmp_call_result_47;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_subscribed_name_4;
        PyObject *tmp_subscript_name_4;
        CHECK_OBJECT(par_self);
        tmp_source_name_50 = par_self;
        tmp_source_name_49 = LOOKUP_ATTRIBUTE(tmp_source_name_50, const_str_plain_screen_menu);
        if (tmp_source_name_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1052;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE(tmp_source_name_49, const_str_plain_set_active);
        Py_DECREF(tmp_source_name_49);
        if (tmp_called_name_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1052;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_settings);
        tmp_subscribed_name_4 = var_settings;
        tmp_subscript_name_4 = const_int_0;
        tmp_args_element_name_6 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_4, tmp_subscript_name_4, 0);
        if (tmp_args_element_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_2);

            exception_lineno = 1052;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1052;
        tmp_call_result_47 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_2, tmp_args_element_name_6);
        Py_DECREF(tmp_called_name_2);
        Py_DECREF(tmp_args_element_name_6);
        if (tmp_call_result_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1052;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_47);
    }
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_51;
        PyObject *tmp_source_name_52;
        PyObject *tmp_call_result_48;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_subscribed_name_5;
        PyObject *tmp_subscript_name_5;
        CHECK_OBJECT(par_self);
        tmp_source_name_52 = par_self;
        tmp_source_name_51 = LOOKUP_ATTRIBUTE(tmp_source_name_52, const_str_plain_hib_menu);
        if (tmp_source_name_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1053;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_3 = LOOKUP_ATTRIBUTE(tmp_source_name_51, const_str_plain_set_active);
        Py_DECREF(tmp_source_name_51);
        if (tmp_called_name_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1053;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_settings);
        tmp_subscribed_name_5 = var_settings;
        tmp_subscript_name_5 = const_int_pos_1;
        tmp_args_element_name_7 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_5, tmp_subscript_name_5, 1);
        if (tmp_args_element_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_3);

            exception_lineno = 1053;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1053;
        tmp_call_result_48 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_3, tmp_args_element_name_7);
        Py_DECREF(tmp_called_name_3);
        Py_DECREF(tmp_args_element_name_7);
        if (tmp_call_result_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1053;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_48);
    }
    {
        PyObject *tmp_called_instance_68;
        PyObject *tmp_source_name_53;
        PyObject *tmp_call_result_49;
        CHECK_OBJECT(par_self);
        tmp_source_name_53 = par_self;
        tmp_called_instance_68 = LOOKUP_ATTRIBUTE(tmp_source_name_53, const_str_plain_sleep_menu);
        if (tmp_called_instance_68 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1054;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1054;
        tmp_call_result_49 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_68, const_str_plain_set_active, &PyTuple_GET_ITEM(const_tuple_int_0_tuple, 0));

        Py_DECREF(tmp_called_instance_68);
        if (tmp_call_result_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1054;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_49);
    }
    {
        PyObject *tmp_called_name_4;
        PyObject *tmp_source_name_54;
        PyObject *tmp_source_name_55;
        PyObject *tmp_call_result_50;
        PyObject *tmp_args_element_name_8;
        PyObject *tmp_subscribed_name_6;
        PyObject *tmp_subscript_name_6;
        CHECK_OBJECT(par_self);
        tmp_source_name_55 = par_self;
        tmp_source_name_54 = LOOKUP_ATTRIBUTE(tmp_source_name_55, const_str_plain_pb_menu);
        if (tmp_source_name_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1055;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_4 = LOOKUP_ATTRIBUTE(tmp_source_name_54, const_str_plain_set_active);
        Py_DECREF(tmp_source_name_54);
        if (tmp_called_name_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1055;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_settings);
        tmp_subscribed_name_6 = var_settings;
        tmp_subscript_name_6 = const_int_pos_2;
        tmp_args_element_name_8 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_6, tmp_subscript_name_6, 2);
        if (tmp_args_element_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_4);

            exception_lineno = 1055;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1055;
        tmp_call_result_50 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_4, tmp_args_element_name_8);
        Py_DECREF(tmp_called_name_4);
        Py_DECREF(tmp_args_element_name_8);
        if (tmp_call_result_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1055;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_50);
    }
    {
        PyObject *tmp_called_name_5;
        PyObject *tmp_source_name_56;
        PyObject *tmp_source_name_57;
        PyObject *tmp_call_result_51;
        PyObject *tmp_args_element_name_9;
        PyObject *tmp_subscribed_name_7;
        PyObject *tmp_subscript_name_7;
        CHECK_OBJECT(par_self);
        tmp_source_name_57 = par_self;
        tmp_source_name_56 = LOOKUP_ATTRIBUTE(tmp_source_name_57, const_str_plain_sb_menu);
        if (tmp_source_name_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1056;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_5 = LOOKUP_ATTRIBUTE(tmp_source_name_56, const_str_plain_set_active);
        Py_DECREF(tmp_source_name_56);
        if (tmp_called_name_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1056;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_settings);
        tmp_subscribed_name_7 = var_settings;
        tmp_subscript_name_7 = const_int_pos_3;
        tmp_args_element_name_9 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_7, tmp_subscript_name_7, 3);
        if (tmp_args_element_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_5);

            exception_lineno = 1056;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1056;
        tmp_call_result_51 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_5, tmp_args_element_name_9);
        Py_DECREF(tmp_called_name_5);
        Py_DECREF(tmp_args_element_name_9);
        if (tmp_call_result_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1056;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_51);
    }
    {
        PyObject *tmp_called_name_6;
        PyObject *tmp_source_name_58;
        PyObject *tmp_source_name_59;
        PyObject *tmp_call_result_52;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_subscribed_name_8;
        PyObject *tmp_subscript_name_8;
        CHECK_OBJECT(par_self);
        tmp_source_name_59 = par_self;
        tmp_source_name_58 = LOOKUP_ATTRIBUTE(tmp_source_name_59, const_str_plain_lid_menu);
        if (tmp_source_name_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1057;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_6 = LOOKUP_ATTRIBUTE(tmp_source_name_58, const_str_plain_set_active);
        Py_DECREF(tmp_source_name_58);
        if (tmp_called_name_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1057;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_settings);
        tmp_subscribed_name_8 = var_settings;
        tmp_subscript_name_8 = const_int_pos_4;
        tmp_args_element_name_10 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_8, tmp_subscript_name_8, 4);
        if (tmp_args_element_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_6);

            exception_lineno = 1057;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1057;
        tmp_call_result_52 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_name_6, tmp_args_element_name_10);
        Py_DECREF(tmp_called_name_6);
        Py_DECREF(tmp_args_element_name_10);
        if (tmp_call_result_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1057;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_52);
    }
    {
        PyObject *tmp_called_instance_69;
        PyObject *tmp_source_name_60;
        PyObject *tmp_call_result_53;
        CHECK_OBJECT(par_self);
        tmp_source_name_60 = par_self;
        tmp_called_instance_69 = LOOKUP_ATTRIBUTE(tmp_source_name_60, const_str_plain_sleep_menu);
        if (tmp_called_instance_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1059;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1059;
        tmp_call_result_53 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_69, const_str_plain_set_sensitive, &PyTuple_GET_ITEM(const_tuple_false_tuple, 0));

        Py_DECREF(tmp_called_instance_69);
        if (tmp_call_result_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1059;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_53);
    }
    {
        PyObject *tmp_called_instance_70;
        PyObject *tmp_call_result_54;
        PyObject *tmp_args_element_name_11;
        CHECK_OBJECT(var_vbox);
        tmp_called_instance_70 = var_vbox;
        CHECK_OBJECT(var_pwr_instr);
        tmp_args_element_name_11 = var_pwr_instr;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1061;
        {
            PyObject *call_args[] = {tmp_args_element_name_11};
            tmp_call_result_54 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_70, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1061;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_54);
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_called_instance_71;
        PyObject *tmp_mvar_value_28;
        tmp_mvar_value_28 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_28 == NULL)) {
            tmp_mvar_value_28 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_28 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 1062;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_71 = tmp_mvar_value_28;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1062;
        tmp_assign_source_11 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_71, const_str_plain_HBox, &PyTuple_GET_ITEM(const_tuple_false_int_0_tuple, 0));

        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1062;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_hbox0 == NULL);
        var_hbox0 = tmp_assign_source_11;
    }
    {
        PyObject *tmp_called_instance_72;
        PyObject *tmp_call_result_55;
        PyObject *tmp_args_element_name_12;
        PyObject *tmp_args_element_name_13;
        PyObject *tmp_args_element_name_14;
        CHECK_OBJECT(var_hbox0);
        tmp_called_instance_72 = var_hbox0;
        CHECK_OBJECT(var_screen_label);
        tmp_args_element_name_12 = var_screen_label;
        tmp_args_element_name_13 = Py_False;
        tmp_args_element_name_14 = Py_False;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1063;
        {
            PyObject *call_args[] = {tmp_args_element_name_12, tmp_args_element_name_13, tmp_args_element_name_14};
            tmp_call_result_55 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_72, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1063;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_55);
    }
    {
        PyObject *tmp_called_name_7;
        PyObject *tmp_source_name_61;
        PyObject *tmp_call_result_56;
        PyObject *tmp_args_element_name_15;
        PyObject *tmp_source_name_62;
        PyObject *tmp_args_element_name_16;
        PyObject *tmp_args_element_name_17;
        CHECK_OBJECT(var_hbox0);
        tmp_source_name_61 = var_hbox0;
        tmp_called_name_7 = LOOKUP_ATTRIBUTE(tmp_source_name_61, const_str_plain_pack_end);
        if (tmp_called_name_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1064;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_62 = par_self;
        tmp_args_element_name_15 = LOOKUP_ATTRIBUTE(tmp_source_name_62, const_str_plain_screen_menu);
        if (tmp_args_element_name_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_7);

            exception_lineno = 1064;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_16 = Py_False;
        tmp_args_element_name_17 = Py_False;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1064;
        {
            PyObject *call_args[] = {tmp_args_element_name_15, tmp_args_element_name_16, tmp_args_element_name_17};
            tmp_call_result_56 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_7, call_args);
        }

        Py_DECREF(tmp_called_name_7);
        Py_DECREF(tmp_args_element_name_15);
        if (tmp_call_result_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1064;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_56);
    }
    {
        PyObject *tmp_called_instance_73;
        PyObject *tmp_call_result_57;
        PyObject *tmp_args_element_name_18;
        PyObject *tmp_args_element_name_19;
        PyObject *tmp_args_element_name_20;
        CHECK_OBJECT(var_vbox);
        tmp_called_instance_73 = var_vbox;
        CHECK_OBJECT(var_hbox0);
        tmp_args_element_name_18 = var_hbox0;
        tmp_args_element_name_19 = Py_True;
        tmp_args_element_name_20 = Py_False;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1065;
        {
            PyObject *call_args[] = {tmp_args_element_name_18, tmp_args_element_name_19, tmp_args_element_name_20};
            tmp_call_result_57 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_73, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1065;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_57);
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_called_instance_74;
        PyObject *tmp_mvar_value_29;
        tmp_mvar_value_29 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_29 == NULL)) {
            tmp_mvar_value_29 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_29 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 1066;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_74 = tmp_mvar_value_29;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1066;
        tmp_assign_source_12 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_74, const_str_plain_HBox, &PyTuple_GET_ITEM(const_tuple_false_int_0_tuple, 0));

        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1066;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_hbox1 == NULL);
        var_hbox1 = tmp_assign_source_12;
    }
    {
        PyObject *tmp_called_instance_75;
        PyObject *tmp_call_result_58;
        PyObject *tmp_args_element_name_21;
        PyObject *tmp_args_element_name_22;
        PyObject *tmp_args_element_name_23;
        CHECK_OBJECT(var_hbox1);
        tmp_called_instance_75 = var_hbox1;
        CHECK_OBJECT(var_hib_label);
        tmp_args_element_name_21 = var_hib_label;
        tmp_args_element_name_22 = Py_False;
        tmp_args_element_name_23 = Py_False;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1067;
        {
            PyObject *call_args[] = {tmp_args_element_name_21, tmp_args_element_name_22, tmp_args_element_name_23};
            tmp_call_result_58 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_75, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1067;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_58);
    }
    {
        PyObject *tmp_called_name_8;
        PyObject *tmp_source_name_63;
        PyObject *tmp_call_result_59;
        PyObject *tmp_args_element_name_24;
        PyObject *tmp_source_name_64;
        PyObject *tmp_args_element_name_25;
        PyObject *tmp_args_element_name_26;
        CHECK_OBJECT(var_hbox1);
        tmp_source_name_63 = var_hbox1;
        tmp_called_name_8 = LOOKUP_ATTRIBUTE(tmp_source_name_63, const_str_plain_pack_end);
        if (tmp_called_name_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1068;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_64 = par_self;
        tmp_args_element_name_24 = LOOKUP_ATTRIBUTE(tmp_source_name_64, const_str_plain_hib_menu);
        if (tmp_args_element_name_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_8);

            exception_lineno = 1068;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_25 = Py_False;
        tmp_args_element_name_26 = Py_False;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1068;
        {
            PyObject *call_args[] = {tmp_args_element_name_24, tmp_args_element_name_25, tmp_args_element_name_26};
            tmp_call_result_59 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_8, call_args);
        }

        Py_DECREF(tmp_called_name_8);
        Py_DECREF(tmp_args_element_name_24);
        if (tmp_call_result_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1068;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_59);
    }
    {
        PyObject *tmp_called_instance_76;
        PyObject *tmp_call_result_60;
        PyObject *tmp_args_element_name_27;
        PyObject *tmp_args_element_name_28;
        PyObject *tmp_args_element_name_29;
        CHECK_OBJECT(var_vbox);
        tmp_called_instance_76 = var_vbox;
        CHECK_OBJECT(var_hbox1);
        tmp_args_element_name_27 = var_hbox1;
        tmp_args_element_name_28 = Py_True;
        tmp_args_element_name_29 = Py_False;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1069;
        {
            PyObject *call_args[] = {tmp_args_element_name_27, tmp_args_element_name_28, tmp_args_element_name_29};
            tmp_call_result_60 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_76, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1069;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_60);
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_called_instance_77;
        PyObject *tmp_mvar_value_30;
        tmp_mvar_value_30 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_30 == NULL)) {
            tmp_mvar_value_30 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_30 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 1070;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_77 = tmp_mvar_value_30;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1070;
        tmp_assign_source_13 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_77, const_str_plain_HBox, &PyTuple_GET_ITEM(const_tuple_false_int_0_tuple, 0));

        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1070;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_hbox2 == NULL);
        var_hbox2 = tmp_assign_source_13;
    }
    {
        PyObject *tmp_called_instance_78;
        PyObject *tmp_call_result_61;
        PyObject *tmp_args_element_name_30;
        PyObject *tmp_args_element_name_31;
        PyObject *tmp_args_element_name_32;
        CHECK_OBJECT(var_hbox2);
        tmp_called_instance_78 = var_hbox2;
        CHECK_OBJECT(var_sleep_label);
        tmp_args_element_name_30 = var_sleep_label;
        tmp_args_element_name_31 = Py_False;
        tmp_args_element_name_32 = Py_False;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1071;
        {
            PyObject *call_args[] = {tmp_args_element_name_30, tmp_args_element_name_31, tmp_args_element_name_32};
            tmp_call_result_61 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_78, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1071;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_61);
    }
    {
        PyObject *tmp_called_name_9;
        PyObject *tmp_source_name_65;
        PyObject *tmp_call_result_62;
        PyObject *tmp_args_element_name_33;
        PyObject *tmp_source_name_66;
        PyObject *tmp_args_element_name_34;
        PyObject *tmp_args_element_name_35;
        CHECK_OBJECT(var_hbox2);
        tmp_source_name_65 = var_hbox2;
        tmp_called_name_9 = LOOKUP_ATTRIBUTE(tmp_source_name_65, const_str_plain_pack_end);
        if (tmp_called_name_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1072;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_66 = par_self;
        tmp_args_element_name_33 = LOOKUP_ATTRIBUTE(tmp_source_name_66, const_str_plain_sleep_menu);
        if (tmp_args_element_name_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_9);

            exception_lineno = 1072;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_34 = Py_False;
        tmp_args_element_name_35 = Py_False;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1072;
        {
            PyObject *call_args[] = {tmp_args_element_name_33, tmp_args_element_name_34, tmp_args_element_name_35};
            tmp_call_result_62 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_9, call_args);
        }

        Py_DECREF(tmp_called_name_9);
        Py_DECREF(tmp_args_element_name_33);
        if (tmp_call_result_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1072;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_62);
    }
    {
        PyObject *tmp_called_instance_79;
        PyObject *tmp_call_result_63;
        PyObject *tmp_args_element_name_36;
        PyObject *tmp_args_element_name_37;
        PyObject *tmp_args_element_name_38;
        CHECK_OBJECT(var_vbox);
        tmp_called_instance_79 = var_vbox;
        CHECK_OBJECT(var_hbox2);
        tmp_args_element_name_36 = var_hbox2;
        tmp_args_element_name_37 = Py_True;
        tmp_args_element_name_38 = Py_False;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1073;
        {
            PyObject *call_args[] = {tmp_args_element_name_36, tmp_args_element_name_37, tmp_args_element_name_38};
            tmp_call_result_63 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_79, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1073;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_63);
    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_called_instance_80;
        PyObject *tmp_mvar_value_31;
        tmp_mvar_value_31 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_31 == NULL)) {
            tmp_mvar_value_31 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_31 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 1074;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_80 = tmp_mvar_value_31;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1074;
        tmp_assign_source_14 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_80, const_str_plain_HBox, &PyTuple_GET_ITEM(const_tuple_false_int_0_tuple, 0));

        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1074;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_hbox3 == NULL);
        var_hbox3 = tmp_assign_source_14;
    }
    {
        PyObject *tmp_called_instance_81;
        PyObject *tmp_call_result_64;
        PyObject *tmp_args_element_name_39;
        PyObject *tmp_args_element_name_40;
        PyObject *tmp_args_element_name_41;
        CHECK_OBJECT(var_hbox3);
        tmp_called_instance_81 = var_hbox3;
        CHECK_OBJECT(var_pb_label);
        tmp_args_element_name_39 = var_pb_label;
        tmp_args_element_name_40 = Py_False;
        tmp_args_element_name_41 = Py_False;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1075;
        {
            PyObject *call_args[] = {tmp_args_element_name_39, tmp_args_element_name_40, tmp_args_element_name_41};
            tmp_call_result_64 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_81, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1075;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_64);
    }
    {
        PyObject *tmp_called_name_10;
        PyObject *tmp_source_name_67;
        PyObject *tmp_call_result_65;
        PyObject *tmp_args_element_name_42;
        PyObject *tmp_source_name_68;
        PyObject *tmp_args_element_name_43;
        PyObject *tmp_args_element_name_44;
        CHECK_OBJECT(var_hbox3);
        tmp_source_name_67 = var_hbox3;
        tmp_called_name_10 = LOOKUP_ATTRIBUTE(tmp_source_name_67, const_str_plain_pack_end);
        if (tmp_called_name_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1076;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_68 = par_self;
        tmp_args_element_name_42 = LOOKUP_ATTRIBUTE(tmp_source_name_68, const_str_plain_pb_menu);
        if (tmp_args_element_name_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_10);

            exception_lineno = 1076;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_43 = Py_False;
        tmp_args_element_name_44 = Py_False;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1076;
        {
            PyObject *call_args[] = {tmp_args_element_name_42, tmp_args_element_name_43, tmp_args_element_name_44};
            tmp_call_result_65 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_10, call_args);
        }

        Py_DECREF(tmp_called_name_10);
        Py_DECREF(tmp_args_element_name_42);
        if (tmp_call_result_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1076;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_65);
    }
    {
        PyObject *tmp_called_instance_82;
        PyObject *tmp_call_result_66;
        PyObject *tmp_args_element_name_45;
        PyObject *tmp_args_element_name_46;
        PyObject *tmp_args_element_name_47;
        CHECK_OBJECT(var_vbox);
        tmp_called_instance_82 = var_vbox;
        CHECK_OBJECT(var_hbox3);
        tmp_args_element_name_45 = var_hbox3;
        tmp_args_element_name_46 = Py_True;
        tmp_args_element_name_47 = Py_False;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1077;
        {
            PyObject *call_args[] = {tmp_args_element_name_45, tmp_args_element_name_46, tmp_args_element_name_47};
            tmp_call_result_66 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_82, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1077;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_66);
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_called_instance_83;
        PyObject *tmp_mvar_value_32;
        tmp_mvar_value_32 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_32 == NULL)) {
            tmp_mvar_value_32 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_32 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 1078;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_83 = tmp_mvar_value_32;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1078;
        tmp_assign_source_15 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_83, const_str_plain_HBox, &PyTuple_GET_ITEM(const_tuple_false_int_0_tuple, 0));

        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1078;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_hbox4 == NULL);
        var_hbox4 = tmp_assign_source_15;
    }
    {
        PyObject *tmp_called_instance_84;
        PyObject *tmp_call_result_67;
        PyObject *tmp_args_element_name_48;
        PyObject *tmp_args_element_name_49;
        PyObject *tmp_args_element_name_50;
        CHECK_OBJECT(var_hbox4);
        tmp_called_instance_84 = var_hbox4;
        CHECK_OBJECT(var_sb_label);
        tmp_args_element_name_48 = var_sb_label;
        tmp_args_element_name_49 = Py_False;
        tmp_args_element_name_50 = Py_False;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1079;
        {
            PyObject *call_args[] = {tmp_args_element_name_48, tmp_args_element_name_49, tmp_args_element_name_50};
            tmp_call_result_67 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_84, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1079;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_67);
    }
    {
        PyObject *tmp_called_name_11;
        PyObject *tmp_source_name_69;
        PyObject *tmp_call_result_68;
        PyObject *tmp_args_element_name_51;
        PyObject *tmp_source_name_70;
        PyObject *tmp_args_element_name_52;
        PyObject *tmp_args_element_name_53;
        CHECK_OBJECT(var_hbox4);
        tmp_source_name_69 = var_hbox4;
        tmp_called_name_11 = LOOKUP_ATTRIBUTE(tmp_source_name_69, const_str_plain_pack_end);
        if (tmp_called_name_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1080;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_70 = par_self;
        tmp_args_element_name_51 = LOOKUP_ATTRIBUTE(tmp_source_name_70, const_str_plain_sb_menu);
        if (tmp_args_element_name_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_11);

            exception_lineno = 1080;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_52 = Py_False;
        tmp_args_element_name_53 = Py_False;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1080;
        {
            PyObject *call_args[] = {tmp_args_element_name_51, tmp_args_element_name_52, tmp_args_element_name_53};
            tmp_call_result_68 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_11, call_args);
        }

        Py_DECREF(tmp_called_name_11);
        Py_DECREF(tmp_args_element_name_51);
        if (tmp_call_result_68 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1080;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_68);
    }
    {
        PyObject *tmp_called_instance_85;
        PyObject *tmp_call_result_69;
        PyObject *tmp_args_element_name_54;
        PyObject *tmp_args_element_name_55;
        PyObject *tmp_args_element_name_56;
        CHECK_OBJECT(var_vbox);
        tmp_called_instance_85 = var_vbox;
        CHECK_OBJECT(var_hbox4);
        tmp_args_element_name_54 = var_hbox4;
        tmp_args_element_name_55 = Py_True;
        tmp_args_element_name_56 = Py_False;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1081;
        {
            PyObject *call_args[] = {tmp_args_element_name_54, tmp_args_element_name_55, tmp_args_element_name_56};
            tmp_call_result_69 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_85, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1081;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_69);
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_called_instance_86;
        PyObject *tmp_mvar_value_33;
        tmp_mvar_value_33 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_33 == NULL)) {
            tmp_mvar_value_33 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_33 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 1082;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_86 = tmp_mvar_value_33;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1082;
        tmp_assign_source_16 = CALL_METHOD_WITH_ARGS2(tmp_called_instance_86, const_str_plain_HBox, &PyTuple_GET_ITEM(const_tuple_false_int_0_tuple, 0));

        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1082;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_hbox5 == NULL);
        var_hbox5 = tmp_assign_source_16;
    }
    {
        PyObject *tmp_called_instance_87;
        PyObject *tmp_call_result_70;
        PyObject *tmp_args_element_name_57;
        PyObject *tmp_args_element_name_58;
        PyObject *tmp_args_element_name_59;
        CHECK_OBJECT(var_hbox5);
        tmp_called_instance_87 = var_hbox5;
        CHECK_OBJECT(var_lid_label);
        tmp_args_element_name_57 = var_lid_label;
        tmp_args_element_name_58 = Py_False;
        tmp_args_element_name_59 = Py_False;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1083;
        {
            PyObject *call_args[] = {tmp_args_element_name_57, tmp_args_element_name_58, tmp_args_element_name_59};
            tmp_call_result_70 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_87, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_70 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1083;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_70);
    }
    {
        PyObject *tmp_called_name_12;
        PyObject *tmp_source_name_71;
        PyObject *tmp_call_result_71;
        PyObject *tmp_args_element_name_60;
        PyObject *tmp_source_name_72;
        PyObject *tmp_args_element_name_61;
        PyObject *tmp_args_element_name_62;
        CHECK_OBJECT(var_hbox5);
        tmp_source_name_71 = var_hbox5;
        tmp_called_name_12 = LOOKUP_ATTRIBUTE(tmp_source_name_71, const_str_plain_pack_end);
        if (tmp_called_name_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1084;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_source_name_72 = par_self;
        tmp_args_element_name_60 = LOOKUP_ATTRIBUTE(tmp_source_name_72, const_str_plain_lid_menu);
        if (tmp_args_element_name_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_name_12);

            exception_lineno = 1084;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_61 = Py_False;
        tmp_args_element_name_62 = Py_False;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1084;
        {
            PyObject *call_args[] = {tmp_args_element_name_60, tmp_args_element_name_61, tmp_args_element_name_62};
            tmp_call_result_71 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_12, call_args);
        }

        Py_DECREF(tmp_called_name_12);
        Py_DECREF(tmp_args_element_name_60);
        if (tmp_call_result_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1084;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_71);
    }
    {
        PyObject *tmp_called_instance_88;
        PyObject *tmp_call_result_72;
        PyObject *tmp_args_element_name_63;
        PyObject *tmp_args_element_name_64;
        PyObject *tmp_args_element_name_65;
        CHECK_OBJECT(var_vbox);
        tmp_called_instance_88 = var_vbox;
        CHECK_OBJECT(var_hbox5);
        tmp_args_element_name_63 = var_hbox5;
        tmp_args_element_name_64 = Py_True;
        tmp_args_element_name_65 = Py_False;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1085;
        {
            PyObject *call_args[] = {tmp_args_element_name_63, tmp_args_element_name_64, tmp_args_element_name_65};
            tmp_call_result_72 = CALL_METHOD_WITH_ARGS3(tmp_called_instance_88, const_str_plain_pack_start, call_args);
        }

        if (tmp_call_result_72 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1085;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_72);
    }
    {
        PyObject *tmp_called_instance_89;
        PyObject *tmp_call_result_73;
        CHECK_OBJECT(par_self);
        tmp_called_instance_89 = par_self;
        frame_8c8667ffbd7ea33207e44e91b413156a->m_frame.f_lineno = 1087;
        tmp_call_result_73 = CALL_METHOD_NO_ARGS(tmp_called_instance_89, const_str_plain_show_all);
        if (tmp_call_result_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1087;
            type_description_1 = "oooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_73);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8c8667ffbd7ea33207e44e91b413156a);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8c8667ffbd7ea33207e44e91b413156a);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8c8667ffbd7ea33207e44e91b413156a, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_8c8667ffbd7ea33207e44e91b413156a->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8c8667ffbd7ea33207e44e91b413156a, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8c8667ffbd7ea33207e44e91b413156a,
        type_description_1,
        par_self,
        par_parent,
        par_mode,
        var_hbox4,
        var_lid_label,
        var_hbox2,
        var_hbox0,
        var_hbox1,
        var_settings,
        var_pb_label,
        var_hbox3,
        var_screen_label,
        var_vbox,
        var_sb_label,
        var_hbox5,
        var_sleep_label,
        var_pwr_instr,
        var_hib_label
    );


    // Release cached frame.
    if (frame_8c8667ffbd7ea33207e44e91b413156a == cache_frame_8c8667ffbd7ea33207e44e91b413156a) {
        Py_DECREF(frame_8c8667ffbd7ea33207e44e91b413156a);
    }
    cache_frame_8c8667ffbd7ea33207e44e91b413156a = NULL;

    assertFrameObject(frame_8c8667ffbd7ea33207e44e91b413156a);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_22___init__);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT((PyObject *)var_hbox4);
    Py_DECREF(var_hbox4);
    var_hbox4 = NULL;

    CHECK_OBJECT((PyObject *)var_lid_label);
    Py_DECREF(var_lid_label);
    var_lid_label = NULL;

    CHECK_OBJECT((PyObject *)var_hbox2);
    Py_DECREF(var_hbox2);
    var_hbox2 = NULL;

    CHECK_OBJECT((PyObject *)var_hbox0);
    Py_DECREF(var_hbox0);
    var_hbox0 = NULL;

    CHECK_OBJECT((PyObject *)var_hbox1);
    Py_DECREF(var_hbox1);
    var_hbox1 = NULL;

    CHECK_OBJECT((PyObject *)var_settings);
    Py_DECREF(var_settings);
    var_settings = NULL;

    CHECK_OBJECT((PyObject *)var_pb_label);
    Py_DECREF(var_pb_label);
    var_pb_label = NULL;

    CHECK_OBJECT((PyObject *)var_hbox3);
    Py_DECREF(var_hbox3);
    var_hbox3 = NULL;

    CHECK_OBJECT((PyObject *)var_screen_label);
    Py_DECREF(var_screen_label);
    var_screen_label = NULL;

    CHECK_OBJECT((PyObject *)var_vbox);
    Py_DECREF(var_vbox);
    var_vbox = NULL;

    CHECK_OBJECT((PyObject *)var_sb_label);
    Py_DECREF(var_sb_label);
    var_sb_label = NULL;

    CHECK_OBJECT((PyObject *)var_hbox5);
    Py_DECREF(var_hbox5);
    var_hbox5 = NULL;

    CHECK_OBJECT((PyObject *)var_sleep_label);
    Py_DECREF(var_sleep_label);
    var_sleep_label = NULL;

    CHECK_OBJECT((PyObject *)var_pwr_instr);
    Py_DECREF(var_pwr_instr);
    var_pwr_instr = NULL;

    CHECK_OBJECT((PyObject *)var_hib_label);
    Py_DECREF(var_hib_label);
    var_hib_label = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_hbox4);
    var_hbox4 = NULL;

    Py_XDECREF(var_lid_label);
    var_lid_label = NULL;

    Py_XDECREF(var_hbox2);
    var_hbox2 = NULL;

    Py_XDECREF(var_hbox0);
    var_hbox0 = NULL;

    Py_XDECREF(var_hbox1);
    var_hbox1 = NULL;

    Py_XDECREF(var_settings);
    var_settings = NULL;

    Py_XDECREF(var_pb_label);
    var_pb_label = NULL;

    Py_XDECREF(var_hbox3);
    var_hbox3 = NULL;

    Py_XDECREF(var_screen_label);
    var_screen_label = NULL;

    Py_XDECREF(var_vbox);
    var_vbox = NULL;

    Py_XDECREF(var_sb_label);
    var_sb_label = NULL;

    Py_XDECREF(var_hbox5);
    var_hbox5 = NULL;

    Py_XDECREF(var_sleep_label);
    var_sleep_label = NULL;

    Py_XDECREF(var_pwr_instr);
    var_pwr_instr = NULL;

    Py_XDECREF(var_hib_label);
    var_hib_label = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_22___init__);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_mode);
    Py_DECREF(par_mode);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_mode);
    Py_DECREF(par_mode);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_dialogs$$$function_23_mngPower_prompt(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_button = python_pars[0];
    PyObject *par_parent = python_pars[1];
    PyObject *par_mode = python_pars[2];
    PyObject *var_res = NULL;
    PyObject *var_s = NULL;
    PyObject *var_done = NULL;
    PyObject *var_dialog = NULL;
    struct Nuitka_FrameObject *frame_bb6be9118e6e94cdab1fad69f3496610;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_bb6be9118e6e94cdab1fad69f3496610 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME(cache_frame_bb6be9118e6e94cdab1fad69f3496610, codeobj_bb6be9118e6e94cdab1fad69f3496610, module_dialogs, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
    frame_bb6be9118e6e94cdab1fad69f3496610 = cache_frame_bb6be9118e6e94cdab1fad69f3496610;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_bb6be9118e6e94cdab1fad69f3496610);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_bb6be9118e6e94cdab1fad69f3496610) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_verify);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_verify);
        }

        if (tmp_mvar_value_1 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 236 ], 35, 0);
            exception_tb = NULL;

            exception_lineno = 1091;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        CHECK_OBJECT(par_parent);
        tmp_args_element_name_1 = par_parent;
        frame_bb6be9118e6e94cdab1fad69f3496610->m_frame.f_lineno = 1091;
        {
            PyObject *call_args[] = {tmp_args_element_name_1};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_1, const_str_plain_licCheck, call_args);
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1091;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_False;
        assert(var_done == NULL);
        Py_INCREF(tmp_assign_source_1);
        var_done = tmp_assign_source_1;
    }
    loop_start_1:;
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_operand_name_2;
        if (var_done == NULL) {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF(exception_type);
            exception_value = PyString_FromFormat("local variable '%s' referenced before assignment", "done");
            exception_tb = NULL;

            exception_lineno = 1093;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_operand_name_2 = var_done;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1093;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_1 = (tmp_res == 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1093;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        goto loop_end_1;
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_SetPowerDialog);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_SetPowerDialog);
        }

        if (tmp_mvar_value_2 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 1527 ], 43, 0);
            exception_tb = NULL;

            exception_lineno = 1094;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_2;
        CHECK_OBJECT(par_parent);
        tmp_args_element_name_2 = par_parent;
        CHECK_OBJECT(par_mode);
        tmp_args_element_name_3 = par_mode;
        frame_bb6be9118e6e94cdab1fad69f3496610->m_frame.f_lineno = 1094;
        {
            PyObject *call_args[] = {tmp_args_element_name_2, tmp_args_element_name_3};
            tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2(tmp_called_name_1, call_args);
        }

        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1094;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_dialog;
            var_dialog = tmp_assign_source_2;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT(var_dialog);
        tmp_called_instance_2 = var_dialog;
        frame_bb6be9118e6e94cdab1fad69f3496610->m_frame.f_lineno = 1095;
        tmp_assign_source_3 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, const_str_plain_run);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1095;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_3;
        CHECK_OBJECT(var_res);
        tmp_compexpr_left_1 = var_res;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_3 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 316 ], 32, 0);
            exception_tb = NULL;

            exception_lineno = 1097;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_3;
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_RESPONSE_APPLY);
        if (tmp_compexpr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1097;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1097;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_called_instance_3;
            PyObject *tmp_mvar_value_4;
            PyObject *tmp_args_element_name_4;
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_powerset);

            if (unlikely(tmp_mvar_value_4 == NULL)) {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_powerset);
            }

            if (tmp_mvar_value_4 == NULL) {

                exception_type = PyExc_NameError;
                Py_INCREF(exception_type);
                exception_value = UNSTREAM_STRING(&constant_bin[ 1490 ], 37, 0);
                exception_tb = NULL;

                exception_lineno = 1098;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_3 = tmp_mvar_value_4;
            CHECK_OBJECT(var_dialog);
            tmp_args_element_name_4 = var_dialog;
            frame_bb6be9118e6e94cdab1fad69f3496610->m_frame.f_lineno = 1098;
            {
                PyObject *call_args[] = {tmp_args_element_name_4};
                tmp_assign_source_4 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_3, const_str_plain_set_power, call_args);
            }

            if (tmp_assign_source_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1098;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_s;
                var_s = tmp_assign_source_4;
                Py_XDECREF(old);
            }

        }
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT(var_s);
            tmp_compexpr_left_2 = var_s;
            tmp_compexpr_right_2 = const_int_0;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_INT(tmp_compexpr_left_2, tmp_compexpr_right_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1099;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
                goto branch_yes_3;
            } else {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_called_instance_4;
                PyObject *tmp_call_result_2;
                CHECK_OBJECT(par_parent);
                tmp_called_instance_4 = par_parent;
                frame_bb6be9118e6e94cdab1fad69f3496610->m_frame.f_lineno = 1100;
                tmp_call_result_2 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_4, const_str_plain_msg_ok, &PyTuple_GET_ITEM(const_tuple_str_digest_f4836760c9d3202152b7ff9ebfeddb54_tuple, 0));

                if (tmp_call_result_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1100;
                    type_description_1 = "ooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_2);
            }
            {
                PyObject *tmp_assign_source_5;
                tmp_assign_source_5 = Py_True;
                {
                    PyObject *old = var_done;
                    var_done = tmp_assign_source_5;
                    Py_INCREF(var_done);
                    Py_XDECREF(old);
                }

            }
            goto branch_end_3;
            branch_no_3:;
            {
                PyObject *tmp_called_instance_5;
                PyObject *tmp_call_result_3;
                CHECK_OBJECT(par_parent);
                tmp_called_instance_5 = par_parent;
                frame_bb6be9118e6e94cdab1fad69f3496610->m_frame.f_lineno = 1103;
                tmp_call_result_3 = CALL_METHOD_WITH_ARGS1(tmp_called_instance_5, const_str_plain_msg_err, &PyTuple_GET_ITEM(const_tuple_str_digest_268db6629a0b2da516d45c0905e9f223_tuple, 0));

                if (tmp_call_result_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1103;
                    type_description_1 = "ooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF(tmp_call_result_3);
            }
            branch_end_3:;
        }
        goto branch_end_2;
        branch_no_2:;
        {
            PyObject *tmp_assign_source_6;
            tmp_assign_source_6 = Py_True;
            {
                PyObject *old = var_done;
                var_done = tmp_assign_source_6;
                Py_INCREF(var_done);
                Py_XDECREF(old);
            }

        }
        branch_end_2:;
    }
    {
        PyObject *tmp_called_instance_6;
        PyObject *tmp_call_result_4;
        CHECK_OBJECT(var_dialog);
        tmp_called_instance_6 = var_dialog;
        frame_bb6be9118e6e94cdab1fad69f3496610->m_frame.f_lineno = 1107;
        tmp_call_result_4 = CALL_METHOD_NO_ARGS(tmp_called_instance_6, const_str_plain_destroy);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1107;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1093;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_bb6be9118e6e94cdab1fad69f3496610);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_bb6be9118e6e94cdab1fad69f3496610);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_bb6be9118e6e94cdab1fad69f3496610, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_bb6be9118e6e94cdab1fad69f3496610->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_bb6be9118e6e94cdab1fad69f3496610, exception_lineno);
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_bb6be9118e6e94cdab1fad69f3496610,
        type_description_1,
        par_button,
        par_parent,
        par_mode,
        var_res,
        var_s,
        var_done,
        var_dialog
    );


    // Release cached frame.
    if (frame_bb6be9118e6e94cdab1fad69f3496610 == cache_frame_bb6be9118e6e94cdab1fad69f3496610) {
        Py_DECREF(frame_bb6be9118e6e94cdab1fad69f3496610);
    }
    cache_frame_bb6be9118e6e94cdab1fad69f3496610 = NULL;

    assertFrameObject(frame_bb6be9118e6e94cdab1fad69f3496610);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_23_mngPower_prompt);
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_res);
    var_res = NULL;

    Py_XDECREF(var_s);
    var_s = NULL;

    Py_XDECREF(var_done);
    var_done = NULL;

    Py_XDECREF(var_dialog);
    var_dialog = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_res);
    var_res = NULL;

    Py_XDECREF(var_s);
    var_s = NULL;

    Py_XDECREF(var_done);
    var_done = NULL;

    Py_XDECREF(var_dialog);
    var_dialog = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE(dialogs$$$function_23_mngPower_prompt);
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);
    CHECK_OBJECT(par_mode);
    Py_DECREF(par_mode);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);
    CHECK_OBJECT(par_button);
    Py_DECREF(par_button);
    CHECK_OBJECT(par_mode);
    Py_DECREF(par_mode);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_10_msg_err() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_10_msg_err,
        const_str_plain_msg_err,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_1f970691038a87f4b74dd84c88e18063,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_11_msg_ok() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_11_msg_ok,
        const_str_plain_msg_ok,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_78146796101c5ccb0cb445ee11501677,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_12_query() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_12_query,
        const_str_plain_query,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_ed44140aa8ea052c1de5d94d3a6d0d62,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_13___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_13___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_f472c0e13a0220a9ef62e77ea0093a01,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_14_saveToCSV() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_14_saveToCSV,
        const_str_plain_saveToCSV,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_5e261a6409d1a8794a804c974235a230,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_15_filterLog() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_15_filterLog,
        const_str_plain_filterLog,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_26e0170fd15b2d159020ce747904a93b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_16_openLog() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_16_openLog,
        const_str_plain_openLog,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_1bf6d1030b75188bd6a8b51e170fc4f1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_17___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_17___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_9386c7ff5d3ff7b83c8cf305e4c392d8,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_18_openOpal() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_18_openOpal,
        const_str_plain_openOpal,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_c5c5562be75f922837dddad4bb032dfe,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_19___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_19___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_3d85e9441e1fca82b0664c8186011a57,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_19___init__$$$function_1_t1_run() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_19___init__$$$function_1_t1_run,
        const_str_plain_t1_run,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_21fd2959b99fe54a3447114bd6e97730,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        2
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_19___init__$$$function_2_cleanup() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_19___init__$$$function_2_cleanup,
        const_str_plain_cleanup,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_ef0067c30e640f9c83b22220d14d0767,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        2
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_1___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_1___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_4bf6f748b6bffa8bded57eec73a6cb75,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_20_refreshUSB() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_20_refreshUSB,
        const_str_plain_refreshUSB,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_60373512ef7346ec75af4b60640e5729,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_21_show_about() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_21_show_about,
        const_str_plain_show_about,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_a35f124764436ec53911585e0d461dbe,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_22___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_22___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_8c8667ffbd7ea33207e44e91b413156a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_23_mngPower_prompt() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_23_mngPower_prompt,
        const_str_plain_mngPower_prompt,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_bb6be9118e6e94cdab1fad69f3496610,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_2_onDestroy() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_2_onDestroy,
        const_str_plain_onDestroy,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_b13925c23bd35212453f4b8800203e07,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_3_check_toggled() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_3_check_toggled,
        const_str_plain_check_toggled,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_df0270df38e2bd58819d05387e4bda45,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_4_showPass_toggled() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_4_showPass_toggled,
        const_str_plain_showPass_toggled,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_5213d8c40e0b2640946d2d8ea73686ce,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_5_msg_err() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_5_msg_err,
        const_str_plain_msg_err,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_9730951a27bd19498aa102cb6a04e842,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_6_queryAuth() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_6_queryAuth,
        const_str_plain_queryAuth,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_4819b15a430890c766193c4b26ec24f6,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_7_startSpin() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_7_startSpin,
        const_str_plain_startSpin,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_b6583bd5be2af69d1a53505c2c406838,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_8_stopSpin() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_8_stopSpin,
        const_str_plain_stopSpin,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_9d55278475ac7b5d71da18446ca17aab,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_dialogs$$$function_9_saveToText() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_dialogs$$$function_9_saveToText,
        const_str_plain_saveToText,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_33ab5e5c230c928ee325ae602a5d8313,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_dialogs,
        NULL,
        0
    );

    return (PyObject *)result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_dialogs =
{
    PyModuleDef_HEAD_INIT,
    NULL,                /* m_name, filled later */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

extern PyObject *const_str_plain___compiled__;

extern PyObject *const_str_plain___package__;
extern PyObject *const_str_empty;

#if PYTHON_VERSION >= 300
extern PyObject *const_str_dot;
extern PyObject *const_str_plain___loader__;
#endif

#if PYTHON_VERSION >= 340
extern PyObject *const_str_plain___spec__;
extern PyObject *const_str_plain__initializing;
extern PyObject *const_str_plain_submodule_search_locations;
#endif

extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();
#if PYTHON_VERSION >= 350
extern void _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
extern void _initCompiledAsyncgenTypes();
#endif

extern PyTypeObject Nuitka_Loader_Type;

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
// Provide a way to create find a function via its C code and create it back
// in another process, useful for multiprocessing extensions like dill

function_impl_code functable_dialogs[] = {
    impl_dialogs$$$function_19___init__$$$function_1_t1_run,
    impl_dialogs$$$function_19___init__$$$function_2_cleanup,
    impl_dialogs$$$function_1___init__,
    impl_dialogs$$$function_2_onDestroy,
    impl_dialogs$$$function_3_check_toggled,
    impl_dialogs$$$function_4_showPass_toggled,
    impl_dialogs$$$function_5_msg_err,
    impl_dialogs$$$function_6_queryAuth,
    impl_dialogs$$$function_7_startSpin,
    impl_dialogs$$$function_8_stopSpin,
    impl_dialogs$$$function_9_saveToText,
    impl_dialogs$$$function_10_msg_err,
    impl_dialogs$$$function_11_msg_ok,
    impl_dialogs$$$function_12_query,
    impl_dialogs$$$function_13___init__,
    impl_dialogs$$$function_14_saveToCSV,
    impl_dialogs$$$function_15_filterLog,
    impl_dialogs$$$function_16_openLog,
    impl_dialogs$$$function_17___init__,
    impl_dialogs$$$function_18_openOpal,
    impl_dialogs$$$function_19___init__,
    impl_dialogs$$$function_20_refreshUSB,
    impl_dialogs$$$function_21_show_about,
    impl_dialogs$$$function_22___init__,
    impl_dialogs$$$function_23_mngPower_prompt,
    NULL
};

static char const *_reduce_compiled_function_argnames[] = {
    "func",
    NULL
};

static PyObject *_reduce_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    PyObject *func;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:reduce_compiled_function", (char **)_reduce_compiled_function_argnames, &func, NULL)) {
        return NULL;
    }

    if (Nuitka_Function_Check(func) == false) {
        PyErr_Format(PyExc_TypeError, "not a compiled function");
        return NULL;
    }

    struct Nuitka_FunctionObject *function = (struct Nuitka_FunctionObject *)func;

    function_impl_code *current = functable_dialogs;
    int offset = 0;

    while (*current != NULL) {
        if (*current == function->m_c_code) {
            break;
        }

        current += 1;
        offset += 1;
    }

    if (*current == NULL) {
        PyErr_Format(PyExc_TypeError, "Cannot find compiled function in module.");
        return NULL;
    }

    PyObject *code_object_desc = PyTuple_New(6);
    PyTuple_SET_ITEM0(code_object_desc, 0, function->m_code_object->co_filename);
    PyTuple_SET_ITEM0(code_object_desc, 1, function->m_code_object->co_name);
    PyTuple_SET_ITEM(code_object_desc, 2, PyLong_FromLong(function->m_code_object->co_firstlineno));
    PyTuple_SET_ITEM0(code_object_desc, 3, function->m_code_object->co_varnames);
    PyTuple_SET_ITEM(code_object_desc, 4, PyLong_FromLong(function->m_code_object->co_argcount));
    PyTuple_SET_ITEM(code_object_desc, 5, PyLong_FromLong(function->m_code_object->co_flags));

    CHECK_OBJECT_DEEP(code_object_desc);

    PyObject *result = PyTuple_New(4);
    PyTuple_SET_ITEM(result, 0, PyLong_FromLong(offset));
    PyTuple_SET_ITEM(result, 1, code_object_desc);
    PyTuple_SET_ITEM0(result, 2, function->m_defaults);
    PyTuple_SET_ITEM0(result, 3, function->m_doc != NULL ? function->m_doc : Py_None);

    CHECK_OBJECT_DEEP(result);

    return result;
}

static PyMethodDef _method_def_reduce_compiled_function = {"reduce_compiled_function", (PyCFunction)_reduce_compiled_function,
                                                           METH_VARARGS | METH_KEYWORDS, NULL};

static char const *_create_compiled_function_argnames[] = {
    "func",
    "code_object_desc",
    "defaults",
    "doc",
    NULL
};


static PyObject *_create_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    CHECK_OBJECT_DEEP(args);

    PyObject *func;
    PyObject *code_object_desc;
    PyObject *defaults;
    PyObject *doc;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:create_compiled_function", (char **)_create_compiled_function_argnames, &func, &code_object_desc, &defaults, &doc, NULL)) {
        return NULL;
    }

    int offset = PyLong_AsLong(func);

    if (offset == -1 && ERROR_OCCURRED()) {
        return NULL;
    }

    if (offset > sizeof(functable_dialogs) || offset < 0) {
        PyErr_Format(PyExc_TypeError, "Wrong offset for compiled function.");
        return NULL;
    }

    PyObject *filename = PyTuple_GET_ITEM(code_object_desc, 0);
    PyObject *function_name = PyTuple_GET_ITEM(code_object_desc, 1);
    PyObject *line = PyTuple_GET_ITEM(code_object_desc, 2);
    int line_int = PyLong_AsLong(line);
    assert(!ERROR_OCCURRED());

    PyObject *argnames = PyTuple_GET_ITEM(code_object_desc, 3);
    PyObject *arg_count = PyTuple_GET_ITEM(code_object_desc, 4);
    int arg_count_int = PyLong_AsLong(arg_count);
    assert(!ERROR_OCCURRED());
    PyObject *flags = PyTuple_GET_ITEM(code_object_desc, 5);
    int flags_int = PyLong_AsLong(flags);
    assert(!ERROR_OCCURRED());

    PyCodeObject *code_object = MAKE_CODEOBJECT(
        filename,
        line_int,
        flags_int,
        function_name,
        argnames,
        arg_count_int,
        0, // TODO: Missing kw_only_count
        0 // TODO: Missing pos_only_count
    );

    // TODO: More stuff needed for Python3, best to re-order arguments of MAKE_CODEOBJECT.
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        functable_dialogs[offset],
        code_object->co_name,
#if PYTHON_VERSION >= 300
        NULL, // TODO: Not transferring qualname yet
#endif
        code_object,
        defaults,
#if PYTHON_VERSION >= 300
        NULL, // kwdefaults are done on the outside currently
        NULL, // TODO: Not transferring annotations
#endif
        module_dialogs,
        doc,
        0
    );

    return (PyObject *)result;
}

static PyMethodDef _method_def_create_compiled_function = {
    "create_compiled_function",
    (PyCFunction)_create_compiled_function,
    METH_VARARGS | METH_KEYWORDS, NULL
};


#endif

// Internal entry point for module code.
PyObject *modulecode_dialogs(char const *module_full_name) {
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if (_init_done) {
        return module_dialogs;
    } else {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // May have to activate constants blob.
#if defined(_NUITKA_CONSTANTS_FROM_RESOURCE)
    loadConstantsResource();
#endif

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    /* Initialize the compiled types of Nuitka. */
    _initCompiledCellType();
    _initCompiledGeneratorType();
    _initCompiledFunctionType();
    _initCompiledMethodType();
    _initCompiledFrameType();
#if PYTHON_VERSION >= 350
    _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
    _initCompiledAsyncgenTypes();
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
    PRINT_STRING("dialogs: Calling setupMetaPathBasedLoader().\n");
#endif
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
    PRINT_STRING("dialogs: Calling createModuleConstants().\n");
#endif
    createModuleConstants();

    /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
    PRINT_STRING("dialogs: Calling createModuleCodeObjects().\n");
#endif
    createModuleCodeObjects();

    // PRINT_STRING("in initdialogs\n");

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_dialogs = Py_InitModule4(
        module_full_name,        // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No "__doc__" is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    mdef_dialogs.m_name = module_full_name;
    module_dialogs = PyModule_Create(&mdef_dialogs);
#endif

    moduledict_dialogs = MODULE_DICT(module_dialogs);

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
    {
        PyObject *function_tables = PyObject_GetAttrString((PyObject *)builtin_module, "compiled_function_tables");
        if (function_tables == NULL)
        {
            DROP_ERROR_OCCURRED();
            function_tables = PyDict_New();
        }
        PyObject_SetAttrString((PyObject *)builtin_module, "compiled_function_tables", function_tables);
        PyObject *funcs = PyTuple_New(2);
        PyTuple_SetItem(funcs, 0, PyCFunction_New(&_method_def_reduce_compiled_function, NULL));
        PyTuple_SetItem(funcs, 1, PyCFunction_New(&_method_def_create_compiled_function, NULL));
        PyDict_SetItemString(function_tables, module_full_name, funcs);
    }
#endif

    // Set "__compiled__" to what version information we have.
    UPDATE_STRING_DICT0(
        moduledict_dialogs,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        UPDATE_STRING_DICT0(
            moduledict_dialogs,
            (Nuitka_StringObject *)const_str_plain___package__,
            const_str_empty
        );
#elif 0
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain___name__);

        UPDATE_STRING_DICT0(
            moduledict_dialogs,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 300
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain___name__);
        char const *module_name_cstr = PyString_AS_STRING(module_name);

        char const *last_dot = strrchr(module_name_cstr, '.');

        if (last_dot != NULL)
        {
            UPDATE_STRING_DICT1(
                moduledict_dialogs,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize(module_name_cstr, last_dot - module_name_cstr)
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain___name__);
        Py_ssize_t dot_index = PyUnicode_Find(module_name, const_str_dot, 0, PyUnicode_GetLength(module_name), -1);

        if (dot_index != -1)
        {
            UPDATE_STRING_DICT1(
                moduledict_dialogs,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring(module_name, 0, dot_index)
            );
        }
#endif
#endif
    }

    CHECK_OBJECT(module_dialogs);

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyDict_SetItemString(PyImport_GetModuleDict(), module_full_name, module_dialogs);
        assert(r != -1);
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if (GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain___builtins__) == NULL)
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict(value);
#endif

        UPDATE_STRING_DICT0(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain___builtins__, value);
    }

#if PYTHON_VERSION >= 300
    UPDATE_STRING_DICT0(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type);
#endif

#if PYTHON_VERSION >= 340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain___spec__, Py_None);
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = PyImport_ImportModule("importlib._bootstrap");
        CHECK_OBJECT(bootstrap_module);
        PyObject *module_spec_class = PyObject_GetAttrString(bootstrap_module, "ModuleSpec");
        Py_DECREF(bootstrap_module);

        PyObject *args[] = {
            GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain___name__),
            (PyObject *)&Nuitka_Loader_Type
        };

        PyObject *spec_value = CALL_FUNCTION_WITH_ARGS2(
            module_spec_class,
            args
        );
        Py_DECREF(module_spec_class);

        // We can assume this to never fail, or else we are in trouble anyway.
        CHECK_OBJECT(spec_value);

// For packages set the submodule search locations as well, even if to empty
// list, so investigating code will consider it a package.
#if 0
        SET_ATTRIBUTE(spec_value, const_str_plain_submodule_search_locations, PyList_New(0));
#endif

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE(spec_value, const_str_plain__initializing, Py_True);

        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain___spec__, spec_value);
    }
#endif
#endif

    // Temp variables if any
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class = NULL;
    PyObject *tmp_class_creation_1__class_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__class = NULL;
    PyObject *tmp_class_creation_2__class_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__class = NULL;
    PyObject *tmp_class_creation_3__class_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__class = NULL;
    PyObject *tmp_class_creation_4__class_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__class = NULL;
    PyObject *tmp_class_creation_5__class_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_select_metaclass_1__base = NULL;
    PyObject *tmp_select_metaclass_2__base = NULL;
    PyObject *tmp_select_metaclass_3__base = NULL;
    PyObject *tmp_select_metaclass_4__base = NULL;
    PyObject *tmp_select_metaclass_5__base = NULL;
    struct Nuitka_FrameObject *frame_8214e8d253398d83e0d02a06610c476b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *locals_dialogs_19 = NULL;
    PyObject *tmp_dictset_value;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *locals_dialogs_491 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *locals_dialogs_699 = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *locals_dialogs_740 = NULL;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *locals_dialogs_959 = NULL;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        UPDATE_STRING_DICT0(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1);
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2);
    }
    // Frame without reuse.
    frame_8214e8d253398d83e0d02a06610c476b = MAKE_MODULE_FRAME(codeobj_8214e8d253398d83e0d02a06610c476b, module_dialogs);

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack(frame_8214e8d253398d83e0d02a06610c476b);
    assert(Py_REFCNT(frame_8214e8d253398d83e0d02a06610c476b) == 2);

    // Framed code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        tmp_name_name_1 = const_str_plain_gtk;
        tmp_globals_name_1 = (PyObject *)moduledict_dialogs;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 1;
        tmp_assign_source_3 = IMPORT_MODULE4(tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk, tmp_assign_source_3);
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_name_name_2;
        PyObject *tmp_globals_name_2;
        PyObject *tmp_locals_name_2;
        PyObject *tmp_fromlist_name_2;
        tmp_name_name_2 = const_str_plain_os;
        tmp_globals_name_2 = (PyObject *)moduledict_dialogs;
        tmp_locals_name_2 = Py_None;
        tmp_fromlist_name_2 = Py_None;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 2;
        tmp_assign_source_4 = IMPORT_MODULE4(tmp_name_name_2, tmp_globals_name_2, tmp_locals_name_2, tmp_fromlist_name_2);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_os, tmp_assign_source_4);
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_name_name_3;
        PyObject *tmp_globals_name_3;
        PyObject *tmp_locals_name_3;
        PyObject *tmp_fromlist_name_3;
        tmp_name_name_3 = const_str_plain_re;
        tmp_globals_name_3 = (PyObject *)moduledict_dialogs;
        tmp_locals_name_3 = Py_None;
        tmp_fromlist_name_3 = Py_None;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 3;
        tmp_assign_source_5 = IMPORT_MODULE4(tmp_name_name_3, tmp_globals_name_3, tmp_locals_name_3, tmp_fromlist_name_3);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_re, tmp_assign_source_5);
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_name_name_4;
        PyObject *tmp_globals_name_4;
        PyObject *tmp_locals_name_4;
        PyObject *tmp_fromlist_name_4;
        tmp_name_name_4 = const_str_plain_gobject;
        tmp_globals_name_4 = (PyObject *)moduledict_dialogs;
        tmp_locals_name_4 = Py_None;
        tmp_fromlist_name_4 = Py_None;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 4;
        tmp_assign_source_6 = IMPORT_MODULE4(tmp_name_name_4, tmp_globals_name_4, tmp_locals_name_4, tmp_fromlist_name_4);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 4;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gobject, tmp_assign_source_6);
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_name_name_5;
        PyObject *tmp_globals_name_5;
        PyObject *tmp_locals_name_5;
        PyObject *tmp_fromlist_name_5;
        tmp_name_name_5 = const_str_plain_datetime;
        tmp_globals_name_5 = (PyObject *)moduledict_dialogs;
        tmp_locals_name_5 = Py_None;
        tmp_fromlist_name_5 = Py_None;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 5;
        tmp_assign_source_7 = IMPORT_MODULE4(tmp_name_name_5, tmp_globals_name_5, tmp_locals_name_5, tmp_fromlist_name_5);
        assert(!(tmp_assign_source_7 == NULL));
        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_datetime, tmp_assign_source_7);
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_name_name_6;
        PyObject *tmp_globals_name_6;
        PyObject *tmp_locals_name_6;
        PyObject *tmp_fromlist_name_6;
        tmp_name_name_6 = const_str_plain_powerset;
        tmp_globals_name_6 = (PyObject *)moduledict_dialogs;
        tmp_locals_name_6 = Py_None;
        tmp_fromlist_name_6 = Py_None;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 6;
        tmp_assign_source_8 = IMPORT_MODULE4(tmp_name_name_6, tmp_globals_name_6, tmp_locals_name_6, tmp_fromlist_name_6);
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_powerset, tmp_assign_source_8);
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_name_name_7;
        PyObject *tmp_globals_name_7;
        PyObject *tmp_locals_name_7;
        PyObject *tmp_fromlist_name_7;
        tmp_name_name_7 = const_str_plain_platform;
        tmp_globals_name_7 = (PyObject *)moduledict_dialogs;
        tmp_locals_name_7 = Py_None;
        tmp_fromlist_name_7 = Py_None;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 7;
        tmp_assign_source_9 = IMPORT_MODULE4(tmp_name_name_7, tmp_globals_name_7, tmp_locals_name_7, tmp_fromlist_name_7);
        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 7;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_platform, tmp_assign_source_9);
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_name_name_8;
        PyObject *tmp_globals_name_8;
        PyObject *tmp_locals_name_8;
        PyObject *tmp_fromlist_name_8;
        tmp_name_name_8 = const_str_plain_lockhash;
        tmp_globals_name_8 = (PyObject *)moduledict_dialogs;
        tmp_locals_name_8 = Py_None;
        tmp_fromlist_name_8 = Py_None;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 8;
        tmp_assign_source_10 = IMPORT_MODULE4(tmp_name_name_8, tmp_globals_name_8, tmp_locals_name_8, tmp_fromlist_name_8);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 8;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_lockhash, tmp_assign_source_10);
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_name_name_9;
        PyObject *tmp_globals_name_9;
        PyObject *tmp_locals_name_9;
        PyObject *tmp_fromlist_name_9;
        tmp_name_name_9 = const_str_plain_runop;
        tmp_globals_name_9 = (PyObject *)moduledict_dialogs;
        tmp_locals_name_9 = Py_None;
        tmp_fromlist_name_9 = Py_None;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 9;
        tmp_assign_source_11 = IMPORT_MODULE4(tmp_name_name_9, tmp_globals_name_9, tmp_locals_name_9, tmp_fromlist_name_9);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 9;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_runop, tmp_assign_source_11);
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_name_name_10;
        PyObject *tmp_globals_name_10;
        PyObject *tmp_locals_name_10;
        PyObject *tmp_fromlist_name_10;
        tmp_name_name_10 = const_str_plain_runprocess;
        tmp_globals_name_10 = (PyObject *)moduledict_dialogs;
        tmp_locals_name_10 = Py_None;
        tmp_fromlist_name_10 = Py_None;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 10;
        tmp_assign_source_12 = IMPORT_MODULE4(tmp_name_name_10, tmp_globals_name_10, tmp_locals_name_10, tmp_fromlist_name_10);
        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 10;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_runprocess, tmp_assign_source_12);
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_name_name_11;
        PyObject *tmp_globals_name_11;
        PyObject *tmp_locals_name_11;
        PyObject *tmp_fromlist_name_11;
        tmp_name_name_11 = const_str_plain_runscan;
        tmp_globals_name_11 = (PyObject *)moduledict_dialogs;
        tmp_locals_name_11 = Py_None;
        tmp_fromlist_name_11 = Py_None;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 11;
        tmp_assign_source_13 = IMPORT_MODULE4(tmp_name_name_11, tmp_globals_name_11, tmp_locals_name_11, tmp_fromlist_name_11);
        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 11;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_runscan, tmp_assign_source_13);
    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_name_name_12;
        PyObject *tmp_globals_name_12;
        PyObject *tmp_locals_name_12;
        PyObject *tmp_fromlist_name_12;
        tmp_name_name_12 = const_str_plain_runthread;
        tmp_globals_name_12 = (PyObject *)moduledict_dialogs;
        tmp_locals_name_12 = Py_None;
        tmp_fromlist_name_12 = Py_None;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 12;
        tmp_assign_source_14 = IMPORT_MODULE4(tmp_name_name_12, tmp_globals_name_12, tmp_locals_name_12, tmp_fromlist_name_12);
        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 12;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_runthread, tmp_assign_source_14);
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_platform);

        if (unlikely(tmp_mvar_value_1 == NULL)) {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_platform);
        }

        CHECK_OBJECT(tmp_mvar_value_1);
        tmp_called_instance_1 = tmp_mvar_value_1;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 13;
        tmp_compexpr_left_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, const_str_plain_system);
        if (tmp_compexpr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 13;

            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_str_plain_Windows;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT_NORECURSE(tmp_compexpr_left_1, tmp_compexpr_right_1);
        Py_DECREF(tmp_compexpr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 13;

            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_15;
            PyObject *tmp_name_name_13;
            PyObject *tmp_globals_name_13;
            PyObject *tmp_locals_name_13;
            PyObject *tmp_fromlist_name_13;
            tmp_name_name_13 = const_str_plain_subprocess;
            tmp_globals_name_13 = (PyObject *)moduledict_dialogs;
            tmp_locals_name_13 = Py_None;
            tmp_fromlist_name_13 = Py_None;
            frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 14;
            tmp_assign_source_15 = IMPORT_MODULE4(tmp_name_name_13, tmp_globals_name_13, tmp_locals_name_13, tmp_fromlist_name_13);
            if (tmp_assign_source_15 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 14;

                goto frame_exception_exit_1;
            }
            UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_subprocess, tmp_assign_source_15);
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_name_name_14;
        PyObject *tmp_globals_name_14;
        PyObject *tmp_locals_name_14;
        PyObject *tmp_fromlist_name_14;
        tmp_name_name_14 = const_str_plain_csv;
        tmp_globals_name_14 = (PyObject *)moduledict_dialogs;
        tmp_locals_name_14 = Py_None;
        tmp_fromlist_name_14 = Py_None;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 15;
        tmp_assign_source_16 = IMPORT_MODULE4(tmp_name_name_14, tmp_globals_name_14, tmp_locals_name_14, tmp_fromlist_name_14);
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 15;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_csv, tmp_assign_source_16);
    }
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_name_name_15;
        PyObject *tmp_globals_name_15;
        PyObject *tmp_locals_name_15;
        PyObject *tmp_fromlist_name_15;
        tmp_name_name_15 = const_str_plain_threading;
        tmp_globals_name_15 = (PyObject *)moduledict_dialogs;
        tmp_locals_name_15 = Py_None;
        tmp_fromlist_name_15 = Py_None;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 16;
        tmp_assign_source_17 = IMPORT_MODULE4(tmp_name_name_15, tmp_globals_name_15, tmp_locals_name_15, tmp_fromlist_name_15);
        if (tmp_assign_source_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 16;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_threading, tmp_assign_source_17);
    }
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_name_name_16;
        PyObject *tmp_globals_name_16;
        PyObject *tmp_locals_name_16;
        PyObject *tmp_fromlist_name_16;
        tmp_name_name_16 = const_str_plain_verify;
        tmp_globals_name_16 = (PyObject *)moduledict_dialogs;
        tmp_locals_name_16 = Py_None;
        tmp_fromlist_name_16 = Py_None;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 17;
        tmp_assign_source_18 = IMPORT_MODULE4(tmp_name_name_16, tmp_globals_name_16, tmp_locals_name_16, tmp_fromlist_name_16);
        if (tmp_assign_source_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 17;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_verify, tmp_assign_source_18);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_2 == NULL)) {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_2 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 323 ], 25, 0);
            exception_tb = NULL;

            exception_lineno = 19;

            goto try_except_handler_1;
        }

        tmp_source_name_1 = tmp_mvar_value_2;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_source_name_1, const_str_plain_Window);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_1;
        }
        tmp_assign_source_19 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_19, 0, tmp_tuple_element_1);
        assert(tmp_class_creation_1__bases == NULL);
        tmp_class_creation_1__bases = tmp_assign_source_19;
    }
    {
        PyObject *tmp_assign_source_20;
        {
            PyObject *tmp_set_locals_1;
            tmp_set_locals_1 = PyDict_New();
            locals_dialogs_19 = tmp_set_locals_1;
        }
        tmp_dictset_value = const_str_plain_dialogs;
        tmp_res = PyDict_SetItem(locals_dialogs_19, const_str_plain___module__, tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_FUNCTION_dialogs$$$function_1___init__();



        tmp_res = PyDict_SetItem(locals_dialogs_19, const_str_plain___init__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_FUNCTION_dialogs$$$function_2_onDestroy();



        tmp_res = PyDict_SetItem(locals_dialogs_19, const_str_plain_onDestroy, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_FUNCTION_dialogs$$$function_3_check_toggled();



        tmp_res = PyDict_SetItem(locals_dialogs_19, const_str_plain_check_toggled, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_FUNCTION_dialogs$$$function_4_showPass_toggled();



        tmp_res = PyDict_SetItem(locals_dialogs_19, const_str_plain_showPass_toggled, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_FUNCTION_dialogs$$$function_5_msg_err();



        tmp_res = PyDict_SetItem(locals_dialogs_19, const_str_plain_msg_err, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_FUNCTION_dialogs$$$function_6_queryAuth();



        tmp_res = PyDict_SetItem(locals_dialogs_19, const_str_plain_queryAuth, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_FUNCTION_dialogs$$$function_7_startSpin();



        tmp_res = PyDict_SetItem(locals_dialogs_19, const_str_plain_startSpin, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_FUNCTION_dialogs$$$function_8_stopSpin();



        tmp_res = PyDict_SetItem(locals_dialogs_19, const_str_plain_stopSpin, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_FUNCTION_dialogs$$$function_9_saveToText();



        tmp_res = PyDict_SetItem(locals_dialogs_19, const_str_plain_saveToText, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_FUNCTION_dialogs$$$function_10_msg_err();



        tmp_res = PyDict_SetItem(locals_dialogs_19, const_str_plain_msg_err, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_FUNCTION_dialogs$$$function_11_msg_ok();



        tmp_res = PyDict_SetItem(locals_dialogs_19, const_str_plain_msg_ok, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        tmp_assign_source_20 = locals_dialogs_19;
        Py_INCREF(tmp_assign_source_20);
        goto try_return_handler_2;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        Py_DECREF(locals_dialogs_19);
        locals_dialogs_19 = NULL;
        goto outline_result_1;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        outline_result_1:;
        assert(tmp_class_creation_1__class_dict == NULL);
        tmp_class_creation_1__class_dict = tmp_assign_source_20;
    }
    {
        PyObject *tmp_assign_source_21;
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_key_name_1;
        PyObject *tmp_dict_name_1;
        PyObject *tmp_dict_name_2;
        PyObject *tmp_key_name_2;
        tmp_key_name_1 = const_str_plain___metaclass__;
        CHECK_OBJECT(tmp_class_creation_1__class_dict);
        tmp_dict_name_1 = tmp_class_creation_1__class_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_1, tmp_key_name_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_1;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(tmp_class_creation_1__class_dict);
        tmp_dict_name_2 = tmp_class_creation_1__class_dict;
        tmp_key_name_2 = const_str_plain___metaclass__;
        tmp_assign_source_21 = DICT_GET_ITEM(tmp_dict_name_2, tmp_key_name_2);
        if (tmp_assign_source_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_1;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        {
            PyObject *tmp_assign_source_22;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_subscript_name_1;
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_subscribed_name_1 = tmp_class_creation_1__bases;
            tmp_subscript_name_1 = const_int_0;
            tmp_assign_source_22 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_1, tmp_subscript_name_1, 0);
            if (tmp_assign_source_22 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 19;

                goto try_except_handler_1;
            }
            assert(tmp_select_metaclass_1__base == NULL);
            tmp_select_metaclass_1__base = tmp_assign_source_22;
        }
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_source_name_2;
            CHECK_OBJECT(tmp_select_metaclass_1__base);
            tmp_source_name_2 = tmp_select_metaclass_1__base;
            tmp_assign_source_21 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_source_name_2);
            if (tmp_assign_source_21 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 19;

                goto try_except_handler_4;
            }
            goto try_return_handler_3;
        }
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        {
            PyObject *tmp_type_arg_1;
            Py_DECREF(exception_keeper_type_1);
            Py_XDECREF(exception_keeper_value_1);
            Py_XDECREF(exception_keeper_tb_1);
            CHECK_OBJECT(tmp_select_metaclass_1__base);
            tmp_type_arg_1 = tmp_select_metaclass_1__base;
            tmp_assign_source_21 = BUILTIN_TYPE1(tmp_type_arg_1);
            assert(!(tmp_assign_source_21 == NULL));
            goto try_return_handler_3;
        }
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT((PyObject *)tmp_select_metaclass_1__base);
        Py_DECREF(tmp_select_metaclass_1__base);
        tmp_select_metaclass_1__base = NULL;

        goto outline_result_2;
        // End of try:
        CHECK_OBJECT((PyObject *)tmp_select_metaclass_1__base);
        Py_DECREF(tmp_select_metaclass_1__base);
        tmp_select_metaclass_1__base = NULL;

        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        outline_result_2:;
        condexpr_end_1:;
        assert(tmp_class_creation_1__metaclass == NULL);
        tmp_class_creation_1__metaclass = tmp_assign_source_21;
    }
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_called_name_1 = tmp_class_creation_1__metaclass;
        tmp_args_element_name_1 = const_str_plain_QueryDialog;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_args_element_name_2 = tmp_class_creation_1__bases;
        CHECK_OBJECT(tmp_class_creation_1__class_dict);
        tmp_args_element_name_3 = tmp_class_creation_1__class_dict;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 19;
        {
            PyObject *call_args[] = {tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3};
            tmp_assign_source_23 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_1, call_args);
        }

        if (tmp_assign_source_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_1;
        }
        assert(tmp_class_creation_1__class == NULL);
        tmp_class_creation_1__class = tmp_assign_source_23;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;

    Py_XDECREF(tmp_class_creation_1__class_dict);
    tmp_class_creation_1__class_dict = NULL;

    Py_XDECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    {
        PyObject *tmp_assign_source_24;
        CHECK_OBJECT(tmp_class_creation_1__class);
        tmp_assign_source_24 = tmp_class_creation_1__class;
        UPDATE_STRING_DICT0(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_QueryDialog, tmp_assign_source_24);
    }
    CHECK_OBJECT((PyObject *)tmp_class_creation_1__class);
    Py_DECREF(tmp_class_creation_1__class);
    tmp_class_creation_1__class = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_1__bases);
    Py_DECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_1__class_dict);
    Py_DECREF(tmp_class_creation_1__class_dict);
    tmp_class_creation_1__class_dict = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_1__metaclass);
    Py_DECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;

    {
        PyObject *tmp_assign_source_25;
        tmp_assign_source_25 = MAKE_FUNCTION_dialogs$$$function_12_query();



        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_query, tmp_assign_source_25);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_3;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_3 == NULL)) {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_3 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 323 ], 25, 0);
            exception_tb = NULL;

            exception_lineno = 491;

            goto try_except_handler_5;
        }

        tmp_source_name_3 = tmp_mvar_value_3;
        tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_source_name_3, const_str_plain_Dialog);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 491;

            goto try_except_handler_5;
        }
        tmp_assign_source_26 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_26, 0, tmp_tuple_element_2);
        assert(tmp_class_creation_2__bases == NULL);
        tmp_class_creation_2__bases = tmp_assign_source_26;
    }
    {
        PyObject *tmp_assign_source_27;
        {
            PyObject *tmp_set_locals_2;
            tmp_set_locals_2 = PyDict_New();
            locals_dialogs_491 = tmp_set_locals_2;
        }
        tmp_dictset_value = const_str_plain_dialogs;
        tmp_res = PyDict_SetItem(locals_dialogs_491, const_str_plain___module__, tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = PyDict_Copy(const_dict_aa4d6254c0a7b10c27efa9d5c6810b3b);
        tmp_res = PyDict_SetItem(locals_dialogs_491, const_str_plain_eventDescriptions, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_FUNCTION_dialogs$$$function_13___init__();



        tmp_res = PyDict_SetItem(locals_dialogs_491, const_str_plain___init__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_FUNCTION_dialogs$$$function_14_saveToCSV();



        tmp_res = PyDict_SetItem(locals_dialogs_491, const_str_plain_saveToCSV, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_FUNCTION_dialogs$$$function_15_filterLog();



        tmp_res = PyDict_SetItem(locals_dialogs_491, const_str_plain_filterLog, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        tmp_assign_source_27 = locals_dialogs_491;
        Py_INCREF(tmp_assign_source_27);
        goto try_return_handler_6;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        // Return handler code:
        try_return_handler_6:;
        Py_DECREF(locals_dialogs_491);
        locals_dialogs_491 = NULL;
        goto outline_result_3;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        outline_result_3:;
        assert(tmp_class_creation_2__class_dict == NULL);
        tmp_class_creation_2__class_dict = tmp_assign_source_27;
    }
    {
        PyObject *tmp_assign_source_28;
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_key_name_3;
        PyObject *tmp_dict_name_3;
        PyObject *tmp_dict_name_4;
        PyObject *tmp_key_name_4;
        tmp_key_name_3 = const_str_plain___metaclass__;
        CHECK_OBJECT(tmp_class_creation_2__class_dict);
        tmp_dict_name_3 = tmp_class_creation_2__class_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_3, tmp_key_name_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 491;

            goto try_except_handler_5;
        }
        tmp_condition_result_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_2;
        } else {
            goto condexpr_false_2;
        }
        condexpr_true_2:;
        CHECK_OBJECT(tmp_class_creation_2__class_dict);
        tmp_dict_name_4 = tmp_class_creation_2__class_dict;
        tmp_key_name_4 = const_str_plain___metaclass__;
        tmp_assign_source_28 = DICT_GET_ITEM(tmp_dict_name_4, tmp_key_name_4);
        if (tmp_assign_source_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 491;

            goto try_except_handler_5;
        }
        goto condexpr_end_2;
        condexpr_false_2:;
        {
            PyObject *tmp_assign_source_29;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_subscript_name_2;
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_subscribed_name_2 = tmp_class_creation_2__bases;
            tmp_subscript_name_2 = const_int_0;
            tmp_assign_source_29 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_2, tmp_subscript_name_2, 0);
            if (tmp_assign_source_29 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 491;

                goto try_except_handler_5;
            }
            assert(tmp_select_metaclass_2__base == NULL);
            tmp_select_metaclass_2__base = tmp_assign_source_29;
        }
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_source_name_4;
            CHECK_OBJECT(tmp_select_metaclass_2__base);
            tmp_source_name_4 = tmp_select_metaclass_2__base;
            tmp_assign_source_28 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_source_name_4);
            if (tmp_assign_source_28 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 491;

                goto try_except_handler_8;
            }
            goto try_return_handler_7;
        }
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        // Exception handler code:
        try_except_handler_8:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        {
            PyObject *tmp_type_arg_2;
            Py_DECREF(exception_keeper_type_3);
            Py_XDECREF(exception_keeper_value_3);
            Py_XDECREF(exception_keeper_tb_3);
            CHECK_OBJECT(tmp_select_metaclass_2__base);
            tmp_type_arg_2 = tmp_select_metaclass_2__base;
            tmp_assign_source_28 = BUILTIN_TYPE1(tmp_type_arg_2);
            assert(!(tmp_assign_source_28 == NULL));
            goto try_return_handler_7;
        }
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        // Return handler code:
        try_return_handler_7:;
        CHECK_OBJECT((PyObject *)tmp_select_metaclass_2__base);
        Py_DECREF(tmp_select_metaclass_2__base);
        tmp_select_metaclass_2__base = NULL;

        goto outline_result_4;
        // End of try:
        CHECK_OBJECT((PyObject *)tmp_select_metaclass_2__base);
        Py_DECREF(tmp_select_metaclass_2__base);
        tmp_select_metaclass_2__base = NULL;

        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        outline_result_4:;
        condexpr_end_2:;
        assert(tmp_class_creation_2__metaclass == NULL);
        tmp_class_creation_2__metaclass = tmp_assign_source_28;
    }
    {
        PyObject *tmp_assign_source_30;
        PyObject *tmp_called_name_2;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_called_name_2 = tmp_class_creation_2__metaclass;
        tmp_args_element_name_4 = const_str_plain_AuditDialog;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_args_element_name_5 = tmp_class_creation_2__bases;
        CHECK_OBJECT(tmp_class_creation_2__class_dict);
        tmp_args_element_name_6 = tmp_class_creation_2__class_dict;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 491;
        {
            PyObject *call_args[] = {tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6};
            tmp_assign_source_30 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_2, call_args);
        }

        if (tmp_assign_source_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 491;

            goto try_except_handler_5;
        }
        assert(tmp_class_creation_2__class == NULL);
        tmp_class_creation_2__class = tmp_assign_source_30;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;

    Py_XDECREF(tmp_class_creation_2__class_dict);
    tmp_class_creation_2__class_dict = NULL;

    Py_XDECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    {
        PyObject *tmp_assign_source_31;
        CHECK_OBJECT(tmp_class_creation_2__class);
        tmp_assign_source_31 = tmp_class_creation_2__class;
        UPDATE_STRING_DICT0(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_AuditDialog, tmp_assign_source_31);
    }
    CHECK_OBJECT((PyObject *)tmp_class_creation_2__class);
    Py_DECREF(tmp_class_creation_2__class);
    tmp_class_creation_2__class = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_2__bases);
    Py_DECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_2__class_dict);
    Py_DECREF(tmp_class_creation_2__class_dict);
    tmp_class_creation_2__class_dict = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_2__metaclass);
    Py_DECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;

    {
        PyObject *tmp_assign_source_32;
        tmp_assign_source_32 = MAKE_FUNCTION_dialogs$$$function_16_openLog();



        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_openLog, tmp_assign_source_32);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_33;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_source_name_5;
        PyObject *tmp_mvar_value_4;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_4 == NULL)) {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_4 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 323 ], 25, 0);
            exception_tb = NULL;

            exception_lineno = 699;

            goto try_except_handler_9;
        }

        tmp_source_name_5 = tmp_mvar_value_4;
        tmp_tuple_element_3 = LOOKUP_ATTRIBUTE(tmp_source_name_5, const_str_plain_Dialog);
        if (tmp_tuple_element_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 699;

            goto try_except_handler_9;
        }
        tmp_assign_source_33 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_33, 0, tmp_tuple_element_3);
        assert(tmp_class_creation_3__bases == NULL);
        tmp_class_creation_3__bases = tmp_assign_source_33;
    }
    {
        PyObject *tmp_assign_source_34;
        {
            PyObject *tmp_set_locals_3;
            tmp_set_locals_3 = PyDict_New();
            locals_dialogs_699 = tmp_set_locals_3;
        }
        tmp_dictset_value = const_str_plain_dialogs;
        tmp_res = PyDict_SetItem(locals_dialogs_699, const_str_plain___module__, tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_FUNCTION_dialogs$$$function_17___init__();



        tmp_res = PyDict_SetItem(locals_dialogs_699, const_str_plain___init__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        tmp_assign_source_34 = locals_dialogs_699;
        Py_INCREF(tmp_assign_source_34);
        goto try_return_handler_10;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        // Return handler code:
        try_return_handler_10:;
        Py_DECREF(locals_dialogs_699);
        locals_dialogs_699 = NULL;
        goto outline_result_5;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        outline_result_5:;
        assert(tmp_class_creation_3__class_dict == NULL);
        tmp_class_creation_3__class_dict = tmp_assign_source_34;
    }
    {
        PyObject *tmp_assign_source_35;
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_key_name_5;
        PyObject *tmp_dict_name_5;
        PyObject *tmp_dict_name_6;
        PyObject *tmp_key_name_6;
        tmp_key_name_5 = const_str_plain___metaclass__;
        CHECK_OBJECT(tmp_class_creation_3__class_dict);
        tmp_dict_name_5 = tmp_class_creation_3__class_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_5, tmp_key_name_5);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 699;

            goto try_except_handler_9;
        }
        tmp_condition_result_4 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_3;
        } else {
            goto condexpr_false_3;
        }
        condexpr_true_3:;
        CHECK_OBJECT(tmp_class_creation_3__class_dict);
        tmp_dict_name_6 = tmp_class_creation_3__class_dict;
        tmp_key_name_6 = const_str_plain___metaclass__;
        tmp_assign_source_35 = DICT_GET_ITEM(tmp_dict_name_6, tmp_key_name_6);
        if (tmp_assign_source_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 699;

            goto try_except_handler_9;
        }
        goto condexpr_end_3;
        condexpr_false_3:;
        {
            PyObject *tmp_assign_source_36;
            PyObject *tmp_subscribed_name_3;
            PyObject *tmp_subscript_name_3;
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_subscribed_name_3 = tmp_class_creation_3__bases;
            tmp_subscript_name_3 = const_int_0;
            tmp_assign_source_36 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_3, tmp_subscript_name_3, 0);
            if (tmp_assign_source_36 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 699;

                goto try_except_handler_9;
            }
            assert(tmp_select_metaclass_3__base == NULL);
            tmp_select_metaclass_3__base = tmp_assign_source_36;
        }
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_source_name_6;
            CHECK_OBJECT(tmp_select_metaclass_3__base);
            tmp_source_name_6 = tmp_select_metaclass_3__base;
            tmp_assign_source_35 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_source_name_6);
            if (tmp_assign_source_35 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 699;

                goto try_except_handler_12;
            }
            goto try_return_handler_11;
        }
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        // Exception handler code:
        try_except_handler_12:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        {
            PyObject *tmp_type_arg_3;
            Py_DECREF(exception_keeper_type_5);
            Py_XDECREF(exception_keeper_value_5);
            Py_XDECREF(exception_keeper_tb_5);
            CHECK_OBJECT(tmp_select_metaclass_3__base);
            tmp_type_arg_3 = tmp_select_metaclass_3__base;
            tmp_assign_source_35 = BUILTIN_TYPE1(tmp_type_arg_3);
            assert(!(tmp_assign_source_35 == NULL));
            goto try_return_handler_11;
        }
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        // Return handler code:
        try_return_handler_11:;
        CHECK_OBJECT((PyObject *)tmp_select_metaclass_3__base);
        Py_DECREF(tmp_select_metaclass_3__base);
        tmp_select_metaclass_3__base = NULL;

        goto outline_result_6;
        // End of try:
        CHECK_OBJECT((PyObject *)tmp_select_metaclass_3__base);
        Py_DECREF(tmp_select_metaclass_3__base);
        tmp_select_metaclass_3__base = NULL;

        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        outline_result_6:;
        condexpr_end_3:;
        assert(tmp_class_creation_3__metaclass == NULL);
        tmp_class_creation_3__metaclass = tmp_assign_source_35;
    }
    {
        PyObject *tmp_assign_source_37;
        PyObject *tmp_called_name_3;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_args_element_name_8;
        PyObject *tmp_args_element_name_9;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_called_name_3 = tmp_class_creation_3__metaclass;
        tmp_args_element_name_7 = const_str_plain_OpalDialog;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_args_element_name_8 = tmp_class_creation_3__bases;
        CHECK_OBJECT(tmp_class_creation_3__class_dict);
        tmp_args_element_name_9 = tmp_class_creation_3__class_dict;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 699;
        {
            PyObject *call_args[] = {tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9};
            tmp_assign_source_37 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_3, call_args);
        }

        if (tmp_assign_source_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 699;

            goto try_except_handler_9;
        }
        assert(tmp_class_creation_3__class == NULL);
        tmp_class_creation_3__class = tmp_assign_source_37;
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;

    Py_XDECREF(tmp_class_creation_3__class_dict);
    tmp_class_creation_3__class_dict = NULL;

    Py_XDECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    {
        PyObject *tmp_assign_source_38;
        CHECK_OBJECT(tmp_class_creation_3__class);
        tmp_assign_source_38 = tmp_class_creation_3__class;
        UPDATE_STRING_DICT0(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_OpalDialog, tmp_assign_source_38);
    }
    CHECK_OBJECT((PyObject *)tmp_class_creation_3__class);
    Py_DECREF(tmp_class_creation_3__class);
    tmp_class_creation_3__class = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_3__bases);
    Py_DECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_3__class_dict);
    Py_DECREF(tmp_class_creation_3__class_dict);
    tmp_class_creation_3__class_dict = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_3__metaclass);
    Py_DECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;

    {
        PyObject *tmp_assign_source_39;
        tmp_assign_source_39 = MAKE_FUNCTION_dialogs$$$function_18_openOpal();



        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_openOpal, tmp_assign_source_39);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_40;
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_source_name_7;
        PyObject *tmp_mvar_value_5;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_5 == NULL)) {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_5 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 323 ], 25, 0);
            exception_tb = NULL;

            exception_lineno = 740;

            goto try_except_handler_13;
        }

        tmp_source_name_7 = tmp_mvar_value_5;
        tmp_tuple_element_4 = LOOKUP_ATTRIBUTE(tmp_source_name_7, const_str_plain_Dialog);
        if (tmp_tuple_element_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 740;

            goto try_except_handler_13;
        }
        tmp_assign_source_40 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_40, 0, tmp_tuple_element_4);
        assert(tmp_class_creation_4__bases == NULL);
        tmp_class_creation_4__bases = tmp_assign_source_40;
    }
    {
        PyObject *tmp_assign_source_41;
        {
            PyObject *tmp_set_locals_4;
            tmp_set_locals_4 = PyDict_New();
            locals_dialogs_740 = tmp_set_locals_4;
        }
        tmp_dictset_value = const_str_plain_dialogs;
        tmp_res = PyDict_SetItem(locals_dialogs_740, const_str_plain___module__, tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_FUNCTION_dialogs$$$function_19___init__();



        tmp_res = PyDict_SetItem(locals_dialogs_740, const_str_plain___init__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_FUNCTION_dialogs$$$function_20_refreshUSB();



        tmp_res = PyDict_SetItem(locals_dialogs_740, const_str_plain_refreshUSB, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        tmp_assign_source_41 = locals_dialogs_740;
        Py_INCREF(tmp_assign_source_41);
        goto try_return_handler_14;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        // Return handler code:
        try_return_handler_14:;
        Py_DECREF(locals_dialogs_740);
        locals_dialogs_740 = NULL;
        goto outline_result_7;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        outline_result_7:;
        assert(tmp_class_creation_4__class_dict == NULL);
        tmp_class_creation_4__class_dict = tmp_assign_source_41;
    }
    {
        PyObject *tmp_assign_source_42;
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_key_name_7;
        PyObject *tmp_dict_name_7;
        PyObject *tmp_dict_name_8;
        PyObject *tmp_key_name_8;
        tmp_key_name_7 = const_str_plain___metaclass__;
        CHECK_OBJECT(tmp_class_creation_4__class_dict);
        tmp_dict_name_7 = tmp_class_creation_4__class_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_7, tmp_key_name_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 740;

            goto try_except_handler_13;
        }
        tmp_condition_result_5 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_4;
        } else {
            goto condexpr_false_4;
        }
        condexpr_true_4:;
        CHECK_OBJECT(tmp_class_creation_4__class_dict);
        tmp_dict_name_8 = tmp_class_creation_4__class_dict;
        tmp_key_name_8 = const_str_plain___metaclass__;
        tmp_assign_source_42 = DICT_GET_ITEM(tmp_dict_name_8, tmp_key_name_8);
        if (tmp_assign_source_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 740;

            goto try_except_handler_13;
        }
        goto condexpr_end_4;
        condexpr_false_4:;
        {
            PyObject *tmp_assign_source_43;
            PyObject *tmp_subscribed_name_4;
            PyObject *tmp_subscript_name_4;
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_subscribed_name_4 = tmp_class_creation_4__bases;
            tmp_subscript_name_4 = const_int_0;
            tmp_assign_source_43 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_4, tmp_subscript_name_4, 0);
            if (tmp_assign_source_43 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 740;

                goto try_except_handler_13;
            }
            assert(tmp_select_metaclass_4__base == NULL);
            tmp_select_metaclass_4__base = tmp_assign_source_43;
        }
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_source_name_8;
            CHECK_OBJECT(tmp_select_metaclass_4__base);
            tmp_source_name_8 = tmp_select_metaclass_4__base;
            tmp_assign_source_42 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_source_name_8);
            if (tmp_assign_source_42 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 740;

                goto try_except_handler_16;
            }
            goto try_return_handler_15;
        }
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        // Exception handler code:
        try_except_handler_16:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        {
            PyObject *tmp_type_arg_4;
            Py_DECREF(exception_keeper_type_7);
            Py_XDECREF(exception_keeper_value_7);
            Py_XDECREF(exception_keeper_tb_7);
            CHECK_OBJECT(tmp_select_metaclass_4__base);
            tmp_type_arg_4 = tmp_select_metaclass_4__base;
            tmp_assign_source_42 = BUILTIN_TYPE1(tmp_type_arg_4);
            assert(!(tmp_assign_source_42 == NULL));
            goto try_return_handler_15;
        }
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        // Return handler code:
        try_return_handler_15:;
        CHECK_OBJECT((PyObject *)tmp_select_metaclass_4__base);
        Py_DECREF(tmp_select_metaclass_4__base);
        tmp_select_metaclass_4__base = NULL;

        goto outline_result_8;
        // End of try:
        CHECK_OBJECT((PyObject *)tmp_select_metaclass_4__base);
        Py_DECREF(tmp_select_metaclass_4__base);
        tmp_select_metaclass_4__base = NULL;

        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        outline_result_8:;
        condexpr_end_4:;
        assert(tmp_class_creation_4__metaclass == NULL);
        tmp_class_creation_4__metaclass = tmp_assign_source_42;
    }
    {
        PyObject *tmp_assign_source_44;
        PyObject *tmp_called_name_4;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_args_element_name_11;
        PyObject *tmp_args_element_name_12;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_called_name_4 = tmp_class_creation_4__metaclass;
        tmp_args_element_name_10 = const_str_plain_USBDialog;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_args_element_name_11 = tmp_class_creation_4__bases;
        CHECK_OBJECT(tmp_class_creation_4__class_dict);
        tmp_args_element_name_12 = tmp_class_creation_4__class_dict;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 740;
        {
            PyObject *call_args[] = {tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12};
            tmp_assign_source_44 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_4, call_args);
        }

        if (tmp_assign_source_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 740;

            goto try_except_handler_13;
        }
        assert(tmp_class_creation_4__class == NULL);
        tmp_class_creation_4__class = tmp_assign_source_44;
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_13:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;

    Py_XDECREF(tmp_class_creation_4__class_dict);
    tmp_class_creation_4__class_dict = NULL;

    Py_XDECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    {
        PyObject *tmp_assign_source_45;
        CHECK_OBJECT(tmp_class_creation_4__class);
        tmp_assign_source_45 = tmp_class_creation_4__class;
        UPDATE_STRING_DICT0(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_USBDialog, tmp_assign_source_45);
    }
    CHECK_OBJECT((PyObject *)tmp_class_creation_4__class);
    Py_DECREF(tmp_class_creation_4__class);
    tmp_class_creation_4__class = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_4__bases);
    Py_DECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_4__class_dict);
    Py_DECREF(tmp_class_creation_4__class_dict);
    tmp_class_creation_4__class_dict = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_4__metaclass);
    Py_DECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;

    {
        PyObject *tmp_assign_source_46;
        tmp_assign_source_46 = MAKE_FUNCTION_dialogs$$$function_21_show_about();



        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_show_about, tmp_assign_source_46);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_47;
        PyObject *tmp_tuple_element_5;
        PyObject *tmp_source_name_9;
        PyObject *tmp_mvar_value_6;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_gtk);

        if (unlikely(tmp_mvar_value_6 == NULL)) {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE(dict_builtin, (Nuitka_StringObject *)const_str_plain_gtk);
        }

        if (tmp_mvar_value_6 == NULL) {

            exception_type = PyExc_NameError;
            Py_INCREF(exception_type);
            exception_value = UNSTREAM_STRING(&constant_bin[ 323 ], 25, 0);
            exception_tb = NULL;

            exception_lineno = 959;

            goto try_except_handler_17;
        }

        tmp_source_name_9 = tmp_mvar_value_6;
        tmp_tuple_element_5 = LOOKUP_ATTRIBUTE(tmp_source_name_9, const_str_plain_Dialog);
        if (tmp_tuple_element_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 959;

            goto try_except_handler_17;
        }
        tmp_assign_source_47 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_47, 0, tmp_tuple_element_5);
        assert(tmp_class_creation_5__bases == NULL);
        tmp_class_creation_5__bases = tmp_assign_source_47;
    }
    {
        PyObject *tmp_assign_source_48;
        {
            PyObject *tmp_set_locals_5;
            tmp_set_locals_5 = PyDict_New();
            locals_dialogs_959 = tmp_set_locals_5;
        }
        tmp_dictset_value = const_str_plain_dialogs;
        tmp_res = PyDict_SetItem(locals_dialogs_959, const_str_plain___module__, tmp_dictset_value);
        assert(!(tmp_res != 0));
        tmp_dictset_value = MAKE_FUNCTION_dialogs$$$function_22___init__();



        tmp_res = PyDict_SetItem(locals_dialogs_959, const_str_plain___init__, tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
        // Tried code:
        tmp_assign_source_48 = locals_dialogs_959;
        Py_INCREF(tmp_assign_source_48);
        goto try_return_handler_18;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        // Return handler code:
        try_return_handler_18:;
        Py_DECREF(locals_dialogs_959);
        locals_dialogs_959 = NULL;
        goto outline_result_9;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        outline_result_9:;
        assert(tmp_class_creation_5__class_dict == NULL);
        tmp_class_creation_5__class_dict = tmp_assign_source_48;
    }
    {
        PyObject *tmp_assign_source_49;
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_key_name_9;
        PyObject *tmp_dict_name_9;
        PyObject *tmp_dict_name_10;
        PyObject *tmp_key_name_10;
        tmp_key_name_9 = const_str_plain___metaclass__;
        CHECK_OBJECT(tmp_class_creation_5__class_dict);
        tmp_dict_name_9 = tmp_class_creation_5__class_dict;
        tmp_res = PyDict_Contains(tmp_dict_name_9, tmp_key_name_9);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 959;

            goto try_except_handler_17;
        }
        tmp_condition_result_6 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_5;
        } else {
            goto condexpr_false_5;
        }
        condexpr_true_5:;
        CHECK_OBJECT(tmp_class_creation_5__class_dict);
        tmp_dict_name_10 = tmp_class_creation_5__class_dict;
        tmp_key_name_10 = const_str_plain___metaclass__;
        tmp_assign_source_49 = DICT_GET_ITEM(tmp_dict_name_10, tmp_key_name_10);
        if (tmp_assign_source_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 959;

            goto try_except_handler_17;
        }
        goto condexpr_end_5;
        condexpr_false_5:;
        {
            PyObject *tmp_assign_source_50;
            PyObject *tmp_subscribed_name_5;
            PyObject *tmp_subscript_name_5;
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_subscribed_name_5 = tmp_class_creation_5__bases;
            tmp_subscript_name_5 = const_int_0;
            tmp_assign_source_50 = LOOKUP_SUBSCRIPT_CONST(tmp_subscribed_name_5, tmp_subscript_name_5, 0);
            if (tmp_assign_source_50 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 959;

                goto try_except_handler_17;
            }
            assert(tmp_select_metaclass_5__base == NULL);
            tmp_select_metaclass_5__base = tmp_assign_source_50;
        }
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_source_name_10;
            CHECK_OBJECT(tmp_select_metaclass_5__base);
            tmp_source_name_10 = tmp_select_metaclass_5__base;
            tmp_assign_source_49 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_source_name_10);
            if (tmp_assign_source_49 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 959;

                goto try_except_handler_20;
            }
            goto try_return_handler_19;
        }
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        // Exception handler code:
        try_except_handler_20:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        {
            PyObject *tmp_type_arg_5;
            Py_DECREF(exception_keeper_type_9);
            Py_XDECREF(exception_keeper_value_9);
            Py_XDECREF(exception_keeper_tb_9);
            CHECK_OBJECT(tmp_select_metaclass_5__base);
            tmp_type_arg_5 = tmp_select_metaclass_5__base;
            tmp_assign_source_49 = BUILTIN_TYPE1(tmp_type_arg_5);
            assert(!(tmp_assign_source_49 == NULL));
            goto try_return_handler_19;
        }
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        // Return handler code:
        try_return_handler_19:;
        CHECK_OBJECT((PyObject *)tmp_select_metaclass_5__base);
        Py_DECREF(tmp_select_metaclass_5__base);
        tmp_select_metaclass_5__base = NULL;

        goto outline_result_10;
        // End of try:
        CHECK_OBJECT((PyObject *)tmp_select_metaclass_5__base);
        Py_DECREF(tmp_select_metaclass_5__base);
        tmp_select_metaclass_5__base = NULL;

        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE(dialogs);
        return NULL;
        outline_result_10:;
        condexpr_end_5:;
        assert(tmp_class_creation_5__metaclass == NULL);
        tmp_class_creation_5__metaclass = tmp_assign_source_49;
    }
    {
        PyObject *tmp_assign_source_51;
        PyObject *tmp_called_name_5;
        PyObject *tmp_args_element_name_13;
        PyObject *tmp_args_element_name_14;
        PyObject *tmp_args_element_name_15;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_called_name_5 = tmp_class_creation_5__metaclass;
        tmp_args_element_name_13 = const_str_plain_SetPowerDialog;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_args_element_name_14 = tmp_class_creation_5__bases;
        CHECK_OBJECT(tmp_class_creation_5__class_dict);
        tmp_args_element_name_15 = tmp_class_creation_5__class_dict;
        frame_8214e8d253398d83e0d02a06610c476b->m_frame.f_lineno = 959;
        {
            PyObject *call_args[] = {tmp_args_element_name_13, tmp_args_element_name_14, tmp_args_element_name_15};
            tmp_assign_source_51 = CALL_FUNCTION_WITH_ARGS3(tmp_called_name_5, call_args);
        }

        if (tmp_assign_source_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 959;

            goto try_except_handler_17;
        }
        assert(tmp_class_creation_5__class == NULL);
        tmp_class_creation_5__class = tmp_assign_source_51;
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_17:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;

    Py_XDECREF(tmp_class_creation_5__class_dict);
    tmp_class_creation_5__class_dict = NULL;

    Py_XDECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION(frame_8214e8d253398d83e0d02a06610c476b);
#endif
    popFrameStack();

    assertFrameObject(frame_8214e8d253398d83e0d02a06610c476b);

    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_8214e8d253398d83e0d02a06610c476b);
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK(frame_8214e8d253398d83e0d02a06610c476b, exception_lineno);
    }
    else if (exception_tb->tb_frame != &frame_8214e8d253398d83e0d02a06610c476b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8214e8d253398d83e0d02a06610c476b, exception_lineno);
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;

    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_52;
        CHECK_OBJECT(tmp_class_creation_5__class);
        tmp_assign_source_52 = tmp_class_creation_5__class;
        UPDATE_STRING_DICT0(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_SetPowerDialog, tmp_assign_source_52);
    }
    CHECK_OBJECT((PyObject *)tmp_class_creation_5__class);
    Py_DECREF(tmp_class_creation_5__class);
    tmp_class_creation_5__class = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_5__bases);
    Py_DECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_5__class_dict);
    Py_DECREF(tmp_class_creation_5__class_dict);
    tmp_class_creation_5__class_dict = NULL;

    CHECK_OBJECT((PyObject *)tmp_class_creation_5__metaclass);
    Py_DECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;

    {
        PyObject *tmp_assign_source_53;
        tmp_assign_source_53 = MAKE_FUNCTION_dialogs$$$function_23_mngPower_prompt();



        UPDATE_STRING_DICT1(moduledict_dialogs, (Nuitka_StringObject *)const_str_plain_mngPower_prompt, tmp_assign_source_53);
    }

    return module_dialogs;
    module_exception_exit:
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);
    return NULL;
}
