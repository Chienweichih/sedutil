#!/bin/bash
set -x
# Build a custom UEFI linux based PBA image
## define releases for tools
. conf
VERSIONINFO=`git describe --dirty` || VERSIONINFO=downloaded
BUILDTYPE=$1
PASSWORDONLY=$2
PLATFORM="x86_64"
IMGDIR="util"   # old "sedutil"

if [ "$PASSWORDONLY" == "Passwordonly" ] ; then
	BUILDIMG=UEFI64${1}-${VERSIONINFO}-${PASSWORDONLY}.img
elif [ "$PASSWORDONLY" == "" ] ; then
	BUILDIMG=UEFI64${1}-${VERSIONINFO}.img
else
	echo "You must select Passwordonly or blank"
	exit	
fi

if [ "$BUILDTYPE" == "Debug" ] || [ "$BUILDTYPE" == "Release" ] ; then
            echo "Building " $BUILDTYPE "image"
	else
	    echo "You must select Debug|Release"
	    exit		
fi

cd ../../sedutil-tcz/

rm lock.desktop
if [ "$PASSWORDONLY" == "Passwordonly" ] ; then
cp lock.desktop.original lock.desktop
echo "***** B4 rmicon_x64"
#read VAR
./rmicon_x64
echo "***** after rmicon_x64"
#read VAR
cp  Xprogs.tcz ../clone-pure64/cde/optional/
cp  wifi.tcz ../clone-pure64/cde/optional/
else
#sed s/--Passwordonly// lock.desktop.original > lock.desktop
sed s/--pba// lock.desktop.original > lock.desktop
fi
./mktcz ${BUILDTYPE} ${PLATFORM}

cp sedutil.tcz ../clone-pure64/misc1
cp -av sedutil ../clone-pure64/misc1
cp -v sedutil.tcz ../clone-pure64/cde/optional/
# read VAR
# now we have new XProg.tcz and sedutil.tcz in place 
# extract file system from corepure64.gz , add cde/* into /tmp/tce
# and repack corepure64.gz
sudo rm -rf pure64
mkdir -p pure64
cd pure64
zcat ../../clone-pure64/boot6.4.1/corepure64.gz | sudo cpio -i -d -H newc
sudo cp ../../clone-pure64/misc1/tce-setup usr/bin/tc-setup
mkdir -p tmp/tce
cp -av ../../clone-pure64/cde/* tmp/tce/ # 2> /dev/null
sudo find . | sudo cpio -o -H newc | gzip -9 > ../../clone-pure64/boot/corepure64.gz
cd ../
# return to sedutil-tcz

cd ../${IMGDIR}/images   
# Start fresh
sudo rm -rf UEFI64${BUILDTYPE} ; mkdir UEFI64${BUILDTYPE} ; cd UEFI64${BUILDTYPE}
# make an image file
dd if=/dev/zero of=${BUILDIMG}Z bs=1M count=68 # fr 67->85->68
# create first 2 sector of image with version info after boot sector
#output 1st sector with zero
dd if=/dev/zero of=f1 bs=1 count=512
#output version info
git describe > f2
#output (512 - n) byte of zero 
dd if=/dev/zero of=f3 bs=1 count=$((512 - `git describe | wc -m`))
cat f1 f2 f3 ${BUILDIMG}Z > ${BUILDIMG}
hexdump ${BUILDIMG} | head -1024
#read VAR 
rm -f ${BUILDIMG}Z f1 f2 f3


# n: new partiotion; how many partion? default 1; 
# 1st sector(34-20466): default 2048; 
# last sector(2048-20466) : default 20466
# hex code or GUID : default 8300(linux system)  
#(echo n;echo "";echo "";echo "";echo 0700;echo w;echo Y) | gdisk ${BUILDIMG}
# use offset 34 = 17408
#(echo n;echo "";echo 34;echo "";echo 0700;echo w;echo Y) | gdisk ${BUILDIMG}
#
# gdisk seem to generated corrupted GPT table later on
# try switch to fdisk to see how it goes
#
# 
(echo o;echo n;echo p;echo 1;echo "";echo "";echo a;echo w) | fdisk ${BUILDIMG}
#

#read VAR
# -o offset in bytes; 2048 sector=1048576 bytes; 34 sector= 17408
# --show print device name after setup (with -f)
# --find find first unused device
LOOPDEV=`sudo losetup --show -f -o 1048576 ${BUILDIMG}`
sudo mkfs.vfat $LOOPDEV -n UEFI64${BUILDTYPE}
sudo mkdir image
sudo mount $LOOPDEV image

sudo cp -a --no-preserve=mode,ownership ../../../clone-pure64/boot image/ # 2> /dev/null
sudo cp -a --no-preserve=mode,ownership ../../../clone-pure64/EFI  image/ # 2> /dev/null
# no more cde directory
# sudo cp -a ../../../clone-pure64/cde  image/
for f in Xprogs aterm
do 
sudo rm -v image/cde/optional/$f-original.tcz
done
# sudo cp -av ../../../clone-pure64/misc1  image/
#chmod -R 777 image/cde
echo "check final used disk image size"
sudo du -h image ; sudo du image
echo "Last check before umount"
#read VAR 
sudo umount image
sudo losetup -d $LOOPDEV
#gzip ${BUILDIMG}
